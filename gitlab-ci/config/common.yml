stages:
  - init
  - test
  - finalize

default:
  # Retry config copied from:
  # https://gitlab.com/gitlab-org/gitlab/blob/master/.gitlab/ci/global.gitlab-ci.yml#L1-9
  # Complete description available at:
  # https://docs.gitlab.com/ee/ci/yaml/#retry
  retry:
    max: 2  # This is confusing but this means "3 runs at max".
    when:
      - unknown_failure
      - api_failure
      - runner_system_failure
  # Generally only the last push to a branch matters and older jobs can be cancelled.
  # https://docs.gitlab.com/ee/ci/yaml/#interruptible
  # Jobs can override this by setting `interruptible: false`.
  interruptible: true

variables:
  TEST_ES_HOSTNAMES: >-
    elasticsearch.testnet.dfinity.network:443

before_script:
  - |
    # Execute the before_script section
    echo -e "\e[0Ksection_end:$(date +%s):before_script\r\e[0K"  # first close before_script section, if open

    # Start the (collapsed) before_script section
    set -eExuo pipefail
    echo -e "\e[0Ksection_start:$(date +%s):before_script[collapsed=true]\r\e[0KClick here to see the before_script section"

    date +%s > "/tmp/job_start_date_${CI_JOB_ID:-}"
    # date -Iseconds is not supported by BSD date (macOS)
    date +"%Y-%m-%dT%H:%M:%S%z" > "/tmp/job_start_iso_date_${CI_JOB_ID:-}"
    date
    command -v ssh-agent > /dev/null
    test -z "${SSH_AUTH_SOCK:-}" && { eval "$(ssh-agent -s)"; ssh-add - <<< "${SSH_PRIVATE_KEY}"; }
    mkdir -p ~/.ssh
    chmod 0700 ~/.ssh

    echo -e "Host *\nUser gitlab-runner\n" > ~/.ssh/config
    date

    export ROOT_PIPELINE_ID=${PARENT_PIPELINE_ID:-$CI_PIPELINE_ID}

    if [ "${CI_DISPOSABLE_ENVIRONMENT:-false}" != "true" ]; then
      # MacOS + shell builds
      export CARGO_TARGET_DIR="$CI_PROJECT_DIR/target"
    fi

    # docker login for RO to overcome anonymous pull limit of 100 pulls / 6h
    # enterprise logged in account has 5000 pulls / 24h
    if [ "$(uname)" == "Linux" ]; then
      docker login -u "$DOCKER_HUB_USER" -p "$DOCKER_HUB_PASSWORD_RO"
      docker-bin login -u "$DOCKER_HUB_USER" -p "$DOCKER_HUB_PASSWORD_RO"

      # set ownership to ic-build container's user,
      # but ignore errors that happen due to git gc:
      #   `chown: changing ownership of '.git/shallow.lock': No such file or directory`
      sudo chown "$(id -u):$(id -g)" -fR "${CI_PROJECT_DIR}" || true
    fi

  - echo -e "\e[0Ksection_end:$(date +%s):before_script\r\e[0K"


# TESTING NOTE:
# $SHELL_WRAPPER allows us to emulate CI runs without actually executing the complicated and
#                time-consuming operations.
#                In normal execution, "$SHELL_WRAPPER" will be substituted with "/usr/bin/time"
#                In CI validation, "$SHELL_WRAPPER" will be substituted with "echo"

after_script:
  - |
    # Start the after_script section
    echo -e "\e[0Ksection_start:$(date +%s):after_script[collapsed=true]\r\e[0KClick here to see the after_script section. It does not affect the job success status"

    # Export all the environmental variables so that the GITLAB configured variables are available to after_script.sh
    export ROOT_PIPELINE_ID=${PARENT_PIPELINE_ID:-$CI_PIPELINE_ID}
    buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" after-script -- "${CI_PROJECT_DIR}"/gitlab-ci/src/after_script/after_script.sh

    rm -rf "${CI_PROJECT_DIR}/target"

    # Finish and collapse the after_script section
    echo -e "\e[0Ksection_end:$(date +%s):after_script\r\e[0K"

.build-env-base:
  artifacts:
    paths:
      - "junit_data/*"
      - "coredumps/*.txt"
      - "coredumps/*.gz"
    when: always
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0  # Pull the complete repo initially
    GIT_STRATEGY: "fetch"  # And then pull only new commits
    SHELL_WRAPPER: "/usr/bin/time"

.ubuntu-k8s:
  extends:
    - .build-env-base
    - .ic-build-legacy-image

.build-k8s:
  extends:
    - .ubuntu-k8s
    - .ic-build-image
  tags:
    - dfinity-ic

.bazel-build-k8s:
  extends:
    - .build-k8s
  tags:
    - dfinity-ic
    # Run in ZH since BuildFarm is in ZH
    # TODO(IDX-2570): Run in any cluster when bazel infrastructure will be ready.
    - zh
  variables:
    BAZEL_STARTUP_ARGS: "--output_base=/var/tmp/bazel-output/"
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel"
    BAZEL_CI_CONFIG: "--config=ci"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"

.ubuntu-cargo-k8s:
  extends:
    - .build-env-base
    - .ubuntu-k8s
    - .ic-build-legacy-image
  variables:
    # This MUST match the directory used in our `build-ic.sh` script
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic -C link-arg=-s"

.macos-cargo-native:
  extends:
    - .build-env-base
  tags:
    - dfinity
    - macos


# Container images used by jobs.

.ic-build-image:
  artifacts:
    expire_in: 3 days
  image:
    name: "registry.gitlab.com/dfinity-lab/core/docker/ic-build:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4"
  tags:
    - dfinity-ic
  variables:
    GIT_CLONE_PATH: $CI_BUILDS_DIR/clean/$CI_PROJECT_NAME

.ic-build-legacy-image:
  artifacts:
    expire_in: 3 days
  image:
    name: "registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4"
  tags:
    - dfinity-ic
  variables:
    GIT_CLONE_PATH: $CI_BUILDS_DIR/clean/$CI_PROJECT_NAME

.cargo-rules:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"'
    - if: '$CI_PIPELINE_SOURCE == "web" && $DISKIMG_BRANCH == ""'
      when: manual
      allow_failure: true  # the pipeline continues running even if the manual job is not run
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
      when: manual
      allow_failure: true  # the pipeline continues running even if the manual job is not run

.rules-parent-pipeline:
  rules:
    - if: '$CI_PARENT_PIPELINE_SOURCE == "trigger"'
      when: manual
      allow_failure: true  # the pipeline continues running even if the manual job is not run
    - if: '$CI_PIPELINE_SOURCE == "parent_pipeline"'

# 1. If on the RC branch and "hotfix" (case insensitive) is in the commit message,
#    then allow manual execution of prod hourly and nightly tests.
# 2. Otherwise, if on the RC branch then perform automatic execution of prod hourly and nightly
#    tests.
# 3. Otherwise, if on any other branch and triggered by a merge request allow for manual
#    execution of prod hourly and nightly tests.
.rules-rollout-pipeline-auto:
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^rc--/ && $CI_COMMIT_MESSAGE =~ /hotfix/i && $CI_PIPELINE_SOURCE != "trigger"'
      when: manual
      allow_failure: true
    - if: '$CI_COMMIT_BRANCH =~ /^rc--/ && $CI_PIPELINE_SOURCE != "trigger"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: manual
      allow_failure: true
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
      when: manual
      allow_failure: true

#  If on the RC branch, whether "hotfix" is in the commit message or not,
#  always perfrom automatic execution of the prod hotfix tests. This means that, hotfix
#  tests are not only exercised on hotfix pipelines, but are also exercised on nightly
#  release qualification pipelines to ensure the hotfix tests are always working.
.rules-prod-hotfix-pipeline:
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^rc--/
      when: always
    - if: $CI_PIPELINE_SOURCE == "web" || $CI_PIPELINE_SOURCE == "trigger"
      when: manual
      allow_failure: true  # the pipeline continues running even if the manual job is not run
    - if: '$CI_MERGE_REQUEST_TITLE =~ /(\[rc\]|hotfix)/i'
      when: manual
      allow_failure: true  # the pipeline continues running even if the manual job is not run
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: manual
      allow_failure: true

.rules-rollout-pipeline-run-on-trigger:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
      when: manual
      allow_failure: true  # the pipeline continues running even if the manual job is not run

# Rule for triggering SNS tests
.rules-simple-prober:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_REF_NAME == "precious-automation/run-simple-prober-v4"'

.rules-scheduled-reproducibility:
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "build-reproducibility"
