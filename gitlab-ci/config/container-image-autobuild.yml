container-autobuild-protected:
  extends:
    - .ubuntu-cargo-k8s
  rules:
    # Run immediatly on Dockerfile changes pushed to a protected branch - such as master.
    - if: '$CI_COMMIT_REF_PROTECTED == "true" && $CI_PIPELINE_SOURCE == "push"'
      changes:
        - gitlab-ci/container/TAG
    - if: '$CI_COMMIT_REF_PROTECTED == "true" && $SCHEDULE_NAME == "run-all-master"'
  needs: []
  script:
    - |
      # use docker on protected runner
      set -euo pipefail

      # container image tag
      TAG=$(cat ./gitlab-ci/container/TAG)
      # check if we have it in dockerhub
      EXISTS=$(curl -s https://hub.docker.com/v2/repositories/dfinity/ic-build-legacy/tags | jq -r "[.results? | .[]? | .name == \"$TAG\"] | any")
      EXISTS_BAZEL=$(curl -s https://hub.docker.com/v2/repositories/dfinity/ic-build/tags | jq -r "[.results? | .[]? | .name == \"$TAG\"] | any")

      if [ "$EXISTS" != "true" ] || [ "$EXISTS_BAZEL" != "true" ]; then
        # build it
        echo -e "\e[0Ksection_start:$(date +%s):docker_build_script[collapsed=true]\r\e[0KClick here to see the docker_build_script"
        ./gitlab-ci/container/build-image.sh
        echo -e "\e[0Ksection_end:$(date +%s):docker_build_script\r\e[0K"
        # push it to dockerhub
        docker login -u "$DOCKER_HUB_USER" -p "$DOCKER_HUB_PASSWORD"
        docker push docker.io/dfinity/ic-build-legacy:"$TAG"
        docker push docker.io/dfinity/ic-build-legacy:latest
        docker push docker.io/dfinity/ic-build:"$TAG"
        docker push docker.io/dfinity/ic-build:latest
        # clean-up
        docker image prune -f
        docker container prune -f
      fi

container-autobuild:
  extends:
    - .ubuntu-cargo-k8s
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - requirements.txt
        - .bazelversion
        - gitlab-ci/container/**/*
        - gitlab-ci/config/container-image-autobuild.yml
  needs: []
  script:
    - |
      set -euo pipefail

      # safeguard for feedback loop [this CI job pushes commits]
      git fetch origin master
      COMMIT_COUNT=$(git rev-list --count "$(git merge-base HEAD origin/master)"..HEAD)
      if [ "$COMMIT_COUNT" -gt 256 ]; then
          echo "Reached hard safeguard limit of commits"
          exit 1
      fi

      # check if tag changed
      pushd gitlab-ci/container
      TAG="$(./get-image-tag.sh)"
      cd ../config
      # names must match with names in docker-build-image.sh!
      IMG_NAME="registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy"
      IMG_BAZEL_NAME="registry.gitlab.com/dfinity-lab/core/docker/ic-build"
      IMG_BAZEL_DOCKER_HUB="dfinity/ic-build"

      IMG_NAME_FULL="$IMG_NAME:$TAG"
      IMG_BAZEL_NAME_FULL="$IMG_BAZEL_NAME:$TAG"
      IMG_BAZEL_DOCKER_HUB_FULL="$IMG_BAZEL_DOCKER_HUB:$TAG"

      # return if no changes
      if grep -q "$IMG_NAME_FULL" -- *; then
          echo "No changes required to build a new docker ic-build-legacy image"
          exit 0
      fi
      popd

      # build new ic-build* images
      ./gitlab-ci/container/build-image.sh

      # push the new ic-build-legacy image it to gitlab registry
      docker login -u gitlab-ci-token -p "$GITLAB_API_TOKEN" registry.gitlab.com
      docker push "$IMG_NAME_FULL"
      docker push "$IMG_BAZEL_NAME_FULL"
      # clean-up
      docker image prune -f
      docker container prune -f

      # update gitlab's docker image tags
      pushd gitlab-ci/config
      sed -i -E "s|$IMG_NAME:[^\"]{5,}|$IMG_NAME_FULL|g" -- *
      sed -i -E "s|$IMG_BAZEL_NAME:[^\"]{5,}|$IMG_BAZEL_NAME_FULL|g" -- *
      cd ../container
      echo "$TAG" > TAG
      popd

      pushd .devcontainer
      sed -i -E "s|$IMG_BAZEL_DOCKER_HUB:[^\"]{5,}|$IMG_BAZEL_DOCKER_HUB_FULL|g" -- *
      popd

      # commit and push the change upstream
      git config --global user.email "idx@dfinity.org"
      git config --global user.name "IDX GitLab Automation"
      git commit -a -m "Updating docker image in CI"
      git remote add origin \
          "https://gitlab-ci-token:${GITLAB_API_TOKEN}@gitlab.com/${CI_PROJECT_PATH}.git" \
          || true
      git remote set-url origin \
          "https://gitlab-ci-token:${GITLAB_API_TOKEN}@gitlab.com/${CI_PROJECT_PATH}.git" \
          || true
      git push --set-upstream origin HEAD:"$CI_COMMIT_REF_NAME"
