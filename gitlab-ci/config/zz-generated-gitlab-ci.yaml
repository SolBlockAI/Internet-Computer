---
".after-script-test":
  artifacts:
    expire_in: 3 days
    paths:
      - junit_data/*
      - coredumps/*.txt
      - coredumps/*.gz
    when: always
  extends:
    - ".bazel-build-k8s"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs: []
  rules:
    - changes:
        - gitlab-ci/src/after_script/**/*
        - gitlab-ci/config/**/*
      if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE == "merge_train"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~ /\bhotfix\b/i
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
  script:
    - |
      set -eExuo pipefail

      cd "${CI_PROJECT_DIR}"

      shellcheck -x gitlab-ci/src/after_script/*.sh

      buildevents cmd "$CI_PIPELINE_ID" "$CI_JOB_ID" "$CI_JOB_NAME" -- "${CI_PROJECT_DIR}"/gitlab-ci/src/after_script/after_script.sh
  tags:
    - dfinity-ic
  variables:
    BAZEL_CI_CONFIG: "--config=ci"
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel"
    BAZEL_STARTUP_ARGS: "--output_base=/var/tmp/bazel-output/"
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    SHELL_WRAPPER: "/usr/bin/time"
".bazel-build-fuzzers":
  after_script:
    - |
      set +e # Do not fail in the after_script, try to do as much as possible instead.
      echo -e "\033[0;31m"
      echo -e "************************************************************************"
      echo -e "*** NEED BAZEL HELP? See go/bazel-guide and #project-bazel           ***"
      echo -e "*** (NEW) To regenerate Cargo Bazel lockfiles run ./bin/bazel-pin.sh ***"
      echo -e "************************************************************************"
      echo -e "\033[0m"
    - cp -R "$(realpath bazel-testlogs)" bazel-testlogs-gitlab
    - gzip bazel-build-log*.json
    - |
      echo -e "\e[0Ksection_start:$(date +%s):bazel_exporter_logs[collapsed=true]\r\e[0KClick to see Bazel exporter logs"
      bazel run //bazel/exporter:exporter --build_event_binary_file= -- -f "$(pwd)/bazel-bep.pb"
      echo -e "\e[0Ksection_end:$(date +%s):bazel_exporter_logs\r\e[0K"
    - |
      if [ "$(uname)" == "Linux" ]; then
          bazel clean --expunge
      fi
    - - |
        # Start the after_script section
        echo -e "\e[0Ksection_start:$(date +%s):after_script[collapsed=true]\r\e[0KClick here to see the after_script section. It does not affect the job success status"

        # Export all the environmental variables so that the GITLAB configured variables are available to after_script.sh
        export ROOT_PIPELINE_ID=${PARENT_PIPELINE_ID:-$CI_PIPELINE_ID}
        buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" after-script -- "${CI_PROJECT_DIR}"/gitlab-ci/src/after_script/after_script.sh

        rm -rf "${CI_PROJECT_DIR}/target"

        # Finish and collapse the after_script section
        echo -e "\e[0Ksection_end:$(date +%s):after_script\r\e[0K"
  artifacts:
    expire_in: 3 days
    paths:
      - bazel-build-log*.json*
      - bazel-bep.pb
    reports:
      junit: bazel-testlogs-gitlab/**/test.xml
    when: always
  extends:
    - ".bazel-test-all"
    - ".ic-build-legacy-image"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE == "merge_train"
      variables:
        BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate --flaky_test_attempts=3"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~ /\bhotfix\b/i
      variables:
        BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
  script:
    - "./gitlab-ci/src/bazel-ci/main.sh"
  tags:
    - zh
    - dfinity-ic
  variables:
    BAZEL_CI_CONFIG: "--config=ci"
    BAZEL_COMMAND: test
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel"
    BAZEL_STARTUP_ARGS: "--output_base=/var/tmp/bazel-output/"
    BAZEL_TARGETS: "//..."
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    SHELL_WRAPPER: "/usr/bin/time"
".bazel-build-k8s":
  artifacts:
    expire_in: 3 days
    paths:
      - junit_data/*
      - coredumps/*.txt
      - coredumps/*.gz
    when: always
  extends:
    - ".build-k8s"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  tags:
    - dfinity-ic
    - zh
  variables:
    BAZEL_CI_CONFIG: "--config=ci"
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel"
    BAZEL_STARTUP_ARGS: "--output_base=/var/tmp/bazel-output/"
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    SHELL_WRAPPER: "/usr/bin/time"
".bazel-rules-pipeline":
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE == "merge_train"
      variables:
        BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate --flaky_test_attempts=3"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~ /\bhotfix\b/i
      variables:
        BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
".bazel-rules-pipeline-no-merge-train":
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE != "merge_train" && $CI_MERGE_REQUEST_TITLE =~ /\bhotfix\b/i
      variables:
        BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE != "merge_train"
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
".bazel-rules-pipeline-no-merge-train-allow-to-fail":
  rules:
    - allow_failure: true
      if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE != "merge_train"
      when: manual
    - allow_failure: true
      if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
    - allow_failure: true
      if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
".bazel-rules-post-master":
  rules:
    - allow_failure: true
      if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE != "merge_train"
      when: manual
    - if: $SCHEDULE_NAME == "run-all-master"
".bazel-test-all":
  after_script:
    - |
      set +e # Do not fail in the after_script, try to do as much as possible instead.
      echo -e "\033[0;31m"
      echo -e "************************************************************************"
      echo -e "*** NEED BAZEL HELP? See go/bazel-guide and #project-bazel           ***"
      echo -e "*** (NEW) To regenerate Cargo Bazel lockfiles run ./bin/bazel-pin.sh ***"
      echo -e "************************************************************************"
      echo -e "\033[0m"
    - cp -R "$(realpath bazel-testlogs)" bazel-testlogs-gitlab
    - gzip bazel-build-log*.json
    - |
      echo -e "\e[0Ksection_start:$(date +%s):bazel_exporter_logs[collapsed=true]\r\e[0KClick to see Bazel exporter logs"
      bazel run //bazel/exporter:exporter --build_event_binary_file= -- -f "$(pwd)/bazel-bep.pb"
      echo -e "\e[0Ksection_end:$(date +%s):bazel_exporter_logs\r\e[0K"
    - |
      if [ "$(uname)" == "Linux" ]; then
          bazel clean --expunge
      fi
    - - |
        # Start the after_script section
        echo -e "\e[0Ksection_start:$(date +%s):after_script[collapsed=true]\r\e[0KClick here to see the after_script section. It does not affect the job success status"

        # Export all the environmental variables so that the GITLAB configured variables are available to after_script.sh
        export ROOT_PIPELINE_ID=${PARENT_PIPELINE_ID:-$CI_PIPELINE_ID}
        buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" after-script -- "${CI_PROJECT_DIR}"/gitlab-ci/src/after_script/after_script.sh

        rm -rf "${CI_PROJECT_DIR}/target"

        # Finish and collapse the after_script section
        echo -e "\e[0Ksection_end:$(date +%s):after_script\r\e[0K"
  artifacts:
    expire_in: 3 days
    paths:
      - bazel-build-log*.json*
      - bazel-bep.pb
    reports:
      junit: bazel-testlogs-gitlab/**/test.xml
    when: always
  extends:
    - ".bazel-rules-pipeline"
    - ".bazel-build-k8s"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE == "merge_train"
      variables:
        BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate --flaky_test_attempts=3"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~ /\bhotfix\b/i
      variables:
        BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
  script:
    - "./gitlab-ci/src/bazel-ci/main.sh"
  tags:
    - dfinity-ic
    - zh
  variables:
    BAZEL_CI_CONFIG: "--config=ci"
    BAZEL_COMMAND: test
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel"
    BAZEL_STARTUP_ARGS: "--output_base=/var/tmp/bazel-output/"
    BAZEL_TARGETS: "//..."
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    SHELL_WRAPPER: "/usr/bin/time"
".benchmark-spot-test":
  artifacts:
    expire_in: 3 days
    paths:
      - "$CI_JOB_STAGE/$CI_JOB_NAME"
    when: always
  dependencies: []
  extends:
    - ".ubuntu-cargo-k8s"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  resource_group: "$TESTNET"
  rules:
    - allow_failure: true
      if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~ /\[benchmark\]/
      when: manual
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "BENCHMARK_NIGHTLY"
      when: always
  tags:
    - dfinity-ic
  timeout: 1 hour
  variables:
    CD_ENV: BENCHMARK_NIGHTLY
    CURRENT_BRANCH: "$CI_COMMIT_REF_NAME"
    DISKIMG_BRANCH: "${CI_COMMIT_SHA}"
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic -C link-arg=-s"
    SHELL_WRAPPER: "/usr/bin/time"
    TESTNET: cdrc02
    WG_TESTNET: cdrc02
    cd_target_env: BENCHMARK_NIGHTLY
".benchmark-test":
  artifacts:
    expire_in: 3 days
    paths:
      - "$CI_JOB_STAGE/$CI_JOB_NAME"
    when: always
  dependencies: []
  extends:
    - ".ubuntu-cargo-k8s"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  resource_group: "$TESTNET"
  rules:
    - allow_failure: true
      if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~ /\[benchmark\]/
      when: manual
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "BENCHMARK_SUITE"
      when: always
  tags:
    - dfinity-ic
  timeout: 3 hours
  variables:
    CURRENT_BRANCH: "$CI_COMMIT_REF_NAME"
    DISKIMG_BRANCH: "${CI_COMMIT_SHA}"
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic -C link-arg=-s"
    SHELL_WRAPPER: "/usr/bin/time"
    TESTNET: cdslo
".build-base-image": |
  set -euo pipefail

  TAG=$(date '+%Y-%m-%d-%H%M')
  echo -e "\e[0Ksection_start:$(date +%s):${IMAGE}[collapsed=true]\r\e[0KClick here to see the ${IMAGE} build"
  pushd "$CONTEXT"
  podman build "${BUILD_ARGS[@]}" --squash-all --no-cache -t "docker.io/dfinity/${IMAGE}:${TAG}" -f Dockerfile.base .
  popd
  echo -e "\e[0Ksection_end:$(date +%s):${IMAGE}\r\e[0K"

  if [ "${CI_COMMIT_REF_NAME:-}" == "master" ]; then
      podman login -u "$DOCKER_HUB_USER" -p "$DOCKER_HUB_PASSWORD" docker.io
      podman push "dfinity/${IMAGE}:${TAG}" --digestfile digestfile
      echo "dfinity/${IMAGE}@$(cat digestfile)" > "digestfile-${IMAGE}"
      echo "$REF_FILE" >> "digestfile-${IMAGE}"
      rm -f digestfile
  fi
".build-base-image-job":
  artifacts:
    expire_in: 3 days
    paths:
      - digestfile*
    when: always
  extends:
    - ".ubuntu-k8s"
    - ".rules-build-base-images"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "build-push-base-images"
    - allow_failure: true
      if: $CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
      when: manual
    - changes:
        - gitlab-ci/config/base-images-build.yml
        - ic-os/boundary-guestos/rootfs/Dockerfile.base
        - ic-os/boundary-api-guestos/rootfs/Dockerfile.base
        - ic-os/guestos/rootfs/Dockerfile.base
        - ic-os/guestos/rootfs/packages.common
        - ic-os/guestos/rootfs/packages.dev
        - ic-os/hostos/rootfs/Dockerfile.base
        - ic-os/hostos/rootfs/packages.common
        - ic-os/hostos/rootfs/packages.dev
        - ic-os/setupos/rootfs/Dockerfile.base
        - ic-os/setupos/rootfs/packages.common
        - ic-os/setupos/rootfs/packages.dev
      if: $CI_PARENT_PIPELINE_SOURCE == "merge_request_event"
  script:
    - |
      set -euo pipefail

      TAG=$(date '+%Y-%m-%d-%H%M')
      echo -e "\e[0Ksection_start:$(date +%s):${IMAGE}[collapsed=true]\r\e[0KClick here to see the ${IMAGE} build"
      pushd "$CONTEXT"
      podman build "${BUILD_ARGS[@]}" --squash-all --no-cache -t "docker.io/dfinity/${IMAGE}:${TAG}" -f Dockerfile.base .
      popd
      echo -e "\e[0Ksection_end:$(date +%s):${IMAGE}\r\e[0K"

      if [ "${CI_COMMIT_REF_NAME:-}" == "master" ]; then
          podman login -u "$DOCKER_HUB_USER" -p "$DOCKER_HUB_PASSWORD" docker.io
          podman push "dfinity/${IMAGE}:${TAG}" --digestfile digestfile
          echo "dfinity/${IMAGE}@$(cat digestfile)" > "digestfile-${IMAGE}"
          echo "$REF_FILE" >> "digestfile-${IMAGE}"
          rm -f digestfile
      fi
  tags:
    - dfinity-ic
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
".build-env-base":
  artifacts:
    paths:
      - junit_data/*
      - coredumps/*.txt
      - coredumps/*.gz
    when: always
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
".build-ic":
  artifacts:
    expire_in: 3 days
    paths:
      - bazel-build-log*.json*
    reports:
      dotenv: nns.release.env
  extends:
    - ".ic-build-image"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs: []
  script:
    - |
      set -euo pipefail
      VERSION=$(git rev-parse HEAD)

      if [ "$CI_JOB_NAME" == "build-ic-release" ]; then
          # read NNS release version from git tree
          NNS_RELEASE_VERSION="$(jq -r '.subnets["tdb26-jop6k-aogll-7ltgs-eruif-6kk7m-qpktf-gdiqx-mxtrf-vb5e6-eqe"]' testnet/mainnet_revisions.json)"
          # we pass nss version info to build-determinism-*-release jobs
          # we put it under /tmp due to git clean -ffdx within build-ic script
          echo "NNS_RELEASE_VERSION=$NNS_RELEASE_VERSION" > /tmp/nns.release.env

          # fetch and checkout this version
          git fetch origin "$NNS_RELEASE_VERSION"
          git checkout "$NNS_RELEASE_VERSION"
          # NOTE: ic/$VERSION in S3 will have artifacts
          #       for revision $NNS_RELEASE_VERSION !!!
      fi

      if [ "$CI_COMMIT_REF_PROTECTED" == "true" ]; then
          gitlab-ci/container/build-ic.sh -i -c -b
      else
          gitlab-ci/container/build-ic.sh -i -c -b --no-release
      fi

      # release binaries
      buildevents cmd "${ROOT_PIPELINE_ID}" "${CI_JOB_ID}" rclone -- \
          gitlab-ci/src/artifacts/rclone_upload.py --version="${VERSION}" \
          "artifacts/release" "${CI_JOB_NAME}/release"
      # canister binaries
      buildevents cmd "${ROOT_PIPELINE_ID}" "${CI_JOB_ID}" rclone -- \
          gitlab-ci/src/artifacts/rclone_upload.py --version="${VERSION}" \
          "artifacts/canisters" "${CI_JOB_NAME}/canisters"

      # guestos images
      buildevents cmd "${ROOT_PIPELINE_ID}" "${CI_JOB_ID}" rclone -- \
          gitlab-ci/src/artifacts/rclone_upload.py --version="${VERSION}" \
          "artifacts/icos/guestos" "${CI_JOB_NAME}/guest-os"
      # hostos images
      buildevents cmd "${ROOT_PIPELINE_ID}" "${CI_JOB_ID}" rclone -- \
          gitlab-ci/src/artifacts/rclone_upload.py --version="${VERSION}" \
          "artifacts/icos/hostos" "${CI_JOB_NAME}/host-os"
      # setupos images
      buildevents cmd "${ROOT_PIPELINE_ID}" "${CI_JOB_ID}" rclone -- \
          gitlab-ci/src/artifacts/rclone_upload.py --version="${VERSION}" \
          "artifacts/icos/setupos" "${CI_JOB_NAME}/setup-os"

      # clean up
      bazel clean --expunge

      # collect dotenv
      if [ -f /tmp/nns.release.env ]; then
          mv /tmp/nns.release.env .
      fi
  tags:
    - dfinity-ic
  variables:
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
".build-k8s":
  artifacts:
    expire_in: 3 days
    paths:
      - junit_data/*
      - coredumps/*.txt
      - coredumps/*.gz
    when: always
  extends:
    - ".ubuntu-k8s"
    - ".ic-build-image"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  tags:
    - dfinity-ic
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
".cargo-rules":
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
    - allow_failure: true
      if: $CI_PIPELINE_SOURCE == "web" && $DISKIMG_BRANCH == ""
      when: manual
    - allow_failure: true
      if: $CI_PIPELINE_SOURCE == "trigger"
      when: manual
".ic-build-image":
  artifacts:
    expire_in: 3 days
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  tags:
    - dfinity-ic
  variables:
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
".ic-build-legacy-image":
  artifacts:
    expire_in: 3 days
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  tags:
    - dfinity-ic
  variables:
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
".macos-cargo-native":
  artifacts:
    paths:
      - junit_data/*
      - coredumps/*.txt
      - coredumps/*.gz
    when: always
  extends:
    - ".build-env-base"
  tags:
    - dfinity
    - macos
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
".prod-nightly-test":
  artifacts:
    expire_in: 3 days
    paths:
      - "$CI_JOB_STAGE/$CI_JOB_NAME"
    when: always
  dependencies: []
  extends: ".prod-test"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs: []
  rules:
    - allow_failure: true
      if: "$CD_ENV == $cd_target_env && $CI_COMMIT_BRANCH =~ /^rc--/ && $CI_COMMIT_MESSAGE =~ /hotfix/i"
      when: manual
    - allow_failure: true
      if: "$CD_ENV == $cd_target_env && $CI_MERGE_REQUEST_TITLE =~ /\\[rc\\]/"
      when: manual
    - allow_failure: true
      if: $CI_PIPELINE_SOURCE == "web" && $CD_ENV != "BENCHMARK_SUITE"
      when: manual
    - if: $CD_ENV == $cd_target_env && ($DEBUG_PIPELINE != "true" || $cd_debug_target == "true") && $CD_ENV != "BENCHMARK_SUITE"
      when: always
  tags:
    - dfinity-ic
  timeout: 3 hours
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic -C link-arg=-s"
    SHELL_WRAPPER: "/usr/bin/time"
    cd_target_env: NIGHTLY
".prod-nightly-test-group-2":
  artifacts:
    expire_in: 3 days
    paths:
      - "$CI_JOB_STAGE/$CI_JOB_NAME"
    when: always
  dependencies: []
  extends: ".prod-nightly-test"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs: []
  resource_group: "$TESTNET2"
  rules:
    - allow_failure: true
      if: "$CD_ENV == $cd_target_env && $CI_COMMIT_BRANCH =~ /^rc--/ && $CI_COMMIT_MESSAGE =~ /hotfix/i"
      when: manual
    - allow_failure: true
      if: "$CD_ENV == $cd_target_env && $CI_MERGE_REQUEST_TITLE =~ /\\[rc\\]/"
      when: manual
    - allow_failure: true
      if: $CI_PIPELINE_SOURCE == "web" && $CD_ENV != "BENCHMARK_SUITE"
      when: manual
    - if: $CD_ENV == $cd_target_env && ($DEBUG_PIPELINE != "true" || $cd_debug_target == "true") && $CD_ENV != "BENCHMARK_SUITE"
      when: always
  tags:
    - dfinity-ic
  timeout: 3 hours
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic -C link-arg=-s"
    SHELL_WRAPPER: "/usr/bin/time"
    TESTNET: "$TESTNET2"
    cd_debug_target: 'true'
    cd_target_env: NIGHTLY
".prod-test":
  artifacts:
    expire_in: 3 days
    paths:
      - "$CI_JOB_STAGE/$CI_JOB_NAME"
    when: always
  dependencies: []
  extends:
    - ".ubuntu-cargo-k8s"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  rules:
    - allow_failure: true
      if: "$CD_ENV == $cd_target_env && $CI_COMMIT_BRANCH =~ /^rc--/ && $CI_COMMIT_MESSAGE =~ /hotfix/i"
      when: manual
    - allow_failure: true
      if: "$CD_ENV == $cd_target_env && $CI_MERGE_REQUEST_TITLE =~ /\\[rc\\]/"
      when: manual
    - allow_failure: true
      if: $CI_PIPELINE_SOURCE == "web" && $CD_ENV != "BENCHMARK_SUITE"
      when: manual
    - if: $CD_ENV == $cd_target_env && ($DEBUG_PIPELINE != "true" || $cd_debug_target == "true") && $CD_ENV != "BENCHMARK_SUITE"
      when: always
  tags:
    - dfinity-ic
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic -C link-arg=-s"
    SHELL_WRAPPER: "/usr/bin/time"
".rules-build-base-images":
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "build-push-base-images"
    - allow_failure: true
      if: $CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
      when: manual
    - changes:
        - gitlab-ci/config/base-images-build.yml
        - ic-os/boundary-guestos/rootfs/Dockerfile.base
        - ic-os/boundary-api-guestos/rootfs/Dockerfile.base
        - ic-os/guestos/rootfs/Dockerfile.base
        - ic-os/guestos/rootfs/packages.common
        - ic-os/guestos/rootfs/packages.dev
        - ic-os/hostos/rootfs/Dockerfile.base
        - ic-os/hostos/rootfs/packages.common
        - ic-os/hostos/rootfs/packages.dev
        - ic-os/setupos/rootfs/Dockerfile.base
        - ic-os/setupos/rootfs/packages.common
        - ic-os/setupos/rootfs/packages.dev
      if: $CI_PARENT_PIPELINE_SOURCE == "merge_request_event"
".rules-parent-pipeline":
  rules:
    - allow_failure: true
      if: $CI_PARENT_PIPELINE_SOURCE == "trigger"
      when: manual
    - if: $CI_PIPELINE_SOURCE == "parent_pipeline"
".rules-prod-hotfix-pipeline":
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^rc--/"
      when: always
    - allow_failure: true
      if: $CI_PIPELINE_SOURCE == "web" || $CI_PIPELINE_SOURCE == "trigger"
      when: manual
    - allow_failure: true
      if: "$CI_MERGE_REQUEST_TITLE =~ /(\\[rc\\]|hotfix)/i"
      when: manual
    - allow_failure: true
      if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: manual
".rules-rollout-pipeline-auto":
  rules:
    - allow_failure: true
      if: $CI_COMMIT_BRANCH =~ /^rc--/ && $CI_COMMIT_MESSAGE =~ /hotfix/i && $CI_PIPELINE_SOURCE != "trigger"
      when: manual
    - if: $CI_COMMIT_BRANCH =~ /^rc--/ && $CI_PIPELINE_SOURCE != "trigger"
      when: always
    - allow_failure: true
      if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: manual
    - allow_failure: true
      if: $CI_PIPELINE_SOURCE == "trigger"
      when: manual
".rules-rollout-pipeline-run-on-trigger":
  rules:
    - allow_failure: true
      if: $CI_PIPELINE_SOURCE == "trigger"
      when: manual
".rules-scheduled-reproducibility":
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "build-reproducibility"
".rules-simple-prober":
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_REF_NAME == "precious-automation/run-simple-prober-v4"
".sns-tests":
  artifacts:
    expire_in: 3 days
    paths:
      - "$CI_JOB_STAGE/$CI_JOB_NAME"
    when: always
  dependencies: []
  extends:
    - ".ubuntu-cargo-k8s"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  resource_group: "$TESTNET"
  rules:
    - allow_failure: true
      if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~ /\[sns\]/
      when: manual
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "SNS_CD"
      when: always
  tags:
    - dfinity-ic
  timeout: 1 hour
  variables:
    CD_ENV: SNS_CD
    CURRENT_BRANCH: "$CI_COMMIT_REF_NAME"
    DISKIMG_BRANCH: "${CI_COMMIT_SHA}"
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic -C link-arg=-s"
    SHELL_WRAPPER: "/usr/bin/time"
    cd_target_env: BENCHMARK_NIGHTLY
".ubuntu-cargo-k8s":
  artifacts:
    expire_in: 3 days
    paths:
      - junit_data/*
      - coredumps/*.txt
      - coredumps/*.gz
    when: always
  extends:
    - ".build-env-base"
    - ".ubuntu-k8s"
    - ".ic-build-legacy-image"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  tags:
    - dfinity-ic
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic -C link-arg=-s"
    SHELL_WRAPPER: "/usr/bin/time"
".ubuntu-k8s":
  artifacts:
    expire_in: 3 days
    paths:
      - junit_data/*
      - coredumps/*.txt
      - coredumps/*.gz
    when: always
  extends:
    - ".build-env-base"
    - ".ic-build-legacy-image"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  tags:
    - dfinity-ic
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
".with-monitoring":
  variables:
    REPLICA_LOG_DEBUG_OVERRIDES: ic_consensus::consensus::batch_delivery,ic_artifact_manager::processors,ic_consensus::consensus,ic_transport::control_plane
after-script-test-ic-build-image:
  artifacts:
    expire_in: 3 days
    paths:
      - junit_data/*
      - coredumps/*.txt
      - coredumps/*.gz
    when: always
  extends:
    - ".after-script-test"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs: []
  rules:
    - changes:
        - gitlab-ci/src/after_script/**/*
        - gitlab-ci/config/**/*
      if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE == "merge_train"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~ /\bhotfix\b/i
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
  script:
    - |
      set -eExuo pipefail

      cd "${CI_PROJECT_DIR}"

      shellcheck -x gitlab-ci/src/after_script/*.sh

      buildevents cmd "$CI_PIPELINE_ID" "$CI_JOB_ID" "$CI_JOB_NAME" -- "${CI_PROJECT_DIR}"/gitlab-ci/src/after_script/after_script.sh
  tags:
    - dfinity-ic
  variables:
    BAZEL_CI_CONFIG: "--config=ci"
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel"
    BAZEL_STARTUP_ARGS: "--output_base=/var/tmp/bazel-output/"
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    SHELL_WRAPPER: "/usr/bin/time"
after-script-test-ic-build-legacy-image:
  artifacts:
    expire_in: 3 days
    paths:
      - junit_data/*
      - coredumps/*.txt
      - coredumps/*.gz
    when: always
  extends:
    - ".after-script-test"
    - ".ic-build-legacy-image"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs: []
  rules:
    - changes:
        - gitlab-ci/src/after_script/**/*
        - gitlab-ci/config/**/*
      if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE == "merge_train"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~ /\bhotfix\b/i
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
  script:
    - |
      set -eExuo pipefail

      cd "${CI_PROJECT_DIR}"

      shellcheck -x gitlab-ci/src/after_script/*.sh

      buildevents cmd "$CI_PIPELINE_ID" "$CI_JOB_ID" "$CI_JOB_NAME" -- "${CI_PROJECT_DIR}"/gitlab-ci/src/after_script/after_script.sh
  tags:
    - dfinity-ic
  variables:
    BAZEL_CI_CONFIG: "--config=ci"
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel"
    BAZEL_STARTUP_ARGS: "--output_base=/var/tmp/bazel-output/"
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    SHELL_WRAPPER: "/usr/bin/time"
after_script:
  - |
    # Start the after_script section
    echo -e "\e[0Ksection_start:$(date +%s):after_script[collapsed=true]\r\e[0KClick here to see the after_script section. It does not affect the job success status"

    # Export all the environmental variables so that the GITLAB configured variables are available to after_script.sh
    export ROOT_PIPELINE_ID=${PARENT_PIPELINE_ID:-$CI_PIPELINE_ID}
    buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" after-script -- "${CI_PROJECT_DIR}"/gitlab-ci/src/after_script/after_script.sh

    rm -rf "${CI_PROJECT_DIR}/target"

    # Finish and collapse the after_script section
    echo -e "\e[0Ksection_end:$(date +%s):after_script\r\e[0K"
bazel-build-fuzzers:
  after_script:
    - |
      set +e # Do not fail in the after_script, try to do as much as possible instead.
      echo -e "\033[0;31m"
      echo -e "************************************************************************"
      echo -e "*** NEED BAZEL HELP? See go/bazel-guide and #project-bazel           ***"
      echo -e "*** (NEW) To regenerate Cargo Bazel lockfiles run ./bin/bazel-pin.sh ***"
      echo -e "************************************************************************"
      echo -e "\033[0m"
    - cp -R "$(realpath bazel-testlogs)" bazel-testlogs-gitlab
    - gzip bazel-build-log*.json
    - |
      echo -e "\e[0Ksection_start:$(date +%s):bazel_exporter_logs[collapsed=true]\r\e[0KClick to see Bazel exporter logs"
      bazel run //bazel/exporter:exporter --build_event_binary_file= -- -f "$(pwd)/bazel-bep.pb"
      echo -e "\e[0Ksection_end:$(date +%s):bazel_exporter_logs\r\e[0K"
    - |
      if [ "$(uname)" == "Linux" ]; then
          bazel clean --expunge
      fi
    - - |
        # Start the after_script section
        echo -e "\e[0Ksection_start:$(date +%s):after_script[collapsed=true]\r\e[0KClick here to see the after_script section. It does not affect the job success status"

        # Export all the environmental variables so that the GITLAB configured variables are available to after_script.sh
        export ROOT_PIPELINE_ID=${PARENT_PIPELINE_ID:-$CI_PIPELINE_ID}
        buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" after-script -- "${CI_PROJECT_DIR}"/gitlab-ci/src/after_script/after_script.sh

        rm -rf "${CI_PROJECT_DIR}/target"

        # Finish and collapse the after_script section
        echo -e "\e[0Ksection_end:$(date +%s):after_script\r\e[0K"
  artifacts:
    expire_in: 3 days
    paths:
      - bazel-build-log*.json*
      - bazel-bep.pb
    reports:
      junit:
        - bazel-testlogs-gitlab/**/test.xml
    when: always
  extends:
    - ".bazel-build-fuzzers"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE == "merge_train"
      variables:
        BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate --flaky_test_attempts=3"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~ /\bhotfix\b/i
      variables:
        BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
  script:
    - "./gitlab-ci/src/bazel-ci/main.sh"
  tags:
    - zh
    - dfinity-ic
  variables:
    BAZEL_CI_CONFIG: "--config=ci"
    BAZEL_COMMAND: build
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel --keep_going --config=fuzzing --build_tag_filters=libfuzzer"
    BAZEL_STARTUP_ARGS: "--output_base=/var/tmp/bazel-output/"
    BAZEL_TARGETS: "//rs/..."
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    SHELL_WRAPPER: "/usr/bin/time"
bazel-build-fuzzers-afl:
  after_script:
    - |
      set +e # Do not fail in the after_script, try to do as much as possible instead.
      echo -e "\033[0;31m"
      echo -e "************************************************************************"
      echo -e "*** NEED BAZEL HELP? See go/bazel-guide and #project-bazel           ***"
      echo -e "*** (NEW) To regenerate Cargo Bazel lockfiles run ./bin/bazel-pin.sh ***"
      echo -e "************************************************************************"
      echo -e "\033[0m"
    - cp -R "$(realpath bazel-testlogs)" bazel-testlogs-gitlab
    - gzip bazel-build-log*.json
    - |
      echo -e "\e[0Ksection_start:$(date +%s):bazel_exporter_logs[collapsed=true]\r\e[0KClick to see Bazel exporter logs"
      bazel run //bazel/exporter:exporter --build_event_binary_file= -- -f "$(pwd)/bazel-bep.pb"
      echo -e "\e[0Ksection_end:$(date +%s):bazel_exporter_logs\r\e[0K"
    - |
      if [ "$(uname)" == "Linux" ]; then
          bazel clean --expunge
      fi
    - - |
        # Start the after_script section
        echo -e "\e[0Ksection_start:$(date +%s):after_script[collapsed=true]\r\e[0KClick here to see the after_script section. It does not affect the job success status"

        # Export all the environmental variables so that the GITLAB configured variables are available to after_script.sh
        export ROOT_PIPELINE_ID=${PARENT_PIPELINE_ID:-$CI_PIPELINE_ID}
        buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" after-script -- "${CI_PROJECT_DIR}"/gitlab-ci/src/after_script/after_script.sh

        rm -rf "${CI_PROJECT_DIR}/target"

        # Finish and collapse the after_script section
        echo -e "\e[0Ksection_end:$(date +%s):after_script\r\e[0K"
  artifacts:
    expire_in: 3 days
    paths:
      - bazel-build-log*.json*
      - bazel-bep.pb
    reports:
      junit:
        - bazel-testlogs-gitlab/**/test.xml
    when: always
  extends:
    - ".bazel-build-fuzzers"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE == "merge_train"
      variables:
        BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate --flaky_test_attempts=3"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~ /\bhotfix\b/i
      variables:
        BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
  script:
    - "./gitlab-ci/src/bazel-ci/main.sh"
  tags:
    - zh
    - dfinity-ic
  variables:
    BAZEL_CI_CONFIG: "--config=ci"
    BAZEL_COMMAND: build
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel --keep_going --config=afl"
    BAZEL_STARTUP_ARGS: "--output_base=/var/tmp/bazel-output/"
    BAZEL_TARGETS: "//rs/..."
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    SHELL_WRAPPER: "/usr/bin/time"
bazel-build-fuzzers-archives:
  after_script:
    - |
      set +e # Do not fail in the after_script, try to do as much as possible instead.
      echo -e "\033[0;31m"
      echo -e "************************************************************************"
      echo -e "*** NEED BAZEL HELP? See go/bazel-guide and #project-bazel           ***"
      echo -e "*** (NEW) To regenerate Cargo Bazel lockfiles run ./bin/bazel-pin.sh ***"
      echo -e "************************************************************************"
      echo -e "\033[0m"
    - cp -R "$(realpath bazel-testlogs)" bazel-testlogs-gitlab
    - gzip bazel-build-log*.json
    - |
      echo -e "\e[0Ksection_start:$(date +%s):bazel_exporter_logs[collapsed=true]\r\e[0KClick to see Bazel exporter logs"
      bazel run //bazel/exporter:exporter --build_event_binary_file= -- -f "$(pwd)/bazel-bep.pb"
      echo -e "\e[0Ksection_end:$(date +%s):bazel_exporter_logs\r\e[0K"
    - |
      if [ "$(uname)" == "Linux" ]; then
          bazel clean --expunge
      fi
    - - |
        # Start the after_script section
        echo -e "\e[0Ksection_start:$(date +%s):after_script[collapsed=true]\r\e[0KClick here to see the after_script section. It does not affect the job success status"

        # Export all the environmental variables so that the GITLAB configured variables are available to after_script.sh
        export ROOT_PIPELINE_ID=${PARENT_PIPELINE_ID:-$CI_PIPELINE_ID}
        buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" after-script -- "${CI_PROJECT_DIR}"/gitlab-ci/src/after_script/after_script.sh

        rm -rf "${CI_PROJECT_DIR}/target"

        # Finish and collapse the after_script section
        echo -e "\e[0Ksection_end:$(date +%s):after_script\r\e[0K"
  artifacts:
    expire_in: 3 days
    paths:
      - bazel-build-log*.json*
      - bazel-bep.pb
    reports:
      junit:
        - bazel-testlogs-gitlab/**/test.xml
    when: always
  extends:
    - ".bazel-build-fuzzers"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs: []
  rules:
    - changes:
        - gitlab-ci/config/20--test--bazel-fuzzers.yml
        - bin/build-all-fuzzers.sh
        - bazel/fuzz_testing.bzl
      if: $CI_PIPELINE_SOURCE == "merge_request_event"
  script:
    - |
      set -euo pipefail
      cd "${CI_PROJECT_DIR}"/bin
      ./build-all-fuzzers.sh --zip
  tags:
    - zh
    - dfinity-ic
  variables:
    BAZEL_CI_CONFIG: "--config=ci"
    BAZEL_COMMAND: test
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel"
    BAZEL_STARTUP_ARGS: "--output_base=/var/tmp/bazel-output/"
    BAZEL_TARGETS: "//..."
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    SHELL_WRAPPER: "/usr/bin/time"
bazel-build-fuzzers-weekly:
  after_script:
    - |
      set +e # Do not fail in the after_script, try to do as much as possible instead.
      echo -e "\033[0;31m"
      echo -e "************************************************************************"
      echo -e "*** NEED BAZEL HELP? See go/bazel-guide and #project-bazel           ***"
      echo -e "*** (NEW) To regenerate Cargo Bazel lockfiles run ./bin/bazel-pin.sh ***"
      echo -e "************************************************************************"
      echo -e "\033[0m"
    - cp -R "$(realpath bazel-testlogs)" bazel-testlogs-gitlab
    - gzip bazel-build-log*.json
    - |
      echo -e "\e[0Ksection_start:$(date +%s):bazel_exporter_logs[collapsed=true]\r\e[0KClick to see Bazel exporter logs"
      bazel run //bazel/exporter:exporter --build_event_binary_file= -- -f "$(pwd)/bazel-bep.pb"
      echo -e "\e[0Ksection_end:$(date +%s):bazel_exporter_logs\r\e[0K"
    - |
      if [ "$(uname)" == "Linux" ]; then
          bazel clean --expunge
      fi
    - - |
        # Start the after_script section
        echo -e "\e[0Ksection_start:$(date +%s):after_script[collapsed=true]\r\e[0KClick here to see the after_script section. It does not affect the job success status"

        # Export all the environmental variables so that the GITLAB configured variables are available to after_script.sh
        export ROOT_PIPELINE_ID=${PARENT_PIPELINE_ID:-$CI_PIPELINE_ID}
        buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" after-script -- "${CI_PROJECT_DIR}"/gitlab-ci/src/after_script/after_script.sh

        rm -rf "${CI_PROJECT_DIR}/target"

        # Finish and collapse the after_script section
        echo -e "\e[0Ksection_end:$(date +%s):after_script\r\e[0K"
  artifacts:
    expire_in: 3 days
    paths:
      - bazel-build-log*.json*
      - bazel-bep.pb
    reports:
      junit:
        - bazel-testlogs-gitlab/**/test.xml
    when: always
  extends:
    - ".bazel-build-fuzzers"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "build-fuzzers-to-clusterfuzz"
  script:
    - |
      set -euo pipefail
      cd "${CI_PROJECT_DIR}"/bin
      gcloud auth activate-service-account --key-file "${FUZZING_GCP_SERVICE_KEY}"
      ./build-all-fuzzers.sh --zip
      cd fuzzer_build
      gsutil -m cp libfuzzer_asan_linux_*.zip gs://ic_fuzzer_builds
      gsutil -m cp afl_asan_linux_*.zip gs://ic_fuzzer_builds
  tags:
    - zh
    - dfinity-ic
  variables:
    BAZEL_CI_CONFIG: "--config=ci"
    BAZEL_COMMAND: test
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel"
    BAZEL_STARTUP_ARGS: "--output_base=/var/tmp/bazel-output/"
    BAZEL_TARGETS: "//..."
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    SHELL_WRAPPER: "/usr/bin/time"
bazel-build-macos:
  after_script:
    - |
      set +e # Do not fail in the after_script, try to do as much as possible instead.
      echo -e "\033[0;31m"
      echo -e "************************************************************************"
      echo -e "*** NEED BAZEL HELP? See go/bazel-guide and #project-bazel           ***"
      echo -e "*** (NEW) To regenerate Cargo Bazel lockfiles run ./bin/bazel-pin.sh ***"
      echo -e "************************************************************************"
      echo -e "\033[0m"
    - cp -R "$(realpath bazel-testlogs)" bazel-testlogs-gitlab
    - gzip bazel-build-log*.json
    - |
      echo -e "\e[0Ksection_start:$(date +%s):bazel_exporter_logs[collapsed=true]\r\e[0KClick to see Bazel exporter logs"
      bazel run //bazel/exporter:exporter --build_event_binary_file= -- -f "$(pwd)/bazel-bep.pb"
      echo -e "\e[0Ksection_end:$(date +%s):bazel_exporter_logs\r\e[0K"
    - |
      if [ "$(uname)" == "Linux" ]; then
          bazel clean --expunge
      fi
    - - |
        # Start the after_script section
        echo -e "\e[0Ksection_start:$(date +%s):after_script[collapsed=true]\r\e[0KClick here to see the after_script section. It does not affect the job success status"

        # Export all the environmental variables so that the GITLAB configured variables are available to after_script.sh
        export ROOT_PIPELINE_ID=${PARENT_PIPELINE_ID:-$CI_PIPELINE_ID}
        buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" after-script -- "${CI_PROJECT_DIR}"/gitlab-ci/src/after_script/after_script.sh

        rm -rf "${CI_PROJECT_DIR}/target"

        # Finish and collapse the after_script section
        echo -e "\e[0Ksection_end:$(date +%s):after_script\r\e[0K"
  artifacts:
    expire_in: 3 days
    paths:
      - bazel-build-log*.json*
      - bazel-bep.pb
    reports:
      junit:
        - bazel-testlogs-gitlab/**/test.xml
    when: always
  extends:
    - ".build-env-base"
    - ".bazel-test-all"
    - ".bazel-rules-pipeline-no-merge-train"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE != "merge_train" && $CI_MERGE_REQUEST_TITLE =~ /\bhotfix\b/i
      variables:
        BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE != "merge_train"
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
  script:
    - "./gitlab-ci/src/bazel-ci/main.sh"
  tags:
    - macos
  timeout: 90 minutes
  variables:
    BAZEL_CI_CONFIG: "--config=ci"
    BAZEL_COMMAND: build
    BAZEL_EXTRA_ARGS: "--config macos_ci"
    BAZEL_STARTUP_ARGS: "--output_base /var/tmp/bazel-output//${CI_CONCURRENT_ID}"
    BAZEL_TARGETS: "//rs/... //publish/binaries/..."
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    SHELL_WRAPPER: "/usr/bin/time"
bazel-config-check-all-rebuild:
  after_script:
    - |
      set +e # Do not fail in the after_script, try to do as much as possible instead.
      echo -e "\033[0;31m"
      echo -e "************************************************************************"
      echo -e "*** NEED BAZEL HELP? See go/bazel-guide and #project-bazel           ***"
      echo -e "*** (NEW) To regenerate Cargo Bazel lockfiles run ./bin/bazel-pin.sh ***"
      echo -e "************************************************************************"
      echo -e "\033[0m"
    - cp -R "$(realpath bazel-testlogs)" bazel-testlogs-gitlab
    - gzip bazel-build-log*.json
    - |
      echo -e "\e[0Ksection_start:$(date +%s):bazel_exporter_logs[collapsed=true]\r\e[0KClick to see Bazel exporter logs"
      bazel run //bazel/exporter:exporter --build_event_binary_file= -- -f "$(pwd)/bazel-bep.pb"
      echo -e "\e[0Ksection_end:$(date +%s):bazel_exporter_logs\r\e[0K"
    - |
      if [ "$(uname)" == "Linux" ]; then
          bazel clean --expunge
      fi
    - - |
        # Start the after_script section
        echo -e "\e[0Ksection_start:$(date +%s):after_script[collapsed=true]\r\e[0KClick here to see the after_script section. It does not affect the job success status"

        # Export all the environmental variables so that the GITLAB configured variables are available to after_script.sh
        export ROOT_PIPELINE_ID=${PARENT_PIPELINE_ID:-$CI_PIPELINE_ID}
        buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" after-script -- "${CI_PROJECT_DIR}"/gitlab-ci/src/after_script/after_script.sh

        rm -rf "${CI_PROJECT_DIR}/target"

        # Finish and collapse the after_script section
        echo -e "\e[0Ksection_end:$(date +%s):after_script\r\e[0K"
  artifacts:
    expire_in: 3 days
    paths:
      - bazel-build-log*.json*
      - bazel-bep.pb
    reports:
      junit:
        - bazel-testlogs-gitlab/**/test.xml
    when: always
  extends:
    - ".bazel-test-all"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE == "merge_train"
      variables:
        BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate --flaky_test_attempts=3"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~ /\bhotfix\b/i
      variables:
        BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
  script:
    - "./gitlab-ci/src/bazel-ci/main.sh"
  tags:
    - dfinity-ic
    - zh
  variables:
    BAZEL_CI_CONFIG: "--config=ci"
    BAZEL_COMMAND: build
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel --keep_going --config=check"
    BAZEL_STARTUP_ARGS: "--output_base=/var/tmp/bazel-output/"
    BAZEL_TARGETS: "//rs/..."
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    SHELL_WRAPPER: "/usr/bin/time"
bazel-system-test-hotfix:
  after_script:
    - |
      set +e # Do not fail in the after_script, try to do as much as possible instead.
      echo -e "\033[0;31m"
      echo -e "************************************************************************"
      echo -e "*** NEED BAZEL HELP? See go/bazel-guide and #project-bazel           ***"
      echo -e "*** (NEW) To regenerate Cargo Bazel lockfiles run ./bin/bazel-pin.sh ***"
      echo -e "************************************************************************"
      echo -e "\033[0m"
    - cp -R "$(realpath bazel-testlogs)" bazel-testlogs-gitlab
    - gzip bazel-build-log*.json
    - |
      echo -e "\e[0Ksection_start:$(date +%s):bazel_exporter_logs[collapsed=true]\r\e[0KClick to see Bazel exporter logs"
      bazel run //bazel/exporter:exporter --build_event_binary_file= -- -f "$(pwd)/bazel-bep.pb"
      echo -e "\e[0Ksection_end:$(date +%s):bazel_exporter_logs\r\e[0K"
    - |
      if [ "$(uname)" == "Linux" ]; then
          bazel clean --expunge
      fi
    - - |
        # Start the after_script section
        echo -e "\e[0Ksection_start:$(date +%s):after_script[collapsed=true]\r\e[0KClick here to see the after_script section. It does not affect the job success status"

        # Export all the environmental variables so that the GITLAB configured variables are available to after_script.sh
        export ROOT_PIPELINE_ID=${PARENT_PIPELINE_ID:-$CI_PIPELINE_ID}
        buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" after-script -- "${CI_PROJECT_DIR}"/gitlab-ci/src/after_script/after_script.sh

        rm -rf "${CI_PROJECT_DIR}/target"

        # Finish and collapse the after_script section
        echo -e "\e[0Ksection_end:$(date +%s):after_script\r\e[0K"
  artifacts:
    expire_in: 3 days
    paths:
      - bazel-build-log*.json*
      - bazel-bep.pb
    reports:
      junit:
        - bazel-testlogs-gitlab/**/test.xml
    when: always
  extends:
    - ".bazel-test-all"
    - ".rules-prod-hotfix-pipeline"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs: []
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^rc--/"
      when: always
    - allow_failure: true
      if: $CI_PIPELINE_SOURCE == "web" || $CI_PIPELINE_SOURCE == "trigger"
      when: manual
    - allow_failure: true
      if: "$CI_MERGE_REQUEST_TITLE =~ /(\\[rc\\]|hotfix)/i"
      when: manual
    - allow_failure: true
      if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: manual
  script:
    - "./gitlab-ci/src/bazel-ci/main.sh"
  tags:
    - dfinity-ic
    - zh
  variables:
    BAZEL_CI_CONFIG: "--config=ci"
    BAZEL_COMMAND: test
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel --test_tag_filters=system_test_hotfix"
    BAZEL_STARTUP_ARGS: "--output_base=/var/tmp/bazel-output/"
    BAZEL_TARGETS: "//..."
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    SHELL_WRAPPER: "/usr/bin/time"
bazel-system-test-hourly:
  after_script:
    - |
      set +e # Do not fail in the after_script, try to do as much as possible instead.
      echo -e "\033[0;31m"
      echo -e "************************************************************************"
      echo -e "*** NEED BAZEL HELP? See go/bazel-guide and #project-bazel           ***"
      echo -e "*** (NEW) To regenerate Cargo Bazel lockfiles run ./bin/bazel-pin.sh ***"
      echo -e "************************************************************************"
      echo -e "\033[0m"
    - cp -R "$(realpath bazel-testlogs)" bazel-testlogs-gitlab
    - gzip bazel-build-log*.json
    - |
      echo -e "\e[0Ksection_start:$(date +%s):bazel_exporter_logs[collapsed=true]\r\e[0KClick to see Bazel exporter logs"
      bazel run //bazel/exporter:exporter --build_event_binary_file= -- -f "$(pwd)/bazel-bep.pb"
      echo -e "\e[0Ksection_end:$(date +%s):bazel_exporter_logs\r\e[0K"
    - |
      if [ "$(uname)" == "Linux" ]; then
          bazel clean --expunge
      fi
    - - |
        # Start the after_script section
        echo -e "\e[0Ksection_start:$(date +%s):after_script[collapsed=true]\r\e[0KClick here to see the after_script section. It does not affect the job success status"

        # Export all the environmental variables so that the GITLAB configured variables are available to after_script.sh
        export ROOT_PIPELINE_ID=${PARENT_PIPELINE_ID:-$CI_PIPELINE_ID}
        buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" after-script -- "${CI_PROJECT_DIR}"/gitlab-ci/src/after_script/after_script.sh

        rm -rf "${CI_PROJECT_DIR}/target"

        # Finish and collapse the after_script section
        echo -e "\e[0Ksection_end:$(date +%s):after_script\r\e[0K"
  artifacts:
    expire_in: 3 days
    paths:
      - bazel-build-log*.json*
      - bazel-bep.pb
    reports:
      junit:
        - bazel-testlogs-gitlab/**/test.xml
    when: always
  extends:
    - ".bazel-test-all"
    - ".bazel-rules-post-master"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs: []
  rules:
    - allow_failure: true
      if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE != "merge_train"
      when: manual
    - if: $SCHEDULE_NAME == "run-all-master"
  script:
    - "./gitlab-ci/src/bazel-ci/main.sh"
  tags:
    - dfinity-ic
    - zh
  timeout: 120 minutes
  variables:
    BAZEL_CI_CONFIG: "--config=ci"
    BAZEL_COMMAND: test
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel --test_tag_filters=system_test_hourly"
    BAZEL_STARTUP_ARGS: "--output_base=/var/tmp/bazel-output/"
    BAZEL_TARGETS: "//..."
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    SHELL_WRAPPER: "/usr/bin/time"
bazel-system-test-nightly:
  after_script:
    - |
      set +e # Do not fail in the after_script, try to do as much as possible instead.
      echo -e "\033[0;31m"
      echo -e "************************************************************************"
      echo -e "*** NEED BAZEL HELP? See go/bazel-guide and #project-bazel           ***"
      echo -e "*** (NEW) To regenerate Cargo Bazel lockfiles run ./bin/bazel-pin.sh ***"
      echo -e "************************************************************************"
      echo -e "\033[0m"
    - cp -R "$(realpath bazel-testlogs)" bazel-testlogs-gitlab
    - gzip bazel-build-log*.json
    - |
      echo -e "\e[0Ksection_start:$(date +%s):bazel_exporter_logs[collapsed=true]\r\e[0KClick to see Bazel exporter logs"
      bazel run //bazel/exporter:exporter --build_event_binary_file= -- -f "$(pwd)/bazel-bep.pb"
      echo -e "\e[0Ksection_end:$(date +%s):bazel_exporter_logs\r\e[0K"
    - |
      if [ "$(uname)" == "Linux" ]; then
          bazel clean --expunge
      fi
    - - |
        # Start the after_script section
        echo -e "\e[0Ksection_start:$(date +%s):after_script[collapsed=true]\r\e[0KClick here to see the after_script section. It does not affect the job success status"

        # Export all the environmental variables so that the GITLAB configured variables are available to after_script.sh
        export ROOT_PIPELINE_ID=${PARENT_PIPELINE_ID:-$CI_PIPELINE_ID}
        buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" after-script -- "${CI_PROJECT_DIR}"/gitlab-ci/src/after_script/after_script.sh

        rm -rf "${CI_PROJECT_DIR}/target"

        # Finish and collapse the after_script section
        echo -e "\e[0Ksection_end:$(date +%s):after_script\r\e[0K"
  artifacts:
    expire_in: 3 days
    paths:
      - bazel-build-log*.json*
      - bazel-bep.pb
    reports:
      junit:
        - bazel-testlogs-gitlab/**/test.xml
    when: always
  extends:
    - ".bazel-test-all"
    - ".rules-rollout-pipeline-auto"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs: []
  rules:
    - allow_failure: true
      if: $CI_COMMIT_BRANCH =~ /^rc--/ && $CI_COMMIT_MESSAGE =~ /hotfix/i && $CI_PIPELINE_SOURCE != "trigger"
      when: manual
    - if: $CI_COMMIT_BRANCH =~ /^rc--/ && $CI_PIPELINE_SOURCE != "trigger"
      when: always
    - allow_failure: true
      if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: manual
    - allow_failure: true
      if: $CI_PIPELINE_SOURCE == "trigger"
      when: manual
  script:
    - "./gitlab-ci/src/bazel-ci/main.sh"
  tags:
    - dfinity-ic
    - zh
  timeout: 7h 30m
  variables:
    BAZEL_CI_CONFIG: "--config=ci"
    BAZEL_COMMAND: test
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel --test_tag_filters=system_test_nightly"
    BAZEL_STARTUP_ARGS: "--output_base=/var/tmp/bazel-output/"
    BAZEL_TARGETS: "//..."
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    SHELL_WRAPPER: "/usr/bin/time"
bazel-system-test-staging:
  after_script:
    - |
      set +e # Do not fail in the after_script, try to do as much as possible instead.
      echo -e "\033[0;31m"
      echo -e "************************************************************************"
      echo -e "*** NEED BAZEL HELP? See go/bazel-guide and #project-bazel           ***"
      echo -e "*** (NEW) To regenerate Cargo Bazel lockfiles run ./bin/bazel-pin.sh ***"
      echo -e "************************************************************************"
      echo -e "\033[0m"
    - cp -R "$(realpath bazel-testlogs)" bazel-testlogs-gitlab
    - gzip bazel-build-log*.json
    - |
      echo -e "\e[0Ksection_start:$(date +%s):bazel_exporter_logs[collapsed=true]\r\e[0KClick to see Bazel exporter logs"
      bazel run //bazel/exporter:exporter --build_event_binary_file= -- -f "$(pwd)/bazel-bep.pb"
      echo -e "\e[0Ksection_end:$(date +%s):bazel_exporter_logs\r\e[0K"
    - |
      if [ "$(uname)" == "Linux" ]; then
          bazel clean --expunge
      fi
    - - |
        # Start the after_script section
        echo -e "\e[0Ksection_start:$(date +%s):after_script[collapsed=true]\r\e[0KClick here to see the after_script section. It does not affect the job success status"

        # Export all the environmental variables so that the GITLAB configured variables are available to after_script.sh
        export ROOT_PIPELINE_ID=${PARENT_PIPELINE_ID:-$CI_PIPELINE_ID}
        buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" after-script -- "${CI_PROJECT_DIR}"/gitlab-ci/src/after_script/after_script.sh

        rm -rf "${CI_PROJECT_DIR}/target"

        # Finish and collapse the after_script section
        echo -e "\e[0Ksection_end:$(date +%s):after_script\r\e[0K"
  allow_failure: true
  artifacts:
    expire_in: 3 days
    paths:
      - bazel-build-log*.json*
      - bazel-bep.pb
    reports:
      junit:
        - bazel-testlogs-gitlab/**/test.xml
    when: always
  extends:
    - ".bazel-test-all"
    - ".rules-rollout-pipeline-auto"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs: []
  rules:
    - allow_failure: true
      if: $CI_COMMIT_BRANCH =~ /^rc--/ && $CI_COMMIT_MESSAGE =~ /hotfix/i && $CI_PIPELINE_SOURCE != "trigger"
      when: manual
    - if: $CI_COMMIT_BRANCH =~ /^rc--/ && $CI_PIPELINE_SOURCE != "trigger"
      when: always
    - allow_failure: true
      if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: manual
    - allow_failure: true
      if: $CI_PIPELINE_SOURCE == "trigger"
      when: manual
  script:
    - "./gitlab-ci/src/bazel-ci/main.sh"
  tags:
    - dfinity-ic
    - zh
  variables:
    BAZEL_CI_CONFIG: "--config=ci"
    BAZEL_COMMAND: test
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel --test_tag_filters=system_test_staging"
    BAZEL_STARTUP_ARGS: "--output_base=/var/tmp/bazel-output/"
    BAZEL_TARGETS: "//..."
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    SHELL_WRAPPER: "/usr/bin/time"
bazel-test-all:
  after_script:
    - |
      set +e # Do not fail in the after_script, try to do as much as possible instead.
      echo -e "\033[0;31m"
      echo -e "************************************************************************"
      echo -e "*** NEED BAZEL HELP? See go/bazel-guide and #project-bazel           ***"
      echo -e "*** (NEW) To regenerate Cargo Bazel lockfiles run ./bin/bazel-pin.sh ***"
      echo -e "************************************************************************"
      echo -e "\033[0m"
    - cp -R "$(realpath bazel-testlogs)" bazel-testlogs-gitlab
    - gzip bazel-build-log*.json
    - |
      echo -e "\e[0Ksection_start:$(date +%s):bazel_exporter_logs[collapsed=true]\r\e[0KClick to see Bazel exporter logs"
      bazel run //bazel/exporter:exporter --build_event_binary_file= -- -f "$(pwd)/bazel-bep.pb"
      echo -e "\e[0Ksection_end:$(date +%s):bazel_exporter_logs\r\e[0K"
    - |
      if [ "$(uname)" == "Linux" ]; then
          bazel clean --expunge
      fi
    - - |
        # Start the after_script section
        echo -e "\e[0Ksection_start:$(date +%s):after_script[collapsed=true]\r\e[0KClick here to see the after_script section. It does not affect the job success status"

        # Export all the environmental variables so that the GITLAB configured variables are available to after_script.sh
        export ROOT_PIPELINE_ID=${PARENT_PIPELINE_ID:-$CI_PIPELINE_ID}
        buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" after-script -- "${CI_PROJECT_DIR}"/gitlab-ci/src/after_script/after_script.sh

        rm -rf "${CI_PROJECT_DIR}/target"

        # Finish and collapse the after_script section
        echo -e "\e[0Ksection_end:$(date +%s):after_script\r\e[0K"
  artifacts:
    expire_in: 3 days
    paths:
      - bazel-build-log*.json*
      - bazel-bep.pb
    reports:
      junit:
        - bazel-testlogs-gitlab/**/test.xml
    when: always
  extends:
    - ".bazel-test-all"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE == "merge_train"
      variables:
        BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate --flaky_test_attempts=3"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~ /\bhotfix\b/i
      variables:
        BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
  script:
    - "./gitlab-ci/src/bazel-ci/main.sh"
  tags:
    - dfinity-ic
    - zh
  timeout: 80 minutes
  variables:
    BAZEL_CI_CONFIG: "--config=ci"
    BAZEL_COMMAND: test
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel --keep_going $BAZEL_EXTRA_ARGS_RULES"
    BAZEL_STARTUP_ARGS: "--output_base=/var/tmp/bazel-output/"
    BAZEL_TARGETS: "//..."
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    SHELL_WRAPPER: "/usr/bin/time"
bazel-test-all-allow-to-fail:
  after_script:
    - |
      set +e # Do not fail in the after_script, try to do as much as possible instead.
      echo -e "\033[0;31m"
      echo -e "************************************************************************"
      echo -e "*** NEED BAZEL HELP? See go/bazel-guide and #project-bazel           ***"
      echo -e "*** (NEW) To regenerate Cargo Bazel lockfiles run ./bin/bazel-pin.sh ***"
      echo -e "************************************************************************"
      echo -e "\033[0m"
    - cp -R "$(realpath bazel-testlogs)" bazel-testlogs-gitlab
    - gzip bazel-build-log*.json
    - |
      echo -e "\e[0Ksection_start:$(date +%s):bazel_exporter_logs[collapsed=true]\r\e[0KClick to see Bazel exporter logs"
      bazel run //bazel/exporter:exporter --build_event_binary_file= -- -f "$(pwd)/bazel-bep.pb"
      echo -e "\e[0Ksection_end:$(date +%s):bazel_exporter_logs\r\e[0K"
    - |
      if [ "$(uname)" == "Linux" ]; then
          bazel clean --expunge
      fi
    - - |
        # Start the after_script section
        echo -e "\e[0Ksection_start:$(date +%s):after_script[collapsed=true]\r\e[0KClick here to see the after_script section. It does not affect the job success status"

        # Export all the environmental variables so that the GITLAB configured variables are available to after_script.sh
        export ROOT_PIPELINE_ID=${PARENT_PIPELINE_ID:-$CI_PIPELINE_ID}
        buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" after-script -- "${CI_PROJECT_DIR}"/gitlab-ci/src/after_script/after_script.sh

        rm -rf "${CI_PROJECT_DIR}/target"

        # Finish and collapse the after_script section
        echo -e "\e[0Ksection_end:$(date +%s):after_script\r\e[0K"
  artifacts:
    expire_in: 3 days
    paths:
      - bazel-build-log*.json*
      - bazel-bep.pb
    reports:
      junit:
        - bazel-testlogs-gitlab/**/test.xml
    when: always
  extends:
    - ".bazel-test-all"
    - ".bazel-rules-pipeline-no-merge-train-allow-to-fail"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs: []
  rules:
    - allow_failure: true
      if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE != "merge_train"
      when: manual
    - allow_failure: true
      if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
    - allow_failure: true
      if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
  script:
    - "./gitlab-ci/src/bazel-ci/main.sh"
  tags:
    - dfinity-ic
    - zh
  variables:
    BAZEL_CI_CONFIG: "--config=ci"
    BAZEL_COMMAND: test
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel --keep_going --test_tag_filters=allow_to_fail"
    BAZEL_STARTUP_ARGS: "--output_base=/var/tmp/bazel-output/"
    BAZEL_TARGETS: "//..."
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    SHELL_WRAPPER: "/usr/bin/time"
bazel-test-all-rebuild:
  after_script:
    - |
      set +e # Do not fail in the after_script, try to do as much as possible instead.
      echo -e "\033[0;31m"
      echo -e "************************************************************************"
      echo -e "*** NEED BAZEL HELP? See go/bazel-guide and #project-bazel           ***"
      echo -e "*** (NEW) To regenerate Cargo Bazel lockfiles run ./bin/bazel-pin.sh ***"
      echo -e "************************************************************************"
      echo -e "\033[0m"
    - cp -R "$(realpath bazel-testlogs)" bazel-testlogs-gitlab
    - gzip bazel-build-log*.json
    - |
      echo -e "\e[0Ksection_start:$(date +%s):bazel_exporter_logs[collapsed=true]\r\e[0KClick to see Bazel exporter logs"
      bazel run //bazel/exporter:exporter --build_event_binary_file= -- -f "$(pwd)/bazel-bep.pb"
      echo -e "\e[0Ksection_end:$(date +%s):bazel_exporter_logs\r\e[0K"
    - |
      if [ "$(uname)" == "Linux" ]; then
          bazel clean --expunge
      fi
    - - |
        # Start the after_script section
        echo -e "\e[0Ksection_start:$(date +%s):after_script[collapsed=true]\r\e[0KClick here to see the after_script section. It does not affect the job success status"

        # Export all the environmental variables so that the GITLAB configured variables are available to after_script.sh
        export ROOT_PIPELINE_ID=${PARENT_PIPELINE_ID:-$CI_PIPELINE_ID}
        buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" after-script -- "${CI_PROJECT_DIR}"/gitlab-ci/src/after_script/after_script.sh

        rm -rf "${CI_PROJECT_DIR}/target"

        # Finish and collapse the after_script section
        echo -e "\e[0Ksection_end:$(date +%s):after_script\r\e[0K"
  artifacts:
    expire_in: 3 days
    paths:
      - bazel-build-log*.json*
      - bazel-bep.pb
    reports:
      junit:
        - bazel-testlogs-gitlab/**/test.xml
    when: always
  extends:
    - ".bazel-test-all"
    - ".bazel-rules-post-master"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs: []
  rules:
    - allow_failure: true
      if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE != "merge_train"
      when: manual
    - if: $SCHEDULE_NAME == "run-all-master"
  script:
    - "./gitlab-ci/src/bazel-ci/main.sh"
  tags:
    - dfinity-ic
    - zh
  timeout: 2h
  variables:
    BAZEL_CI_CONFIG: "--config=ci"
    BAZEL_COMMAND: build
    BAZEL_EXTRA_ARGS: "--repository_cache= --disk_cache= --noremote_accept_cached --remote_instance_name=${CI_COMMIT_SHA} --@rules_rust//rust/settings:pipelined_compilation=True"
    BAZEL_STARTUP_ARGS: "--output_base=/var/tmp/bazel-output/"
    BAZEL_TARGETS: "//..."
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    SHELL_WRAPPER: "/usr/bin/time"
before_script:
  - |
    # Execute the before_script section
    echo -e "\e[0Ksection_end:$(date +%s):before_script\r\e[0K"  # first close before_script section, if open

    # Start the (collapsed) before_script section
    set -eExuo pipefail
    echo -e "\e[0Ksection_start:$(date +%s):before_script[collapsed=true]\r\e[0KClick here to see the before_script section"

    date +%s > "/tmp/job_start_date_${CI_JOB_ID:-}"
    # date -Iseconds is not supported by BSD date (macOS)
    date +"%Y-%m-%dT%H:%M:%S%z" > "/tmp/job_start_iso_date_${CI_JOB_ID:-}"
    date
    command -v ssh-agent > /dev/null
    test -z "${SSH_AUTH_SOCK:-}" && { eval "$(ssh-agent -s)"; ssh-add - <<< "${SSH_PRIVATE_KEY}"; }
    mkdir -p ~/.ssh
    chmod 0700 ~/.ssh

    echo -e "Host *\nUser gitlab-runner\n" > ~/.ssh/config
    date

    export ROOT_PIPELINE_ID=${PARENT_PIPELINE_ID:-$CI_PIPELINE_ID}

    if [ "${CI_DISPOSABLE_ENVIRONMENT:-false}" != "true" ]; then
      # MacOS + shell builds
      export CARGO_TARGET_DIR="$CI_PROJECT_DIR/target"
    fi

    # docker login for RO to overcome anonymous pull limit of 100 pulls / 6h
    # enterprise logged in account has 5000 pulls / 24h
    if [ "$(uname)" == "Linux" ]; then
      docker login -u "$DOCKER_HUB_USER" -p "$DOCKER_HUB_PASSWORD_RO"
      docker-bin login -u "$DOCKER_HUB_USER" -p "$DOCKER_HUB_PASSWORD_RO"

      # set ownership to ic-build container's user,
      # but ignore errors that happen due to git gc:
      #   `chown: changing ownership of '.git/shallow.lock': No such file or directory`
      sudo chown "$(id -u):$(id -g)" -fR "${CI_PROJECT_DIR}" || true
    fi
  - echo -e "\e[0Ksection_end:$(date +%s):before_script\r\e[0K"
benchmark-response-payload:
  artifacts:
    expire_in: 3 days
    paths:
      - scalability/
    when: always
  dependencies: []
  extends: ".benchmark-test"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  resource_group: "$TESTNET"
  rules:
    - allow_failure: true
      if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~ /\[benchmark\]/
      when: manual
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "BENCHMARK_SUITE"
      when: always
  script:
    - |
      set -eExou pipefail
      git fetch
      GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")

      $SHELL_WRAPPER timeout 1h ./testnet/tools/icos_deploy.sh $TESTNET --git-revision "$GIT_REVISION" --no-boundary-nodes
      cd ./scalability

      $SHELL_WRAPPER timeout 90m python3 experiments/run_large_payload_experiment.py --testnet "$TESTNET" --wg_testnet "$TESTNET" --wg_subnet 2

      TIMESTAMP=$(find results/"$GIT_REVISION" -maxdepth 1 -mindepth 1 -type d -printf "%f\n" | sort -nr | head -1)
      $SHELL_WRAPPER python3 common/generate_report.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP"

      find . -name  'workload-generator*stderr.txt' -print0 | xargs -0 pigz
      cd -

      $SHELL_WRAPPER rclone --config="${CI_PROJECT_DIR}/.rclone.conf"  copyto "scalability/results/$GIT_REVISION" "performance-testing:performance-testing-results/$GIT_REVISION"
  tags:
    - dfinity-ic
  timeout: 3 hours
  variables:
    CURRENT_BRANCH: "$CI_COMMIT_REF_NAME"
    DISKIMG_BRANCH: "${CI_COMMIT_SHA}"
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic -C link-arg=-s"
    SHELL_WRAPPER: "/usr/bin/time"
    TESTNET: cdslo
benchmark-xnet:
  artifacts:
    expire_in: 3 days
    paths:
      - scalability/
    when: always
  dependencies: []
  extends: ".benchmark-test"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  resource_group: "$TESTNET"
  rules:
    - allow_failure: true
      if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~ /\[benchmark\]/
      when: manual
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "BENCHMARK_SUITE"
      when: always
  script:
    - |
      set -eExou pipefail
      git fetch
      GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")

      $SHELL_WRAPPER timeout 1h ./testnet/tools/icos_deploy.sh $TESTNET --git-revision "$GIT_REVISION" --no-boundary-nodes
      cd ./scalability

      $SHELL_WRAPPER python3 experiments/run_xnet_experiment.py --testnet $TESTNET --hosts_ini_filename=hosts_single_node_subnets.ini

      TIMESTAMP=$(find results/"$GIT_REVISION" -maxdepth 1 -mindepth 1 -type d -printf "%f\n" | sort -nr | head -1)
      $SHELL_WRAPPER python3 common/generate_report.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP"

      find . -name  'workload-generator*stderr.txt' -print0 | xargs -0 pigz
      cd -

      $SHELL_WRAPPER rclone --config="${CI_PROJECT_DIR}/.rclone.conf"  copyto "scalability/results/$GIT_REVISION" "performance-testing:performance-testing-results/$GIT_REVISION"
  tags:
    - dfinity-ic
  timeout: 6 hours
  variables:
    CURRENT_BRANCH: "$CI_COMMIT_REF_NAME"
    DISKIMG_BRANCH: "${CI_COMMIT_SHA}"
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic -C link-arg=-s"
    SHELL_WRAPPER: "/usr/bin/time"
    TESTNET: cdslo
benchmarks:
  after_script:
    - |
      set +e # Do not fail in the after_script, try to do as much as possible instead.
      echo -e "\033[0;31m"
      echo -e "************************************************************************"
      echo -e "*** NEED BAZEL HELP? See go/bazel-guide and #project-bazel           ***"
      echo -e "*** (NEW) To regenerate Cargo Bazel lockfiles run ./bin/bazel-pin.sh ***"
      echo -e "************************************************************************"
      echo -e "\033[0m"
    - cp -R "$(realpath bazel-testlogs)" bazel-testlogs-gitlab
    - gzip bazel-build-log*.json
    - |
      echo -e "\e[0Ksection_start:$(date +%s):bazel_exporter_logs[collapsed=true]\r\e[0KClick to see Bazel exporter logs"
      bazel run //bazel/exporter:exporter --build_event_binary_file= -- -f "$(pwd)/bazel-bep.pb"
      echo -e "\e[0Ksection_end:$(date +%s):bazel_exporter_logs\r\e[0K"
    - |
      if [ "$(uname)" == "Linux" ]; then
          bazel clean --expunge
      fi
    - - |
        # Start the after_script section
        echo -e "\e[0Ksection_start:$(date +%s):after_script[collapsed=true]\r\e[0KClick here to see the after_script section. It does not affect the job success status"

        # Export all the environmental variables so that the GITLAB configured variables are available to after_script.sh
        export ROOT_PIPELINE_ID=${PARENT_PIPELINE_ID:-$CI_PIPELINE_ID}
        buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" after-script -- "${CI_PROJECT_DIR}"/gitlab-ci/src/after_script/after_script.sh

        rm -rf "${CI_PROJECT_DIR}/target"

        # Finish and collapse the after_script section
        echo -e "\e[0Ksection_end:$(date +%s):after_script\r\e[0K"
  artifacts:
    expire_in: 3 days
    paths:
      - report
    reports:
      junit:
        - bazel-testlogs-gitlab/**/test.xml
    when: always
  extends:
    - ".bazel-test-all"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs: []
  parallel:
    matrix:
      - TARGETS: "//rs/crypto/..."
      - TARGETS: "//rs/state_manager/..."
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "rust-benchmarks"
  script:
    - |
      set -eEuo pipefail

      TARGET_LIST=$(bazel query "attr(tags, 'rust_bench', ${TARGETS:-'//rs/...'})")
      for TARGET in $TARGET_LIST; do
          BAZEL_TARGETS="$TARGET"
          time ./gitlab-ci/src/bazel-ci/main.sh
      done
      find -L ./bazel-out -name 'benchmark.json'

      set -x
      while IFS= read -r bench_dir; do
        echo '{}' | jq -cMr \
          --slurpfile benchmark "$bench_dir/benchmark.json" \
          --slurpfile estimates "$bench_dir/estimates.json" \
          --arg system x86_64-linux \
          --arg timestamp "$(date --utc --iso-8601=seconds)" \
          --arg rev "$CI_COMMIT_SHA" \
          '.benchmark = $benchmark[] |
          .estimates = $estimates[] |
          .package = "replica-benchmarks" |
          .system = $system |
          .timestamp = $timestamp |
          .rev = $rev |
          .revCount = 1' \
          > report.json
        curl -sS -o /dev/null -H 'Content-Type: application/json' --data @report.json \
          "https://elasticsearch.testnet.dfinity.network/ci-performance-test/properties?pretty"
      done < <(find -L ./bazel-out -type d -path '*/new')
  tags:
    - rust-benchmarks
  timeout: 12h
  variables:
    BAZEL_CI_CONFIG: "--config=ci"
    BAZEL_COMMAND: run
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel"
    BAZEL_STARTUP_ARGS: "--output_base=/var/tmp/bazel-output/"
    BAZEL_TARGETS: "//..."
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    RUST_BACKTRACE: full
    SHELL_WRAPPER: "/usr/bin/time"
boundary-node-service-worker:
  artifacts:
    expire_in: 3 days
    paths:
      - typescript/service-worker/artifacts
    reports:
      junit:
        - typescript/service-worker/junit.xml
    when: always
  extends:
    - ".build-k8s"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE != "merge_train"
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_TAG =~ /^service-worker_v([0-9\.]+)$/
    - if: $CI_PARENT_PIPELINE_SOURCE == "trigger"
  script:
    - |
      set -eExuo pipefail
      # shellcheck disable=SC1090
      source "$NVM_DIR/nvm.sh"
      nvm use 18
      node --version
      npm --version

      (
        cd typescript/service-worker
        npm ci

        # perform linting
        npm run lint
        npm run format:check

        # run unit tests
        npm test

        # run e2e tests
        ./e2e/e2e --add-dependencies --start --run-tests --stop

        # build service worker
        npm run build
        npm run build-dev

        # prepase release artifact
        npm pack
        mkdir artifacts
        mv dfinity-service-worker-*.tgz artifacts
        cd artifacts
        sha256sum dfinity-service-worker-*.tgz > SHA256SUMS
      )

      ROOT_PIPELINE_ID=${PARENT_PIPELINE_ID:-$CI_PIPELINE_ID}
      GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/find-build-id.sh)
      buildevents cmd "${ROOT_PIPELINE_ID}" "${CI_JOB_ID}" rclone -- \
        gitlab-ci/src/artifacts/rclone_upload.py --version="${GIT_REVISION}" "typescript/service-worker/artifacts" service-worker
  tags:
    - dfinity-ic
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
build-base-images-ref-update:
  artifacts:
    expire_in: 3 days
    paths:
      - junit_data/*
      - coredumps/*.txt
      - coredumps/*.gz
    when: always
  extends:
    - ".ubuntu-k8s"
    - ".rules-build-base-images"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs:
    - build-guestos-base
    - build-guestos-base-dev
    - build-guestos-base-dev-sev
    - build-boundaryos-base
    - build-boundaryos-base-snp
    - build-boundaryos-api-guestos-base
    - build-boundaryos-api-guestos-base-snp
    - build-hostos-base
    - build-hostos-base-dev
    - build-hostos-base-dev-sev
    - build-setupos-base
    - build-setupos-base-dev
    - build-setupos-base-dev-sev
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "build-push-base-images"
    - allow_failure: true
      if: $CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
      when: manual
    - changes:
        - gitlab-ci/config/base-images-build.yml
        - ic-os/boundary-guestos/rootfs/Dockerfile.base
        - ic-os/boundary-api-guestos/rootfs/Dockerfile.base
        - ic-os/guestos/rootfs/Dockerfile.base
        - ic-os/guestos/rootfs/packages.common
        - ic-os/guestos/rootfs/packages.dev
        - ic-os/hostos/rootfs/Dockerfile.base
        - ic-os/hostos/rootfs/packages.common
        - ic-os/hostos/rootfs/packages.dev
        - ic-os/setupos/rootfs/Dockerfile.base
        - ic-os/setupos/rootfs/packages.common
        - ic-os/setupos/rootfs/packages.dev
      if: $CI_PARENT_PIPELINE_SOURCE == "merge_request_event"
  script:
    - |
      set -euo pipefail
      if ! ls -1 digestfile-*; then
        echo "No digestfiles, nothing to do!"
        exit 0
      fi

      # update image ref in ref files
      for FILE in digestfile-*; do
          IMAGE="$(head -1 "$FILE")"
          REF_FILE="$(tail -1 "$FILE")"
          echo "$IMAGE" > "$REF_FILE"
      done
      rm -f digestfile*

      # commit, push & create new merge request
      TAG=$(date '+%Y-%m-%d-%H%M')
      git remote set-url origin \
          "https://gitlab-ci-token:${GITLAB_API_TOKEN}@gitlab.com/${CI_PROJECT_PATH}.git" || true
      git config --global user.email "idx@dfinity.org"
      git config --global user.name "IDX GitLab Automation"
      git checkout -b "base-image-refs-update-${TAG}"
      git add .
      if git diff --cached --quiet; then
          echo "No changes to commit."
          exit 0
      fi
      git commit -m "Updating container base image refs"
      git push \
          -o merge_request.create \
          -o merge_request.title="Updating container base images refs [$TAG]" \
          origin "base-image-refs-update-${TAG}" 2>&1 | tee push.info
  tags:
    - dfinity-ic
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
build-boundaryos-api-guestos-base:
  artifacts:
    expire_in: 3 days
    paths:
      - digestfile*
    when: always
  extends:
    - ".build-base-image-job"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "build-push-base-images"
    - allow_failure: true
      if: $CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
      when: manual
    - changes:
        - gitlab-ci/config/base-images-build.yml
        - ic-os/boundary-guestos/rootfs/Dockerfile.base
        - ic-os/boundary-api-guestos/rootfs/Dockerfile.base
        - ic-os/guestos/rootfs/Dockerfile.base
        - ic-os/guestos/rootfs/packages.common
        - ic-os/guestos/rootfs/packages.dev
        - ic-os/hostos/rootfs/Dockerfile.base
        - ic-os/hostos/rootfs/packages.common
        - ic-os/hostos/rootfs/packages.dev
        - ic-os/setupos/rootfs/Dockerfile.base
        - ic-os/setupos/rootfs/packages.common
        - ic-os/setupos/rootfs/packages.dev
      if: $CI_PARENT_PIPELINE_SOURCE == "merge_request_event"
  script:
    - |
      set -euo pipefail

      TAG=$(date '+%Y-%m-%d-%H%M')
      echo -e "\e[0Ksection_start:$(date +%s):${IMAGE}[collapsed=true]\r\e[0KClick here to see the ${IMAGE} build"
      pushd "$CONTEXT"
      podman build "${BUILD_ARGS[@]}" --squash-all --no-cache -t "docker.io/dfinity/${IMAGE}:${TAG}" -f Dockerfile.base .
      popd
      echo -e "\e[0Ksection_end:$(date +%s):${IMAGE}\r\e[0K"

      if [ "${CI_COMMIT_REF_NAME:-}" == "master" ]; then
          podman login -u "$DOCKER_HUB_USER" -p "$DOCKER_HUB_PASSWORD" docker.io
          podman push "dfinity/${IMAGE}:${TAG}" --digestfile digestfile
          echo "dfinity/${IMAGE}@$(cat digestfile)" > "digestfile-${IMAGE}"
          echo "$REF_FILE" >> "digestfile-${IMAGE}"
          rm -f digestfile
      fi
  tags:
    - dfinity-ic
  variables:
    CONTEXT: "${CI_PROJECT_DIR}/ic-os/boundary-api-guestos/rootfs"
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    IMAGE: boundary-api-guestos-base
    REF_FILE: ic-os/boundary-api-guestos/rootfs/docker-base.prod
    SHELL_WRAPPER: "/usr/bin/time"
build-boundaryos-api-guestos-base-snp:
  artifacts:
    expire_in: 3 days
    paths:
      - digestfile*
    when: always
  extends:
    - ".build-base-image-job"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "build-push-base-images"
    - allow_failure: true
      if: $CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
      when: manual
    - changes:
        - gitlab-ci/config/base-images-build.yml
        - ic-os/boundary-guestos/rootfs/Dockerfile.base
        - ic-os/boundary-api-guestos/rootfs/Dockerfile.base
        - ic-os/guestos/rootfs/Dockerfile.base
        - ic-os/guestos/rootfs/packages.common
        - ic-os/guestos/rootfs/packages.dev
        - ic-os/hostos/rootfs/Dockerfile.base
        - ic-os/hostos/rootfs/packages.common
        - ic-os/hostos/rootfs/packages.dev
        - ic-os/setupos/rootfs/Dockerfile.base
        - ic-os/setupos/rootfs/packages.common
        - ic-os/setupos/rootfs/packages.dev
      if: $CI_PARENT_PIPELINE_SOURCE == "merge_request_event"
  script:
    - BUILD_ARGS=(--build-arg "CPU_SUPPORT=snp")
    - |
      set -euo pipefail

      TAG=$(date '+%Y-%m-%d-%H%M')
      echo -e "\e[0Ksection_start:$(date +%s):${IMAGE}[collapsed=true]\r\e[0KClick here to see the ${IMAGE} build"
      pushd "$CONTEXT"
      podman build "${BUILD_ARGS[@]}" --squash-all --no-cache -t "docker.io/dfinity/${IMAGE}:${TAG}" -f Dockerfile.base .
      popd
      echo -e "\e[0Ksection_end:$(date +%s):${IMAGE}\r\e[0K"

      if [ "${CI_COMMIT_REF_NAME:-}" == "master" ]; then
          podman login -u "$DOCKER_HUB_USER" -p "$DOCKER_HUB_PASSWORD" docker.io
          podman push "dfinity/${IMAGE}:${TAG}" --digestfile digestfile
          echo "dfinity/${IMAGE}@$(cat digestfile)" > "digestfile-${IMAGE}"
          echo "$REF_FILE" >> "digestfile-${IMAGE}"
          rm -f digestfile
      fi
  tags:
    - dfinity-ic
  variables:
    CONTEXT: "${CI_PROJECT_DIR}/ic-os/boundary-api-guestos/rootfs"
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    IMAGE: boundary-api-guestos-base-snp
    REF_FILE: ic-os/boundary-api-guestos/rootfs/docker-base.snp
    SHELL_WRAPPER: "/usr/bin/time"
build-boundaryos-base:
  artifacts:
    expire_in: 3 days
    paths:
      - digestfile*
    when: always
  extends:
    - ".build-base-image-job"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "build-push-base-images"
    - allow_failure: true
      if: $CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
      when: manual
    - changes:
        - gitlab-ci/config/base-images-build.yml
        - ic-os/boundary-guestos/rootfs/Dockerfile.base
        - ic-os/boundary-api-guestos/rootfs/Dockerfile.base
        - ic-os/guestos/rootfs/Dockerfile.base
        - ic-os/guestos/rootfs/packages.common
        - ic-os/guestos/rootfs/packages.dev
        - ic-os/hostos/rootfs/Dockerfile.base
        - ic-os/hostos/rootfs/packages.common
        - ic-os/hostos/rootfs/packages.dev
        - ic-os/setupos/rootfs/Dockerfile.base
        - ic-os/setupos/rootfs/packages.common
        - ic-os/setupos/rootfs/packages.dev
      if: $CI_PARENT_PIPELINE_SOURCE == "merge_request_event"
  script:
    - |
      set -euo pipefail

      TAG=$(date '+%Y-%m-%d-%H%M')
      echo -e "\e[0Ksection_start:$(date +%s):${IMAGE}[collapsed=true]\r\e[0KClick here to see the ${IMAGE} build"
      pushd "$CONTEXT"
      podman build "${BUILD_ARGS[@]}" --squash-all --no-cache -t "docker.io/dfinity/${IMAGE}:${TAG}" -f Dockerfile.base .
      popd
      echo -e "\e[0Ksection_end:$(date +%s):${IMAGE}\r\e[0K"

      if [ "${CI_COMMIT_REF_NAME:-}" == "master" ]; then
          podman login -u "$DOCKER_HUB_USER" -p "$DOCKER_HUB_PASSWORD" docker.io
          podman push "dfinity/${IMAGE}:${TAG}" --digestfile digestfile
          echo "dfinity/${IMAGE}@$(cat digestfile)" > "digestfile-${IMAGE}"
          echo "$REF_FILE" >> "digestfile-${IMAGE}"
          rm -f digestfile
      fi
  tags:
    - dfinity-ic
  variables:
    CONTEXT: "${CI_PROJECT_DIR}/ic-os/boundary-guestos/rootfs"
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    IMAGE: boundaryos-base
    REF_FILE: ic-os/boundary-guestos/rootfs/docker-base.prod
    SHELL_WRAPPER: "/usr/bin/time"
build-boundaryos-base-snp:
  artifacts:
    expire_in: 3 days
    paths:
      - digestfile*
    when: always
  extends:
    - ".build-base-image-job"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "build-push-base-images"
    - allow_failure: true
      if: $CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
      when: manual
    - changes:
        - gitlab-ci/config/base-images-build.yml
        - ic-os/boundary-guestos/rootfs/Dockerfile.base
        - ic-os/boundary-api-guestos/rootfs/Dockerfile.base
        - ic-os/guestos/rootfs/Dockerfile.base
        - ic-os/guestos/rootfs/packages.common
        - ic-os/guestos/rootfs/packages.dev
        - ic-os/hostos/rootfs/Dockerfile.base
        - ic-os/hostos/rootfs/packages.common
        - ic-os/hostos/rootfs/packages.dev
        - ic-os/setupos/rootfs/Dockerfile.base
        - ic-os/setupos/rootfs/packages.common
        - ic-os/setupos/rootfs/packages.dev
      if: $CI_PARENT_PIPELINE_SOURCE == "merge_request_event"
  script:
    - BUILD_ARGS=(--build-arg "CPU_SUPPORT=snp")
    - |
      set -euo pipefail

      TAG=$(date '+%Y-%m-%d-%H%M')
      echo -e "\e[0Ksection_start:$(date +%s):${IMAGE}[collapsed=true]\r\e[0KClick here to see the ${IMAGE} build"
      pushd "$CONTEXT"
      podman build "${BUILD_ARGS[@]}" --squash-all --no-cache -t "docker.io/dfinity/${IMAGE}:${TAG}" -f Dockerfile.base .
      popd
      echo -e "\e[0Ksection_end:$(date +%s):${IMAGE}\r\e[0K"

      if [ "${CI_COMMIT_REF_NAME:-}" == "master" ]; then
          podman login -u "$DOCKER_HUB_USER" -p "$DOCKER_HUB_PASSWORD" docker.io
          podman push "dfinity/${IMAGE}:${TAG}" --digestfile digestfile
          echo "dfinity/${IMAGE}@$(cat digestfile)" > "digestfile-${IMAGE}"
          echo "$REF_FILE" >> "digestfile-${IMAGE}"
          rm -f digestfile
      fi
  tags:
    - dfinity-ic
  variables:
    CONTEXT: "${CI_PROJECT_DIR}/ic-os/boundary-guestos/rootfs"
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    IMAGE: boundaryos-base-snp
    REF_FILE: ic-os/boundary-guestos/rootfs/docker-base.snp
    SHELL_WRAPPER: "/usr/bin/time"
build-determinism:
  artifacts:
    expire_in: 3 days
    paths:
      - junit_data/*
      - coredumps/*.txt
      - coredumps/*.gz
    when: always
  extends:
    - ".build-k8s"
    - ".bazel-rules-pipeline-no-merge-train"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs:
    - artifacts: false
      job: bazel-test-all
    - artifacts: false
      job: build-ic
  parallel:
    matrix:
      - PATH0: release
        PATH1: build-ic/release
      - PATH0: canisters
        PATH1: build-ic/canisters
      - PATH0: guest-os/update-img
        PATH1: build-ic/guest-os
      - PATH0: host-os/update-img
        PATH1: build-ic/host-os
      - PATH0: setup-os/disk-img
        PATH1: build-ic/setup-os
        SETUPOS_FLAG: 'true'
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE != "merge_train" && $CI_MERGE_REQUEST_TITLE =~ /\bhotfix\b/i
      variables:
        BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE != "merge_train"
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
  script:
    - |
      set -eExuo pipefail
      ./gitlab-ci/tools/build-diff.sh "$PATH0" "$PATH1"
  tags:
    - dfinity-ic
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
build-determinism-release:
  artifacts:
    expire_in: 3 days
    paths:
      - junit_data/*
      - coredumps/*.txt
      - coredumps/*.gz
    when: always
  extends:
    - ".ubuntu-k8s"
    - ".rules-scheduled-reproducibility"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs:
    - job: build-ic-release
  parallel:
    matrix:
      - PATH0: build-ic-release/release
        PATH1: release
      - PATH0: build-ic-release/canisters
        PATH1: canisters
      - PATH0: build-ic-release/guest-os
        PATH1: guest-os/update-img
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "build-reproducibility"
  script:
    - |
      set -eExuo pipefail

      # TODO IDX-2757
      if [ "$CI_JOB_NAME" == "build-determinism-guest-update-img-release" ]; then
          OLD_PATH="$(git rev-parse HEAD)/build-ic-release/guest-os/update-img"
          if curl -sfSI --retry 2 "https://download.dfinity.systems/ic/$OLD_PATH/SHA256SUMS"; then
              PATH0="build-ic-release/guest-os/update-img"
          fi
      fi

      # what we've build in build-ic-release
      P0=$PATH0
      # what is live and available under $NNS_RELEASE_VERSION
      # NNS_RELEASE_VERSION is set in build-ic-release
      # shellcheck disable=SC2153
      P1="/${NNS_RELEASE_VERSION}/${PATH1}"

      ./gitlab-ci/tools/build-diff.sh "$P0" "$P1"
  tags:
    - dfinity-ic
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
build-guestos-base:
  artifacts:
    expire_in: 3 days
    paths:
      - digestfile*
    when: always
  extends:
    - ".build-base-image-job"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "build-push-base-images"
    - allow_failure: true
      if: $CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
      when: manual
    - changes:
        - gitlab-ci/config/base-images-build.yml
        - ic-os/boundary-guestos/rootfs/Dockerfile.base
        - ic-os/boundary-api-guestos/rootfs/Dockerfile.base
        - ic-os/guestos/rootfs/Dockerfile.base
        - ic-os/guestos/rootfs/packages.common
        - ic-os/guestos/rootfs/packages.dev
        - ic-os/hostos/rootfs/Dockerfile.base
        - ic-os/hostos/rootfs/packages.common
        - ic-os/hostos/rootfs/packages.dev
        - ic-os/setupos/rootfs/Dockerfile.base
        - ic-os/setupos/rootfs/packages.common
        - ic-os/setupos/rootfs/packages.dev
      if: $CI_PARENT_PIPELINE_SOURCE == "merge_request_event"
  script:
    - |
      set -euo pipefail

      TAG=$(date '+%Y-%m-%d-%H%M')
      echo -e "\e[0Ksection_start:$(date +%s):${IMAGE}[collapsed=true]\r\e[0KClick here to see the ${IMAGE} build"
      pushd "$CONTEXT"
      podman build "${BUILD_ARGS[@]}" --squash-all --no-cache -t "docker.io/dfinity/${IMAGE}:${TAG}" -f Dockerfile.base .
      popd
      echo -e "\e[0Ksection_end:$(date +%s):${IMAGE}\r\e[0K"

      if [ "${CI_COMMIT_REF_NAME:-}" == "master" ]; then
          podman login -u "$DOCKER_HUB_USER" -p "$DOCKER_HUB_PASSWORD" docker.io
          podman push "dfinity/${IMAGE}:${TAG}" --digestfile digestfile
          echo "dfinity/${IMAGE}@$(cat digestfile)" > "digestfile-${IMAGE}"
          echo "$REF_FILE" >> "digestfile-${IMAGE}"
          rm -f digestfile
      fi
  tags:
    - dfinity-ic
  variables:
    CONTEXT: "${CI_PROJECT_DIR}/ic-os/guestos/rootfs"
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    IMAGE: guestos-base
    REF_FILE: ic-os/guestos/rootfs/docker-base.prod
    SHELL_WRAPPER: "/usr/bin/time"
build-guestos-base-dev:
  artifacts:
    expire_in: 3 days
    paths:
      - digestfile*
    when: always
  extends:
    - ".build-base-image-job"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "build-push-base-images"
    - allow_failure: true
      if: $CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
      when: manual
    - changes:
        - gitlab-ci/config/base-images-build.yml
        - ic-os/boundary-guestos/rootfs/Dockerfile.base
        - ic-os/boundary-api-guestos/rootfs/Dockerfile.base
        - ic-os/guestos/rootfs/Dockerfile.base
        - ic-os/guestos/rootfs/packages.common
        - ic-os/guestos/rootfs/packages.dev
        - ic-os/hostos/rootfs/Dockerfile.base
        - ic-os/hostos/rootfs/packages.common
        - ic-os/hostos/rootfs/packages.dev
        - ic-os/setupos/rootfs/Dockerfile.base
        - ic-os/setupos/rootfs/packages.common
        - ic-os/setupos/rootfs/packages.dev
      if: $CI_PARENT_PIPELINE_SOURCE == "merge_request_event"
  script:
    - BUILD_ARGS=(--build-arg "PACKAGE_FILES=packages.common packages.dev")
    - |
      set -euo pipefail

      TAG=$(date '+%Y-%m-%d-%H%M')
      echo -e "\e[0Ksection_start:$(date +%s):${IMAGE}[collapsed=true]\r\e[0KClick here to see the ${IMAGE} build"
      pushd "$CONTEXT"
      podman build "${BUILD_ARGS[@]}" --squash-all --no-cache -t "docker.io/dfinity/${IMAGE}:${TAG}" -f Dockerfile.base .
      popd
      echo -e "\e[0Ksection_end:$(date +%s):${IMAGE}\r\e[0K"

      if [ "${CI_COMMIT_REF_NAME:-}" == "master" ]; then
          podman login -u "$DOCKER_HUB_USER" -p "$DOCKER_HUB_PASSWORD" docker.io
          podman push "dfinity/${IMAGE}:${TAG}" --digestfile digestfile
          echo "dfinity/${IMAGE}@$(cat digestfile)" > "digestfile-${IMAGE}"
          echo "$REF_FILE" >> "digestfile-${IMAGE}"
          rm -f digestfile
      fi
  tags:
    - dfinity-ic
  variables:
    CONTEXT: "${CI_PROJECT_DIR}/ic-os/guestos/rootfs"
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    IMAGE: guestos-base-dev
    REF_FILE: ic-os/guestos/rootfs/docker-base.dev
    SHELL_WRAPPER: "/usr/bin/time"
build-guestos-base-dev-sev:
  artifacts:
    expire_in: 3 days
    paths:
      - digestfile*
    when: always
  extends:
    - ".build-base-image-job"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "build-push-base-images"
    - allow_failure: true
      if: $CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
      when: manual
    - changes:
        - gitlab-ci/config/base-images-build.yml
        - ic-os/boundary-guestos/rootfs/Dockerfile.base
        - ic-os/boundary-api-guestos/rootfs/Dockerfile.base
        - ic-os/guestos/rootfs/Dockerfile.base
        - ic-os/guestos/rootfs/packages.common
        - ic-os/guestos/rootfs/packages.dev
        - ic-os/hostos/rootfs/Dockerfile.base
        - ic-os/hostos/rootfs/packages.common
        - ic-os/hostos/rootfs/packages.dev
        - ic-os/setupos/rootfs/Dockerfile.base
        - ic-os/setupos/rootfs/packages.common
        - ic-os/setupos/rootfs/packages.dev
      if: $CI_PARENT_PIPELINE_SOURCE == "merge_request_event"
  script:
    - BUILD_ARGS=(--build-arg "PACKAGE_FILES=packages.common packages.dev")
    - |
      set -euo pipefail

      TAG=$(date '+%Y-%m-%d-%H%M')
      echo -e "\e[0Ksection_start:$(date +%s):${IMAGE}[collapsed=true]\r\e[0KClick here to see the ${IMAGE} build"
      pushd "$CONTEXT"
      podman build "${BUILD_ARGS[@]}" --squash-all --no-cache -t "docker.io/dfinity/${IMAGE}:${TAG}" -f Dockerfile.base .
      popd
      echo -e "\e[0Ksection_end:$(date +%s):${IMAGE}\r\e[0K"

      if [ "${CI_COMMIT_REF_NAME:-}" == "master" ]; then
          podman login -u "$DOCKER_HUB_USER" -p "$DOCKER_HUB_PASSWORD" docker.io
          podman push "dfinity/${IMAGE}:${TAG}" --digestfile digestfile
          echo "dfinity/${IMAGE}@$(cat digestfile)" > "digestfile-${IMAGE}"
          echo "$REF_FILE" >> "digestfile-${IMAGE}"
          rm -f digestfile
      fi
  tags:
    - dfinity-ic
  variables:
    CONTEXT: "${CI_PROJECT_DIR}/ic-os/guestos/rootfs"
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    IMAGE: guestos-base-dev-sev
    REF_FILE: ic-os/guestos/rootfs/docker-base.dev-sev
    SHELL_WRAPPER: "/usr/bin/time"
build-hostos-base:
  artifacts:
    expire_in: 3 days
    paths:
      - digestfile*
    when: always
  extends:
    - ".build-base-image-job"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "build-push-base-images"
    - allow_failure: true
      if: $CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
      when: manual
    - changes:
        - gitlab-ci/config/base-images-build.yml
        - ic-os/boundary-guestos/rootfs/Dockerfile.base
        - ic-os/boundary-api-guestos/rootfs/Dockerfile.base
        - ic-os/guestos/rootfs/Dockerfile.base
        - ic-os/guestos/rootfs/packages.common
        - ic-os/guestos/rootfs/packages.dev
        - ic-os/hostos/rootfs/Dockerfile.base
        - ic-os/hostos/rootfs/packages.common
        - ic-os/hostos/rootfs/packages.dev
        - ic-os/setupos/rootfs/Dockerfile.base
        - ic-os/setupos/rootfs/packages.common
        - ic-os/setupos/rootfs/packages.dev
      if: $CI_PARENT_PIPELINE_SOURCE == "merge_request_event"
  script:
    - |
      set -euo pipefail

      TAG=$(date '+%Y-%m-%d-%H%M')
      echo -e "\e[0Ksection_start:$(date +%s):${IMAGE}[collapsed=true]\r\e[0KClick here to see the ${IMAGE} build"
      pushd "$CONTEXT"
      podman build "${BUILD_ARGS[@]}" --squash-all --no-cache -t "docker.io/dfinity/${IMAGE}:${TAG}" -f Dockerfile.base .
      popd
      echo -e "\e[0Ksection_end:$(date +%s):${IMAGE}\r\e[0K"

      if [ "${CI_COMMIT_REF_NAME:-}" == "master" ]; then
          podman login -u "$DOCKER_HUB_USER" -p "$DOCKER_HUB_PASSWORD" docker.io
          podman push "dfinity/${IMAGE}:${TAG}" --digestfile digestfile
          echo "dfinity/${IMAGE}@$(cat digestfile)" > "digestfile-${IMAGE}"
          echo "$REF_FILE" >> "digestfile-${IMAGE}"
          rm -f digestfile
      fi
  tags:
    - dfinity-ic
  variables:
    CONTEXT: "${CI_PROJECT_DIR}/ic-os/hostos/rootfs"
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    IMAGE: hostos-base
    REF_FILE: ic-os/hostos/rootfs/docker-base.prod
    SHELL_WRAPPER: "/usr/bin/time"
build-hostos-base-dev:
  artifacts:
    expire_in: 3 days
    paths:
      - digestfile*
    when: always
  extends:
    - ".build-base-image-job"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "build-push-base-images"
    - allow_failure: true
      if: $CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
      when: manual
    - changes:
        - gitlab-ci/config/base-images-build.yml
        - ic-os/boundary-guestos/rootfs/Dockerfile.base
        - ic-os/boundary-api-guestos/rootfs/Dockerfile.base
        - ic-os/guestos/rootfs/Dockerfile.base
        - ic-os/guestos/rootfs/packages.common
        - ic-os/guestos/rootfs/packages.dev
        - ic-os/hostos/rootfs/Dockerfile.base
        - ic-os/hostos/rootfs/packages.common
        - ic-os/hostos/rootfs/packages.dev
        - ic-os/setupos/rootfs/Dockerfile.base
        - ic-os/setupos/rootfs/packages.common
        - ic-os/setupos/rootfs/packages.dev
      if: $CI_PARENT_PIPELINE_SOURCE == "merge_request_event"
  script:
    - BUILD_ARGS=(--build-arg "PACKAGE_FILES=packages.common packages.dev")
    - |
      set -euo pipefail

      TAG=$(date '+%Y-%m-%d-%H%M')
      echo -e "\e[0Ksection_start:$(date +%s):${IMAGE}[collapsed=true]\r\e[0KClick here to see the ${IMAGE} build"
      pushd "$CONTEXT"
      podman build "${BUILD_ARGS[@]}" --squash-all --no-cache -t "docker.io/dfinity/${IMAGE}:${TAG}" -f Dockerfile.base .
      popd
      echo -e "\e[0Ksection_end:$(date +%s):${IMAGE}\r\e[0K"

      if [ "${CI_COMMIT_REF_NAME:-}" == "master" ]; then
          podman login -u "$DOCKER_HUB_USER" -p "$DOCKER_HUB_PASSWORD" docker.io
          podman push "dfinity/${IMAGE}:${TAG}" --digestfile digestfile
          echo "dfinity/${IMAGE}@$(cat digestfile)" > "digestfile-${IMAGE}"
          echo "$REF_FILE" >> "digestfile-${IMAGE}"
          rm -f digestfile
      fi
  tags:
    - dfinity-ic
  variables:
    CONTEXT: "${CI_PROJECT_DIR}/ic-os/hostos/rootfs"
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    IMAGE: hostos-base-dev
    REF_FILE: ic-os/hostos/rootfs/docker-base.dev
    SHELL_WRAPPER: "/usr/bin/time"
build-hostos-base-dev-sev:
  artifacts:
    expire_in: 3 days
    paths:
      - digestfile*
    when: always
  extends:
    - ".build-base-image-job"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "build-push-base-images"
    - allow_failure: true
      if: $CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
      when: manual
    - changes:
        - gitlab-ci/config/base-images-build.yml
        - ic-os/boundary-guestos/rootfs/Dockerfile.base
        - ic-os/boundary-api-guestos/rootfs/Dockerfile.base
        - ic-os/guestos/rootfs/Dockerfile.base
        - ic-os/guestos/rootfs/packages.common
        - ic-os/guestos/rootfs/packages.dev
        - ic-os/hostos/rootfs/Dockerfile.base
        - ic-os/hostos/rootfs/packages.common
        - ic-os/hostos/rootfs/packages.dev
        - ic-os/setupos/rootfs/Dockerfile.base
        - ic-os/setupos/rootfs/packages.common
        - ic-os/setupos/rootfs/packages.dev
      if: $CI_PARENT_PIPELINE_SOURCE == "merge_request_event"
  script:
    - BUILD_ARGS=(--build-arg "PACKAGE_FILES=packages.common packages.dev" --build-arg "CPU_SUPPORT=sev")
    - |
      set -euo pipefail

      TAG=$(date '+%Y-%m-%d-%H%M')
      echo -e "\e[0Ksection_start:$(date +%s):${IMAGE}[collapsed=true]\r\e[0KClick here to see the ${IMAGE} build"
      pushd "$CONTEXT"
      podman build "${BUILD_ARGS[@]}" --squash-all --no-cache -t "docker.io/dfinity/${IMAGE}:${TAG}" -f Dockerfile.base .
      popd
      echo -e "\e[0Ksection_end:$(date +%s):${IMAGE}\r\e[0K"

      if [ "${CI_COMMIT_REF_NAME:-}" == "master" ]; then
          podman login -u "$DOCKER_HUB_USER" -p "$DOCKER_HUB_PASSWORD" docker.io
          podman push "dfinity/${IMAGE}:${TAG}" --digestfile digestfile
          echo "dfinity/${IMAGE}@$(cat digestfile)" > "digestfile-${IMAGE}"
          echo "$REF_FILE" >> "digestfile-${IMAGE}"
          rm -f digestfile
      fi
  tags:
    - dfinity-ic
  variables:
    CONTEXT: "${CI_PROJECT_DIR}/ic-os/hostos/rootfs"
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    IMAGE: hostos-base-dev-sev
    REF_FILE: ic-os/hostos/rootfs/docker-base.dev-sev
    SHELL_WRAPPER: "/usr/bin/time"
build-ic:
  artifacts:
    expire_in: 3 days
    paths:
      - bazel-build-log*.json*
    reports:
      dotenv:
        - nns.release.env
  extends:
    - ".build-ic"
    - ".bazel-rules-pipeline-no-merge-train"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE != "merge_train" && $CI_MERGE_REQUEST_TITLE =~ /\bhotfix\b/i
      variables:
        BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE != "merge_train"
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
  script:
    - |
      set -euo pipefail
      VERSION=$(git rev-parse HEAD)

      if [ "$CI_JOB_NAME" == "build-ic-release" ]; then
          # read NNS release version from git tree
          NNS_RELEASE_VERSION="$(jq -r '.subnets["tdb26-jop6k-aogll-7ltgs-eruif-6kk7m-qpktf-gdiqx-mxtrf-vb5e6-eqe"]' testnet/mainnet_revisions.json)"
          # we pass nss version info to build-determinism-*-release jobs
          # we put it under /tmp due to git clean -ffdx within build-ic script
          echo "NNS_RELEASE_VERSION=$NNS_RELEASE_VERSION" > /tmp/nns.release.env

          # fetch and checkout this version
          git fetch origin "$NNS_RELEASE_VERSION"
          git checkout "$NNS_RELEASE_VERSION"
          # NOTE: ic/$VERSION in S3 will have artifacts
          #       for revision $NNS_RELEASE_VERSION !!!
      fi

      if [ "$CI_COMMIT_REF_PROTECTED" == "true" ]; then
          gitlab-ci/container/build-ic.sh -i -c -b
      else
          gitlab-ci/container/build-ic.sh -i -c -b --no-release
      fi

      # release binaries
      buildevents cmd "${ROOT_PIPELINE_ID}" "${CI_JOB_ID}" rclone -- \
          gitlab-ci/src/artifacts/rclone_upload.py --version="${VERSION}" \
          "artifacts/release" "${CI_JOB_NAME}/release"
      # canister binaries
      buildevents cmd "${ROOT_PIPELINE_ID}" "${CI_JOB_ID}" rclone -- \
          gitlab-ci/src/artifacts/rclone_upload.py --version="${VERSION}" \
          "artifacts/canisters" "${CI_JOB_NAME}/canisters"

      # guestos images
      buildevents cmd "${ROOT_PIPELINE_ID}" "${CI_JOB_ID}" rclone -- \
          gitlab-ci/src/artifacts/rclone_upload.py --version="${VERSION}" \
          "artifacts/icos/guestos" "${CI_JOB_NAME}/guest-os"
      # hostos images
      buildevents cmd "${ROOT_PIPELINE_ID}" "${CI_JOB_ID}" rclone -- \
          gitlab-ci/src/artifacts/rclone_upload.py --version="${VERSION}" \
          "artifacts/icos/hostos" "${CI_JOB_NAME}/host-os"
      # setupos images
      buildevents cmd "${ROOT_PIPELINE_ID}" "${CI_JOB_ID}" rclone -- \
          gitlab-ci/src/artifacts/rclone_upload.py --version="${VERSION}" \
          "artifacts/icos/setupos" "${CI_JOB_NAME}/setup-os"

      # clean up
      bazel clean --expunge

      # collect dotenv
      if [ -f /tmp/nns.release.env ]; then
          mv /tmp/nns.release.env .
      fi
  tags:
    - dfinity-ic
  variables:
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
build-ic-release:
  artifacts:
    expire_in: 3 days
    paths:
      - bazel-build-log*.json*
    reports:
      dotenv:
        - nns.release.env
  extends:
    - ".build-ic"
    - ".rules-scheduled-reproducibility"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "build-reproducibility"
  script:
    - |
      set -euo pipefail
      VERSION=$(git rev-parse HEAD)

      if [ "$CI_JOB_NAME" == "build-ic-release" ]; then
          # read NNS release version from git tree
          NNS_RELEASE_VERSION="$(jq -r '.subnets["tdb26-jop6k-aogll-7ltgs-eruif-6kk7m-qpktf-gdiqx-mxtrf-vb5e6-eqe"]' testnet/mainnet_revisions.json)"
          # we pass nss version info to build-determinism-*-release jobs
          # we put it under /tmp due to git clean -ffdx within build-ic script
          echo "NNS_RELEASE_VERSION=$NNS_RELEASE_VERSION" > /tmp/nns.release.env

          # fetch and checkout this version
          git fetch origin "$NNS_RELEASE_VERSION"
          git checkout "$NNS_RELEASE_VERSION"
          # NOTE: ic/$VERSION in S3 will have artifacts
          #       for revision $NNS_RELEASE_VERSION !!!
      fi

      if [ "$CI_COMMIT_REF_PROTECTED" == "true" ]; then
          gitlab-ci/container/build-ic.sh -i -c -b
      else
          gitlab-ci/container/build-ic.sh -i -c -b --no-release
      fi

      # release binaries
      buildevents cmd "${ROOT_PIPELINE_ID}" "${CI_JOB_ID}" rclone -- \
          gitlab-ci/src/artifacts/rclone_upload.py --version="${VERSION}" \
          "artifacts/release" "${CI_JOB_NAME}/release"
      # canister binaries
      buildevents cmd "${ROOT_PIPELINE_ID}" "${CI_JOB_ID}" rclone -- \
          gitlab-ci/src/artifacts/rclone_upload.py --version="${VERSION}" \
          "artifacts/canisters" "${CI_JOB_NAME}/canisters"

      # guestos images
      buildevents cmd "${ROOT_PIPELINE_ID}" "${CI_JOB_ID}" rclone -- \
          gitlab-ci/src/artifacts/rclone_upload.py --version="${VERSION}" \
          "artifacts/icos/guestos" "${CI_JOB_NAME}/guest-os"
      # hostos images
      buildevents cmd "${ROOT_PIPELINE_ID}" "${CI_JOB_ID}" rclone -- \
          gitlab-ci/src/artifacts/rclone_upload.py --version="${VERSION}" \
          "artifacts/icos/hostos" "${CI_JOB_NAME}/host-os"
      # setupos images
      buildevents cmd "${ROOT_PIPELINE_ID}" "${CI_JOB_ID}" rclone -- \
          gitlab-ci/src/artifacts/rclone_upload.py --version="${VERSION}" \
          "artifacts/icos/setupos" "${CI_JOB_NAME}/setup-os"

      # clean up
      bazel clean --expunge

      # collect dotenv
      if [ -f /tmp/nns.release.env ]; then
          mv /tmp/nns.release.env .
      fi
  tags:
    - dfinity-ic
  variables:
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
build-setupos-base:
  artifacts:
    expire_in: 3 days
    paths:
      - digestfile*
    when: always
  extends:
    - ".build-base-image-job"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "build-push-base-images"
    - allow_failure: true
      if: $CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
      when: manual
    - changes:
        - gitlab-ci/config/base-images-build.yml
        - ic-os/boundary-guestos/rootfs/Dockerfile.base
        - ic-os/boundary-api-guestos/rootfs/Dockerfile.base
        - ic-os/guestos/rootfs/Dockerfile.base
        - ic-os/guestos/rootfs/packages.common
        - ic-os/guestos/rootfs/packages.dev
        - ic-os/hostos/rootfs/Dockerfile.base
        - ic-os/hostos/rootfs/packages.common
        - ic-os/hostos/rootfs/packages.dev
        - ic-os/setupos/rootfs/Dockerfile.base
        - ic-os/setupos/rootfs/packages.common
        - ic-os/setupos/rootfs/packages.dev
      if: $CI_PARENT_PIPELINE_SOURCE == "merge_request_event"
  script:
    - |
      set -euo pipefail

      TAG=$(date '+%Y-%m-%d-%H%M')
      echo -e "\e[0Ksection_start:$(date +%s):${IMAGE}[collapsed=true]\r\e[0KClick here to see the ${IMAGE} build"
      pushd "$CONTEXT"
      podman build "${BUILD_ARGS[@]}" --squash-all --no-cache -t "docker.io/dfinity/${IMAGE}:${TAG}" -f Dockerfile.base .
      popd
      echo -e "\e[0Ksection_end:$(date +%s):${IMAGE}\r\e[0K"

      if [ "${CI_COMMIT_REF_NAME:-}" == "master" ]; then
          podman login -u "$DOCKER_HUB_USER" -p "$DOCKER_HUB_PASSWORD" docker.io
          podman push "dfinity/${IMAGE}:${TAG}" --digestfile digestfile
          echo "dfinity/${IMAGE}@$(cat digestfile)" > "digestfile-${IMAGE}"
          echo "$REF_FILE" >> "digestfile-${IMAGE}"
          rm -f digestfile
      fi
  tags:
    - dfinity-ic
  variables:
    CONTEXT: "${CI_PROJECT_DIR}/ic-os/setupos/rootfs"
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    IMAGE: setupos-base
    REF_FILE: ic-os/setupos/rootfs/docker-base.prod
    SHELL_WRAPPER: "/usr/bin/time"
build-setupos-base-dev:
  artifacts:
    expire_in: 3 days
    paths:
      - digestfile*
    when: always
  extends:
    - ".build-base-image-job"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "build-push-base-images"
    - allow_failure: true
      if: $CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
      when: manual
    - changes:
        - gitlab-ci/config/base-images-build.yml
        - ic-os/boundary-guestos/rootfs/Dockerfile.base
        - ic-os/boundary-api-guestos/rootfs/Dockerfile.base
        - ic-os/guestos/rootfs/Dockerfile.base
        - ic-os/guestos/rootfs/packages.common
        - ic-os/guestos/rootfs/packages.dev
        - ic-os/hostos/rootfs/Dockerfile.base
        - ic-os/hostos/rootfs/packages.common
        - ic-os/hostos/rootfs/packages.dev
        - ic-os/setupos/rootfs/Dockerfile.base
        - ic-os/setupos/rootfs/packages.common
        - ic-os/setupos/rootfs/packages.dev
      if: $CI_PARENT_PIPELINE_SOURCE == "merge_request_event"
  script:
    - BUILD_ARGS=(--build-arg "PACKAGE_FILES=packages.common packages.dev")
    - |
      set -euo pipefail

      TAG=$(date '+%Y-%m-%d-%H%M')
      echo -e "\e[0Ksection_start:$(date +%s):${IMAGE}[collapsed=true]\r\e[0KClick here to see the ${IMAGE} build"
      pushd "$CONTEXT"
      podman build "${BUILD_ARGS[@]}" --squash-all --no-cache -t "docker.io/dfinity/${IMAGE}:${TAG}" -f Dockerfile.base .
      popd
      echo -e "\e[0Ksection_end:$(date +%s):${IMAGE}\r\e[0K"

      if [ "${CI_COMMIT_REF_NAME:-}" == "master" ]; then
          podman login -u "$DOCKER_HUB_USER" -p "$DOCKER_HUB_PASSWORD" docker.io
          podman push "dfinity/${IMAGE}:${TAG}" --digestfile digestfile
          echo "dfinity/${IMAGE}@$(cat digestfile)" > "digestfile-${IMAGE}"
          echo "$REF_FILE" >> "digestfile-${IMAGE}"
          rm -f digestfile
      fi
  tags:
    - dfinity-ic
  variables:
    CONTEXT: "${CI_PROJECT_DIR}/ic-os/setupos/rootfs"
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    IMAGE: setupos-base-dev
    REF_FILE: ic-os/setupos/rootfs/docker-base.dev
    SHELL_WRAPPER: "/usr/bin/time"
build-setupos-base-dev-sev:
  artifacts:
    expire_in: 3 days
    paths:
      - digestfile*
    when: always
  extends:
    - ".build-base-image-job"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "build-push-base-images"
    - allow_failure: true
      if: $CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
      when: manual
    - changes:
        - gitlab-ci/config/base-images-build.yml
        - ic-os/boundary-guestos/rootfs/Dockerfile.base
        - ic-os/boundary-api-guestos/rootfs/Dockerfile.base
        - ic-os/guestos/rootfs/Dockerfile.base
        - ic-os/guestos/rootfs/packages.common
        - ic-os/guestos/rootfs/packages.dev
        - ic-os/hostos/rootfs/Dockerfile.base
        - ic-os/hostos/rootfs/packages.common
        - ic-os/hostos/rootfs/packages.dev
        - ic-os/setupos/rootfs/Dockerfile.base
        - ic-os/setupos/rootfs/packages.common
        - ic-os/setupos/rootfs/packages.dev
      if: $CI_PARENT_PIPELINE_SOURCE == "merge_request_event"
  script:
    - BUILD_ARGS=(--build-arg "PACKAGE_FILES=packages.common packages.dev")
    - |
      set -euo pipefail

      TAG=$(date '+%Y-%m-%d-%H%M')
      echo -e "\e[0Ksection_start:$(date +%s):${IMAGE}[collapsed=true]\r\e[0KClick here to see the ${IMAGE} build"
      pushd "$CONTEXT"
      podman build "${BUILD_ARGS[@]}" --squash-all --no-cache -t "docker.io/dfinity/${IMAGE}:${TAG}" -f Dockerfile.base .
      popd
      echo -e "\e[0Ksection_end:$(date +%s):${IMAGE}\r\e[0K"

      if [ "${CI_COMMIT_REF_NAME:-}" == "master" ]; then
          podman login -u "$DOCKER_HUB_USER" -p "$DOCKER_HUB_PASSWORD" docker.io
          podman push "dfinity/${IMAGE}:${TAG}" --digestfile digestfile
          echo "dfinity/${IMAGE}@$(cat digestfile)" > "digestfile-${IMAGE}"
          echo "$REF_FILE" >> "digestfile-${IMAGE}"
          rm -f digestfile
      fi
  tags:
    - dfinity-ic
  variables:
    CONTEXT: "${CI_PROJECT_DIR}/ic-os/setupos/rootfs"
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    IMAGE: setupos-base-dev-sev
    REF_FILE: ic-os/setupos/rootfs/docker-base.dev-sev
    SHELL_WRAPPER: "/usr/bin/time"
cargo-audit:
  artifacts:
    expire_in: 3 days
    paths:
      - junit_data/*
      - coredumps/*.txt
      - coredumps/*.gz
    when: always
  extends:
    - ".ubuntu-cargo-k8s"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "cargo-audit"
  script:
    - cd rs; cargo audit
  tags:
    - dfinity-ic
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic -C link-arg=-s"
    SHELL_WRAPPER: "/usr/bin/time"
cargo-build-release-linux:
  artifacts:
    expire_in: 3 days
    paths:
      - junit_data/*
      - coredumps/*.txt
      - coredumps/*.gz
    when: always
  extends:
    - ".bazel-build-k8s"
    - ".bazel-rules-pipeline"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE == "merge_train"
      variables:
        BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate --flaky_test_attempts=3"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~ /\bhotfix\b/i
      variables:
        BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
  script:
    - |
      set -eExuo pipefail
      buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" build-command -- cargo build --release
  tags:
    - dfinity-ic
  variables:
    BAZEL_CI_CONFIG: "--config=ci"
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel"
    BAZEL_STARTUP_ARGS: "--output_base=/var/tmp/bazel-output/"
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    SHELL_WRAPPER: "/usr/bin/time"
cargo-clippy-linux:
  artifacts:
    expire_in: 3 days
    paths:
      - junit_data/*
      - coredumps/*.txt
      - coredumps/*.gz
    when: always
  extends:
    - ".bazel-build-k8s"
    - ".bazel-rules-pipeline"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE == "merge_train"
      variables:
        BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate --flaky_test_attempts=3"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~ /\bhotfix\b/i
      variables:
        BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
  script:
    - |
      set -eExuo pipefail
      buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" build-command -- \
          "$CI_PROJECT_DIR"/gitlab-ci/src/rust_lint/lint.sh
  tags:
    - dfinity-ic
  variables:
    BAZEL_CI_CONFIG: "--config=ci"
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel"
    BAZEL_STARTUP_ARGS: "--output_base=/var/tmp/bazel-output/"
    CARGO_BUILD_TARGET: x86_64-unknown-linux-gnu
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    SHELL_WRAPPER: "/usr/bin/time"
cargo-lock-generate:
  artifacts:
    expire_in: 3 days
    paths:
      - junit_data/*
      - coredumps/*.txt
      - coredumps/*.gz
    when: always
  extends:
    - ".ubuntu-cargo-k8s"
    - ".cargo-rules"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
    - allow_failure: true
      if: $CI_PIPELINE_SOURCE == "web" && $DISKIMG_BRANCH == ""
      when: manual
    - allow_failure: true
      if: $CI_PIPELINE_SOURCE == "trigger"
      when: manual
  script:
    - |
      echo "Running a tiny cargo check (should always succeed), just to make sure Cargo.lock is up to date"
      set -exuo pipefail
      cd "${CI_PROJECT_DIR}"
      cargo check -p ic-sys
      cd "${CI_PROJECT_DIR}"
    - |
      set -exuo pipefail
      git add Cargo.lock
      git status
      if ! git diff --cached --quiet; then
        # If a merge request and not on a merge train then update the Cargo.lock file in the MR automatically.
        if [ "$CI_PIPELINE_SOURCE" = "merge_request_event" ]  && [ "$CI_MERGE_REQUEST_EVENT_TYPE" != "merge_train" ];then
          # There are some changes staged
          # Command might fail because the gitlab remote already exists from a previous run.
          git remote add origin "https://gitlab-ci-token:${GITLAB_API_TOKEN}@gitlab.com/${CI_PROJECT_PATH}.git" || true
          git remote set-url origin "https://gitlab-ci-token:${GITLAB_API_TOKEN}@gitlab.com/${CI_PROJECT_PATH}.git" || true
          git config --global user.email "infra+gitlab-automation@dfinity.org"
          git config --global user.name "IDX GitLab Automation"
          git commit -m"Automatically updated Cargo.lock"
          git push origin HEAD:"${CI_COMMIT_REF_NAME}"
        fi

        # Force the pipeline to fail so MRs cannot be merged with a stale cargo lockfile.
        exit 1
      fi
  tags:
    - dfinity-ic
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic -C link-arg=-s"
    SHELL_WRAPPER: "/usr/bin/time"
check-bins-linux:
  after_script: "/bin/true"
  artifacts:
    expire_in: 3 days
    paths:
      - junit_data/*
      - coredumps/*.txt
      - coredumps/*.gz
    when: always
  before_script: "/bin/true"
  extends:
    - ".ubuntu-k8s"
    - ".bazel-rules-pipeline-no-merge-train"
  image:
    name: ubuntu@sha256:b5a61709a9a44284d88fb12e5c48db0409cfad5b69d4ff8224077c57302df9cf
  needs:
    - artifacts: false
      job: linux-openssl-static-binaries
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE != "merge_train" && $CI_MERGE_REQUEST_TITLE =~ /\bhotfix\b/i
      variables:
        BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE != "merge_train"
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
  script:
    - |
      set -exuo pipefail

      apt-get update && apt-get install --yes --no-install-recommends curl ca-certificates

      "$CI_PROJECT_DIR"/gitlab-ci/tools/download "${ARTIFACT_PREFIX}/replica.gz" | gunzip > /tmp/replica
      chmod +x /tmp/replica
      ldd /tmp/replica
      /tmp/replica --print-sample-config --replica-version 1 >/dev/null

      "$CI_PROJECT_DIR"/gitlab-ci/tools/download "${ARTIFACT_PREFIX}/ic-starter.gz" | gunzip > /tmp/ic-starter
      chmod +x /tmp/ic-starter
      ldd /tmp/ic-starter
      /tmp/ic-starter --version
  tags:
    - dfinity-ic
  variables:
    ARTIFACT_PREFIX: openssl-static-binaries/x86_64-linux
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
commit-lint:
  artifacts:
    expire_in: 3 days
    paths:
      - junit_data/*
      - coredumps/*.txt
      - coredumps/*.gz
    when: always
  extends:
    - ".build-k8s"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs: []
  rules:
    - allow_failure: true
      if: $CI_PIPELINE_SOURCE == "merge_request_event"
  script:
    - |
      set -eEuo pipefail

      git config --global user.email "idx@dfinity.org"
      git config --global user.name "IDX GitLab Automation"

      if ! cog verify  "${CI_MERGE_REQUEST_TITLE}"; then
        echo "Your commit message - '${CI_MERGE_REQUEST_TITLE}' does not respect conventional commit conventions" >&2
        echo "Please visit https://www.conventionalcommits.org/en/v1.0.0/ to learn more about conventional commit" >&2
        exit 1
      fi
  tags:
    - dfinity-ic
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
container-autobuild:
  artifacts:
    expire_in: 3 days
    paths:
      - junit_data/*
      - coredumps/*.txt
      - coredumps/*.gz
    when: always
  extends:
    - ".ubuntu-cargo-k8s"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs: []
  rules:
    - changes:
        - requirements.txt
        - ".bazelversion"
        - gitlab-ci/container/**/*
        - gitlab-ci/config/container-image-autobuild.yml
      if: $CI_PIPELINE_SOURCE == "merge_request_event"
  script:
    - |
      set -euo pipefail

      # safeguard for feedback loop [this CI job pushes commits]
      git fetch origin master
      COMMIT_COUNT=$(git rev-list --count "$(git merge-base HEAD origin/master)"..HEAD)
      if [ "$COMMIT_COUNT" -gt 256 ]; then
          echo "Reached hard safeguard limit of commits"
          exit 1
      fi

      # check if tag changed
      pushd gitlab-ci/container
      TAG="$(./get-image-tag.sh)"
      cd ../config
      # names must match with names in docker-build-image.sh!
      IMG_NAME="registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy"
      IMG_BAZEL_NAME="registry.gitlab.com/dfinity-lab/core/docker/ic-build"
      IMG_BAZEL_DOCKER_HUB="dfinity/ic-build"

      IMG_NAME_FULL="$IMG_NAME:$TAG"
      IMG_BAZEL_NAME_FULL="$IMG_BAZEL_NAME:$TAG"
      IMG_BAZEL_DOCKER_HUB_FULL="$IMG_BAZEL_DOCKER_HUB:$TAG"

      # return if no changes
      if grep -q "$IMG_NAME_FULL" -- *; then
          echo "No changes required to build a new docker ic-build-legacy image"
          exit 0
      fi
      popd

      # build new ic-build* images
      ./gitlab-ci/container/build-image.sh

      # push the new ic-build-legacy image it to gitlab registry
      docker login -u gitlab-ci-token -p "$GITLAB_API_TOKEN" registry.gitlab.com
      docker push "$IMG_NAME_FULL"
      docker push "$IMG_BAZEL_NAME_FULL"
      # clean-up
      docker image prune -f
      docker container prune -f

      # update gitlab's docker image tags
      pushd gitlab-ci/config
      sed -i -E "s|$IMG_NAME:[^\"]{5,}|$IMG_NAME_FULL|g" -- *
      sed -i -E "s|$IMG_BAZEL_NAME:[^\"]{5,}|$IMG_BAZEL_NAME_FULL|g" -- *
      cd ../container
      echo "$TAG" > TAG
      popd

      pushd .devcontainer
      sed -i -E "s|$IMG_BAZEL_DOCKER_HUB:[^\"]{5,}|$IMG_BAZEL_DOCKER_HUB_FULL|g" -- *
      popd

      # commit and push the change upstream
      git config --global user.email "idx@dfinity.org"
      git config --global user.name "IDX GitLab Automation"
      git commit -a -m "Updating docker image in CI"
      git remote add origin \
          "https://gitlab-ci-token:${GITLAB_API_TOKEN}@gitlab.com/${CI_PROJECT_PATH}.git" \
          || true
      git remote set-url origin \
          "https://gitlab-ci-token:${GITLAB_API_TOKEN}@gitlab.com/${CI_PROJECT_PATH}.git" \
          || true
      git push --set-upstream origin HEAD:"$CI_COMMIT_REF_NAME"
  tags:
    - dfinity-ic
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic -C link-arg=-s"
    SHELL_WRAPPER: "/usr/bin/time"
container-autobuild-protected:
  artifacts:
    expire_in: 3 days
    paths:
      - junit_data/*
      - coredumps/*.txt
      - coredumps/*.gz
    when: always
  extends:
    - ".ubuntu-cargo-k8s"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs: []
  rules:
    - changes:
        - gitlab-ci/container/TAG
      if: $CI_COMMIT_REF_PROTECTED == "true" && $CI_PIPELINE_SOURCE == "push"
    - if: $CI_COMMIT_REF_PROTECTED == "true" && $SCHEDULE_NAME == "run-all-master"
  script:
    - |
      # use docker on protected runner
      set -euo pipefail

      # container image tag
      TAG=$(cat ./gitlab-ci/container/TAG)
      # check if we have it in dockerhub
      EXISTS=$(curl -s https://hub.docker.com/v2/repositories/dfinity/ic-build-legacy/tags | jq -r "[.results? | .[]? | .name == \"$TAG\"] | any")
      EXISTS_BAZEL=$(curl -s https://hub.docker.com/v2/repositories/dfinity/ic-build/tags | jq -r "[.results? | .[]? | .name == \"$TAG\"] | any")

      if [ "$EXISTS" != "true" ] || [ "$EXISTS_BAZEL" != "true" ]; then
        # build it
        echo -e "\e[0Ksection_start:$(date +%s):docker_build_script[collapsed=true]\r\e[0KClick here to see the docker_build_script"
        ./gitlab-ci/container/build-image.sh
        echo -e "\e[0Ksection_end:$(date +%s):docker_build_script\r\e[0K"
        # push it to dockerhub
        docker login -u "$DOCKER_HUB_USER" -p "$DOCKER_HUB_PASSWORD"
        docker push docker.io/dfinity/ic-build-legacy:"$TAG"
        docker push docker.io/dfinity/ic-build-legacy:latest
        docker push docker.io/dfinity/ic-build:"$TAG"
        docker push docker.io/dfinity/ic-build:latest
        # clean-up
        docker image prune -f
        docker container prune -f
      fi
  tags:
    - dfinity-ic
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic -C link-arg=-s"
    SHELL_WRAPPER: "/usr/bin/time"
cut-release-candidate:
  artifacts:
    expire_in: 3 days
    paths:
      - junit_data/*
      - coredumps/*.txt
      - coredumps/*.gz
    when: always
  dependencies: []
  extends:
    - ".ubuntu-cargo-k8s"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "release-candidate-cut"
  script:
    - |
      # The remote might already exist from a previous CI job run because GitLab re-uses the git repo.
      git remote add origin "https://gitlab-ci-token:${GITLAB_API_TOKEN}@gitlab.com/${CI_PROJECT_PATH}.git" || true
      git remote set-url origin "https://gitlab-ci-token:${GITLAB_API_TOKEN}@gitlab.com/${CI_PROJECT_PATH}.git" || true

      git config --global user.email "infra+gitlab-automation@dfinity.org"
      git config --global user.name "IDX GitLab Automation"

      RC_BRANCH_NAME="rc--$(date '+%Y-%m-%d_%H-%M')"
      git switch --force-create "$RC_BRANCH_NAME" HEAD
      git push --force --set-upstream origin  "$RC_BRANCH_NAME"
  tags:
    - dfinity-ic
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic -C link-arg=-s"
    SHELL_WRAPPER: "/usr/bin/time"
default:
  interruptible: true
  retry:
    max: 2
    when:
      - unknown_failure
      - api_failure
      - runner_system_failure
delegated-identity-bench:
  artifacts:
    expire_in: 3 days
    paths:
      - scalability/
    when: always
  dependencies: []
  extends: ".benchmark-test"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  resource_group: "$TESTNET"
  rules:
    - allow_failure: true
      if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~ /\[benchmark\]/
      when: manual
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "BENCHMARK_SUITE"
      when: always
  script:
    - |
      set -eExou pipefail
      git fetch
      GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")

      $SHELL_WRAPPER timeout 1h ./testnet/tools/icos_deploy.sh $TESTNET --git-revision "$GIT_REVISION" --no-boundary-nodes
      cd ./scalability

      $SHELL_WRAPPER python3 experiments/run_delegation_experiment.py --testnet $TESTNET --num_procs 64 --iter_duration 30 --num_identities 200 --rps 30,100,200,500,1000

      find . -name  'workload-generator*stderr.txt' -print0 | xargs -0 pigz
      $SHELL_WRAPPER rclone --config="${CI_PROJECT_DIR}/.rclone.conf"  copyto "results/$GIT_REVISION" "performance-testing:performance-testing-results/$GIT_REVISION"

      cd -
  tags:
    - dfinity-ic
  timeout: 3 hours
  variables:
    CURRENT_BRANCH: "$CI_COMMIT_REF_NAME"
    DISKIMG_BRANCH: "${CI_COMMIT_SHA}"
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic -C link-arg=-s"
    SHELL_WRAPPER: "/usr/bin/time"
    TESTNET: cdslo
dependencies-check:
  allow_failure: false
  artifacts:
    expire_in: 3 days
    paths:
      - junit_data/*
      - coredumps/*.txt
      - coredumps/*.gz
    when: always
  extends:
    - ".ubuntu-k8s"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE != "merge_train"
  script:
    - |
      set -euo pipefail
      $SHELL_WRAPPER cargo install cargo-audit --version "${CARGO_AUDIT_VERSION}"
      cd "${CI_PROJECT_DIR}"/gitlab-ci/src/dependencies/
      $SHELL_WRAPPER python3 job/bazel_rust_ic_scanner_merge_job.py
  tags:
    - dfinity-ic
  variables:
    CARGO_AUDIT_VERSION: 0.16.0
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    PYTHONPATH: "${CI_PROJECT_DIR}/gitlab-ci/src:${CI_PROJECT_DIR}/gitlab-ci/src/dependencies"
    SHELL_WRAPPER: "/usr/bin/time"
dependency-scan-nightly:
  allow_failure: true
  artifacts:
    expire_in: 3 days
    paths:
      - junit_data/*
      - coredumps/*.txt
      - coredumps/*.gz
    when: always
  extends:
    - ".ubuntu-k8s"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "dependency-scan-nightly"
  script:
    - |
      set -euo pipefail
      $SHELL_WRAPPER cargo install cargo-audit --version "${CARGO_AUDIT_VERSION}"
      # shellcheck disable=SC1090
      source "${NVM_DIR}/nvm.sh"
      nvm use ${NVM_VERSION}
      node --version
      npm --version
      cd "${CI_PROJECT_DIR}"/gitlab-ci/src/dependencies
      $SHELL_WRAPPER python3 job/bazel_rust_ic_scanner_periodic_job.py
      $SHELL_WRAPPER python3 job/npm_scanner_periodic_job.py
      $SHELL_WRAPPER python3 job/bazel_trivy_container_ic_scanner_periodic_job.py
  tags:
    - dfinity-ic
  variables:
    CARGO_AUDIT_VERSION: 0.16.0
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    NVM_VERSION: '19'
    PYTHONPATH: "${CI_PROJECT_DIR}/gitlab-ci/src:${CI_PROJECT_DIR}/gitlab-ci/src/dependencies"
    SHELL_WRAPPER: "/usr/bin/time"
dependency-scan-release-cut:
  allow_failure: false
  artifacts:
    expire_in: 3 days
    paths:
      - junit_data/*
      - coredumps/*.txt
      - coredumps/*.gz
    when: always
  extends:
    - ".ubuntu-k8s"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
  script:
    - |
      set -euo pipefail
      $SHELL_WRAPPER cargo install cargo-audit --version "${CARGO_AUDIT_VERSION}"
      cd "${CI_PROJECT_DIR}"/gitlab-ci/src/dependencies
      $SHELL_WRAPPER python3 job/bazel_rust_ic_scanner_release_job.py
  tags:
    - dfinity-ic
  variables:
    CARGO_AUDIT_VERSION: 0.16.0
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    PYTHONPATH: "${CI_PROJECT_DIR}/gitlab-ci/src:${CI_PROJECT_DIR}/gitlab-ci/src/dependencies"
    SHELL_WRAPPER: "/usr/bin/time"
gitlab-ci-config-validation:
  artifacts:
    expire_in: 3 days
    paths:
      - gitlab-ci/src/htmlcov
    reports:
      junit:
        - test_report.xml
    when: always
  extends:
    - ".ubuntu-k8s"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE != "merge_train"
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
  script:
    - |
      set -xeuo pipefail
      cd gitlab-ci
      python3 src/gitlab_config/main.py --cfg-validate-job-name
      python3 src/gitlab_config/main.py --cfg-bash-linter
      python3 src/gitlab_config/main.py --cfg-gitlab-linter --cfg-file config/zz-generated-gitlab-ci.yaml
  tags:
    - dfinity-ic
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    PYTHONPATH: "${CI_PROJECT_DIR}/gitlab-ci/src:${CI_PROJECT_DIR}/gitlab-ci/src/dependencies"
    SHELL_WRAPPER: "/usr/bin/time"
heavy-memory-update-performance-test-nightly:
  artifacts:
    expire_in: 3 days
    paths:
      - scalability/
    when: always
  dependencies: []
  extends: ".benchmark-spot-test"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  resource_group: "$TESTNET"
  rules:
    - allow_failure: true
      if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~ /\[benchmark\]/
      when: manual
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "BENCHMARK_NIGHTLY"
      when: always
  script:
    - |
      set -eExou pipefail
      git fetch

      GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")

      $SHELL_WRAPPER timeout 1h ./testnet/tools/icos_deploy.sh $TESTNET --git-revision "$GIT_REVISION" --no-boundary-nodes

      # Run heavy memory update performance evaluation
      cd ./scalability

      $SHELL_WRAPPER timeout 1h python3 experiments/run_large_memory_experiment.py --testnet "$TESTNET" --wg_testnet "$TESTNET" --wg_subnet 2 --iter_duration 300 --target_rps=15 --use_updates=True

      TIMESTAMP=$(find results/"$GIT_REVISION" -maxdepth 1 -mindepth 1 -type d -printf "%f\n" | sort -nr | head -1)
      $SHELL_WRAPPER python3 common/generate_report.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP"
      cd -

      $SHELL_WRAPPER rclone --config="${CI_PROJECT_DIR}/.rclone.conf"  copyto "scalability/results/$GIT_REVISION" "performance-testing:performance-testing-results/$GIT_REVISION"
  tags:
    - dfinity-ic
  timeout: 1 hour
  variables:
    CD_ENV: BENCHMARK_NIGHTLY
    CURRENT_BRANCH: "$CI_COMMIT_REF_NAME"
    DISKIMG_BRANCH: "${CI_COMMIT_SHA}"
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic -C link-arg=-s"
    SHELL_WRAPPER: "/usr/bin/time"
    TESTNET: cdrc02
    WG_TESTNET: cdrc02
    cd_target_env: BENCHMARK_NIGHTLY
host-os-upgrade-test:
  artifacts:
    expire_in: 3 days
    paths:
      - ic-os/hostos/test-out
    when: always
  extends:
    - ".bazel-build-k8s"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs:
    - artifacts: false
      job: bazel-test-all
  rules:
    - changes:
        - ic-os/**/*
        - toolchains/sysimage/**/*
        - testnet/**/*
      if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - allow_failure: true
      if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: manual
    - if: $SCHEDULE_NAME == "run-all-master"
    - if: "$CI_COMMIT_BRANCH =~ /^rc--/"
  script:
    - |
      VERSION=$(git rev-parse HEAD)
      export VERSION

      mkdir -p ic-os/hostos/build-out/disk-img
      curl -fsSL  "https://download.dfinity.systems/ic/${VERSION}/host-os/disk-img/disk-img.tar.gz" -o "ic-os/hostos/build-out/disk-img/disk-img.tar.gz"
      curl -fsSL  "https://download.dfinity.systems/ic/${VERSION}/host-os/disk-img/disk-img.tar.zst" -o "ic-os/hostos/build-out/disk-img/disk-img.tar.zst"
      curl -fsSL  "https://download.dfinity.systems/ic/${VERSION}/host-os/disk-img/SHA256SUMS" -o "ic-os/hostos/build-out/disk-img/SHA256SUMS"

      mkdir -p ic-os/hostos/build-out/update-img
      curl -fsSL "https://download.dfinity.systems/ic/${VERSION}/host-os/update-img/update-img.tar.zst" -o "ic-os/hostos/build-out/update-img/update-img.tar.zst"
      curl -fsSL "https://download.dfinity.systems/ic/${VERSION}/host-os/update-img/update-img.tar.gz" -o "ic-os/hostos/build-out/update-img/update-img.tar.gz"
      curl -fsSL "https://download.dfinity.systems/ic/${VERSION}/host-os/update-img/update-img-test.tar.zst" -o "ic-os/hostos/build-out/update-img/update-img-test.tar.zst"
      curl -fsSL "https://download.dfinity.systems/ic/${VERSION}/host-os/update-img/update-img-test.tar.gz" -o "ic-os/hostos/build-out/update-img/update-img-test.tar.gz"
      curl -fsSL "https://download.dfinity.systems/ic/${VERSION}/host-os/update-img/SHA256SUMS" -o "ic-os/hostos/build-out/update-img/SHA256SUMS"

      # shellcheck disable=SC2154
      $SHELL_WRAPPER timeout -k 10 "${HOST_OS_TEST_TIMEOUT}" \
          "$CI_PROJECT_DIR"/ic-os/hostos/tests/hostos-upgrade.sh "$CI_PROJECT_DIR"
  tags:
    - dfinity-ic
  variables:
    BAZEL_CI_CONFIG: "--config=ci"
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel"
    BAZEL_STARTUP_ARGS: "--output_base=/var/tmp/bazel-output/"
    E2E_TEST_TIMEOUT: 480
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    HOST_OS_TEST_TIMEOUT: 2400
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    SHELL_WRAPPER: "/usr/bin/time"
ingress-manager-proptests-nightly:
  artifacts:
    expire_in: 3 days
    paths:
      - "$CI_JOB_STAGE/$CI_JOB_NAME"
    when: always
  dependencies: []
  extends:
    - ".prod-test"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  rules:
    - allow_failure: true
      if: "$CD_ENV == $cd_target_env && $CI_COMMIT_BRANCH =~ /^rc--/ && $CI_COMMIT_MESSAGE =~ /hotfix/i"
      when: manual
    - allow_failure: true
      if: "$CD_ENV == $cd_target_env && $CI_MERGE_REQUEST_TITLE =~ /\\[rc\\]/"
      when: manual
    - allow_failure: true
      if: $CI_PIPELINE_SOURCE == "web" && $CD_ENV != "BENCHMARK_SUITE"
      when: manual
    - if: $CD_ENV == $cd_target_env && ($DEBUG_PIPELINE != "true" || $cd_debug_target == "true") && $CD_ENV != "BENCHMARK_SUITE"
      when: always
  script:
    - |
      cd "${CI_PROJECT_DIR}/rs"
      $SHELL_WRAPPER cargo test --release -p ic-ingress-manager proptest
  tags:
    - dfinity-ic
  timeout: 70 minutes
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic -C link-arg=-s"
    SHELL_WRAPPER: "/usr/bin/time"
    cd_target_env: NIGHTLY
large-response-downloading-nightly:
  artifacts:
    expire_in: 3 days
    paths:
      - scalability/
    when: always
  dependencies: []
  extends: ".benchmark-spot-test"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  resource_group: "$TESTNET"
  rules:
    - allow_failure: true
      if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~ /\[benchmark\]/
      when: manual
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "BENCHMARK_NIGHTLY"
      when: always
  script:
    - |
      set -eExou pipefail
      git fetch

      GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")

      $SHELL_WRAPPER timeout 1h ./testnet/tools/icos_deploy.sh $TESTNET --git-revision "$GIT_REVISION" --no-boundary-nodes

      cd ./scalability

      $SHELL_WRAPPER timeout 1h python3 experiments/run_large_payload_experiment.py --testnet "$TESTNET" --wg_testnet "$TESTNET" --wg_subnet 2 --iter_duration 300 --datapoints 2048

      TIMESTAMP=$(find results/"$GIT_REVISION" -maxdepth 1 -mindepth 1 -type d -printf "%f\n" | sort -nr | head -1)

      $SHELL_WRAPPER python3 common/generate_report.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP"

      $SHELL_WRAPPER python3 common/verify_perf.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP" --median_latency_threshold=3300

      cd -

      $SHELL_WRAPPER rclone --config="${CI_PROJECT_DIR}/.rclone.conf"  copyto "scalability/results/$GIT_REVISION" "performance-testing:performance-testing-results/$GIT_REVISION"
  tags:
    - dfinity-ic
  timeout: 1 hour
  variables:
    CD_ENV: BENCHMARK_NIGHTLY
    CURRENT_BRANCH: "$CI_COMMIT_REF_NAME"
    DISKIMG_BRANCH: "${CI_COMMIT_SHA}"
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic -C link-arg=-s"
    SHELL_WRAPPER: "/usr/bin/time"
    TESTNET: cdrc02
    WG_TESTNET: cdrc02
    cd_target_env: BENCHMARK_NIGHTLY
legacy-cargo-check:
  artifacts:
    expire_in: 3 days
    paths:
      - junit_data/*
      - coredumps/*.txt
      - coredumps/*.gz
    when: always
  extends:
    - ".bazel-build-k8s"
    - ".bazel-rules-pipeline"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE == "merge_train"
      variables:
        BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate --flaky_test_attempts=3"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~ /\bhotfix\b/i
      variables:
        BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
  script:
    - |
      set -eExuo pipefail
      buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" build-command -- cargo check --tests --benches
  tags:
    - dfinity-ic
  variables:
    BAZEL_CI_CONFIG: "--config=ci"
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel"
    BAZEL_STARTUP_ARGS: "--output_base=/var/tmp/bazel-output/"
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    SHELL_WRAPPER: "/usr/bin/time"
linux-openssl-static-binaries:
  after_script:
    - |
      set +e # Do not fail in the after_script, try to do as much as possible instead.
      echo -e "\033[0;31m"
      echo -e "************************************************************************"
      echo -e "*** NEED BAZEL HELP? See go/bazel-guide and #project-bazel           ***"
      echo -e "*** (NEW) To regenerate Cargo Bazel lockfiles run ./bin/bazel-pin.sh ***"
      echo -e "************************************************************************"
      echo -e "\033[0m"
    - cp -R "$(realpath bazel-testlogs)" bazel-testlogs-gitlab
    - gzip bazel-build-log*.json
    - |
      echo -e "\e[0Ksection_start:$(date +%s):bazel_exporter_logs[collapsed=true]\r\e[0KClick to see Bazel exporter logs"
      bazel run //bazel/exporter:exporter --build_event_binary_file= -- -f "$(pwd)/bazel-bep.pb"
      echo -e "\e[0Ksection_end:$(date +%s):bazel_exporter_logs\r\e[0K"
    - |
      if [ "$(uname)" == "Linux" ]; then
          bazel clean --expunge
      fi
    - - |
        # Start the after_script section
        echo -e "\e[0Ksection_start:$(date +%s):after_script[collapsed=true]\r\e[0KClick here to see the after_script section. It does not affect the job success status"

        # Export all the environmental variables so that the GITLAB configured variables are available to after_script.sh
        export ROOT_PIPELINE_ID=${PARENT_PIPELINE_ID:-$CI_PIPELINE_ID}
        buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" after-script -- "${CI_PROJECT_DIR}"/gitlab-ci/src/after_script/after_script.sh

        rm -rf "${CI_PROJECT_DIR}/target"

        # Finish and collapse the after_script section
        echo -e "\e[0Ksection_end:$(date +%s):after_script\r\e[0K"
  artifacts:
    expire_in: 3 days
    paths:
      - bazel-build-log*.json*
      - bazel-bep.pb
    reports:
      junit:
        - bazel-testlogs-gitlab/**/test.xml
    when: always
  extends:
    - ".bazel-test-all"
    - ".bazel-rules-pipeline-no-merge-train"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE != "merge_train" && $CI_MERGE_REQUEST_TITLE =~ /\bhotfix\b/i
      variables:
        BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE != "merge_train"
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
  script:
    - "./gitlab-ci/src/bazel-ci/main.sh"
  tags:
    - dfinity-ic
    - zh
  variables:
    BAZEL_CI_CONFIG: "--config=ci"
    BAZEL_COMMAND: build
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel"
    BAZEL_STARTUP_ARGS: "--output_base=/var/tmp/bazel-output/"
    BAZEL_TARGETS: "//publish/binaries:upload"
    DFINITY_OPENSSL_STATIC: 1
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    SHELL_WRAPPER: "/usr/bin/time"
macos-openssl-static-binaries:
  after_script:
    - |
      set +e # Do not fail in the after_script, try to do as much as possible instead.
      echo -e "\033[0;31m"
      echo -e "************************************************************************"
      echo -e "*** NEED BAZEL HELP? See go/bazel-guide and #project-bazel           ***"
      echo -e "*** (NEW) To regenerate Cargo Bazel lockfiles run ./bin/bazel-pin.sh ***"
      echo -e "************************************************************************"
      echo -e "\033[0m"
    - cp -R "$(realpath bazel-testlogs)" bazel-testlogs-gitlab
    - gzip bazel-build-log*.json
    - |
      echo -e "\e[0Ksection_start:$(date +%s):bazel_exporter_logs[collapsed=true]\r\e[0KClick to see Bazel exporter logs"
      bazel run //bazel/exporter:exporter --build_event_binary_file= -- -f "$(pwd)/bazel-bep.pb"
      echo -e "\e[0Ksection_end:$(date +%s):bazel_exporter_logs\r\e[0K"
    - |
      if [ "$(uname)" == "Linux" ]; then
          bazel clean --expunge
      fi
    - - |
        # Start the after_script section
        echo -e "\e[0Ksection_start:$(date +%s):after_script[collapsed=true]\r\e[0KClick here to see the after_script section. It does not affect the job success status"

        # Export all the environmental variables so that the GITLAB configured variables are available to after_script.sh
        export ROOT_PIPELINE_ID=${PARENT_PIPELINE_ID:-$CI_PIPELINE_ID}
        buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" after-script -- "${CI_PROJECT_DIR}"/gitlab-ci/src/after_script/after_script.sh

        rm -rf "${CI_PROJECT_DIR}/target"

        # Finish and collapse the after_script section
        echo -e "\e[0Ksection_end:$(date +%s):after_script\r\e[0K"
  artifacts:
    expire_in: 3 days
    paths:
      - bazel-build-log*.json*
      - bazel-bep.pb
    reports:
      junit:
        - bazel-testlogs-gitlab/**/test.xml
    when: always
  extends:
    - ".build-env-base"
    - ".bazel-test-all"
    - ".bazel-rules-pipeline-no-merge-train"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE != "merge_train" && $CI_MERGE_REQUEST_TITLE =~ /\bhotfix\b/i
      variables:
        BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE != "merge_train"
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
  script:
    - - "./gitlab-ci/src/bazel-ci/main.sh"
    - |
      # check replica
      if ! bazel run --config macos_ci //publish/binaries:replica -- --print-sample-config --replica-version 1 >/dev/null; then
        BIN=$(bazel cquery --output=files //publish/binaries:replica)
        otool -L "$BIN"
        exit 1
      fi
      # check ic-starter
      if ! bazel run --config macos_ci //publish/binaries:ic-starter -- --version; then
        BIN=$(bazel cquery --output=files //publish/binaries:ic-starter)
        otool -L "$BIN"
        exit 1
      fi
  tags:
    - macos
  variables:
    BAZEL_CI_CONFIG: "--config=ci"
    BAZEL_COMMAND: build
    BAZEL_EXTRA_ARGS: "--config macos_ci"
    BAZEL_STARTUP_ARGS: "--output_base /var/tmp/bazel-output//${CI_CONCURRENT_ID}"
    BAZEL_TARGETS: "//publish/binaries:upload"
    DFINITY_OPENSSL_STATIC: 1
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    SHELL_WRAPPER: "/usr/bin/time"
maximum-capacity-boundary-nodes-queries:
  artifacts:
    expire_in: 3 days
    paths:
      - scalability/
    when: always
  dependencies: []
  extends: ".benchmark-test"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  resource_group: "$TESTNET"
  rules:
    - allow_failure: true
      if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~ /\[benchmark\]/
      when: manual
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "BENCHMARK_SUITE"
      when: always
  script:
    - |-
      set -eExou pipefail
      git fetch
      GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")

      $SHELL_WRAPPER timeout 1h ./testnet/tools/icos_deploy.sh $TESTNET --git-revision "$GIT_REVISION" --boundary-dev-image
      cd ./scalability

      $SHELL_WRAPPER python3 experiments/run_boundary_node_baseline_experiment.py --testnet $TESTNET --wg_subnet 2 --wg_testnet $TESTNET --targets https://"$TESTNET".testnet.dfinity.network --use_updates=False --no_instrument=True --datapoints=100~2000~5000

      TIMESTAMP=$(find results/"$GIT_REVISION" -maxdepth 1 -mindepth 1 -type d -printf "%f\n" | sort -nr | head -1)
      $SHELL_WRAPPER python3 common/generate_report.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP"

      find . -name  'workload-generator*stderr.txt' -print0 | xargs -0 pigz

      $SHELL_WRAPPER rclone --config="${CI_PROJECT_DIR}/.rclone.conf"  copyto "results/$GIT_REVISION" "performance-testing:performance-testing-results/$GIT_REVISION"
      cd -
  tags:
    - dfinity-ic
  timeout: 3 hours
  variables:
    CURRENT_BRANCH: "$CI_COMMIT_REF_NAME"
    DISKIMG_BRANCH: "${CI_COMMIT_SHA}"
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic -C link-arg=-s"
    SHELL_WRAPPER: "/usr/bin/time"
    TESTNET: cdslo
maximum-capacity-canister-http:
  artifacts:
    expire_in: 3 days
    paths:
      - scalability/
    when: always
  dependencies: []
  extends: ".benchmark-test"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  resource_group: "$TESTNET"
  rules:
    - allow_failure: true
      if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~ /\[benchmark\]/
      when: manual
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "BENCHMARK_SUITE"
      when: always
  script:
    - |
      set -eExou pipefail
      git fetch
      GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")

      echo '{"test_ledger_accounts":["b3gus-edhie-77egn-fejju-pt4xd-zz2pt-7v22l-rrts4-a3ebi-fcm4d-wae"]}' > test-accounts.json
      export TESTNET_LOG="testnet_deployment.log"
      $SHELL_WRAPPER timeout 1h ./testnet/tools/icos_deploy.sh "$TESTNET" --git-revision "$GIT_REVISION" --no-boundary-nodes  --ansible-args "-e @$PWD/test-accounts.json" &> $TESTNET_LOG

      # Obtains nns_node URL
      NNS_URL=$(grep "NNS_URL" "$TESTNET_LOG" | tail -1 | grep -o -P '(?<=http).*(?=8080)' | sed 's/$/8080/' | sed 's/^/http/')
      echo "$NNS_URL" > nns_url.log
      echo "Obtained NNS subnet URL: $NNS_URL"

      # Enables http_request feature on subnet
      "$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/rclone_download.py \
          --git-rev="$GIT_REVISION" --remote-path="release" \
          --out="artifacts/release"
      pigz -d "${CI_PROJECT_DIR}/artifacts/release/ic-admin.gz"
      chmod u+x "${CI_PROJECT_DIR}/artifacts/release/ic-admin"
      ln -sf "${CI_PROJECT_DIR}/artifacts/release/ic-admin" ic-admin
      "${CI_PROJECT_DIR}/artifacts/release/ic-admin" --nns-url="$NNS_URL" propose-to-update-subnet --features http_requests --subnet 1 --test-neuron-proposer --summary "Updating a subnet"

      cd ./scalability

      $SHELL_WRAPPER python3 experiments/run_mixed_workload_experiment.py --testnet "$TESTNET" --wg_testnet "$TESTNET" --wg_subnet 2 --initial_rps=50 --increment_rps=50 --target_rps=150 --max_rps=400 --workload workloads/canister-http-benchmark.toml

      TIMESTAMP=$(find results/"$GIT_REVISION" -maxdepth 1 -mindepth 1 -type d -printf "%f\n" | sort -nr | head -1)
      $SHELL_WRAPPER python3 common/generate_report.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP"

      find . -name  'workload-generator*stderr.txt' -print0 | xargs -0 pigz
      cd -

      $SHELL_WRAPPER rclone --config="${CI_PROJECT_DIR}/.rclone.conf"  copyto "scalability/results/$GIT_REVISION" "performance-testing:performance-testing-results/$GIT_REVISION"
  tags:
    - dfinity-ic
  timeout: 3 hours
  variables:
    CURRENT_BRANCH: "$CI_COMMIT_REF_NAME"
    DISKIMG_BRANCH: "${CI_COMMIT_SHA}"
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic -C link-arg=-s"
    SHELL_WRAPPER: "/usr/bin/time"
    TESTNET: cdslo
maximum-capacity-large-memory-query:
  artifacts:
    expire_in: 3 days
    paths:
      - scalability/
    when: always
  dependencies: []
  extends: ".benchmark-test"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  resource_group: "$TESTNET"
  rules:
    - allow_failure: true
      if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~ /\[benchmark\]/
      when: manual
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "BENCHMARK_SUITE"
      when: always
  script:
    - |
      set -eExou pipefail
      git fetch
      GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")

      $SHELL_WRAPPER timeout 1h ./testnet/tools/icos_deploy.sh $TESTNET --git-revision "$GIT_REVISION" --no-boundary-nodes
      cd ./scalability

      $SHELL_WRAPPER python3 experiments/run_large_memory_experiment.py --testnet $TESTNET --wg_subnet 2 --wg_testnet $TESTNET --initial_rps=20 --increment_rps=5 --target_rps=160 --max_rps=1000

      TIMESTAMP=$(find results/"$GIT_REVISION" -maxdepth 1 -mindepth 1 -type d -printf "%f\n" | sort -nr | head -1)
      $SHELL_WRAPPER python3 common/generate_report.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP"

      find . -name  'workload-generator*stderr.txt' -print0 | xargs -0 pigz
      cd -

      $SHELL_WRAPPER rclone --config="${CI_PROJECT_DIR}/.rclone.conf"  copyto "scalability/results/$GIT_REVISION" "performance-testing:performance-testing-results/$GIT_REVISION"
  tags:
    - dfinity-ic
  timeout: 3 hours
  variables:
    CURRENT_BRANCH: "$CI_COMMIT_REF_NAME"
    DISKIMG_BRANCH: "${CI_COMMIT_SHA}"
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic -C link-arg=-s"
    SHELL_WRAPPER: "/usr/bin/time"
    TESTNET: cdslo
maximum-capacity-large-memory-update:
  artifacts:
    expire_in: 3 days
    paths:
      - scalability/
    when: always
  dependencies: []
  extends: ".benchmark-test"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  resource_group: "$TESTNET"
  rules:
    - allow_failure: true
      if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~ /\[benchmark\]/
      when: manual
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "BENCHMARK_SUITE"
      when: always
  script:
    - |
      set -eExou pipefail
      git fetch
      GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")

      $SHELL_WRAPPER timeout 1h ./testnet/tools/icos_deploy.sh $TESTNET --git-revision "$GIT_REVISION" --no-boundary-nodes
      cd ./scalability

      $SHELL_WRAPPER python3 experiments/run_large_memory_experiment.py --testnet $TESTNET --wg_subnet 2 --wg_testnet $TESTNET --use_updates=True --datapoints=20,35,50,55,100,150

      TIMESTAMP=$(find results/"$GIT_REVISION" -maxdepth 1 -mindepth 1 -type d -printf "%f\n" | sort -nr | head -1)
      $SHELL_WRAPPER python3 common/generate_report.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP"

      find . -name  'workload-generator*stderr.txt' -print0 | xargs -0 pigz
      cd -

      $SHELL_WRAPPER rclone --config="${CI_PROJECT_DIR}/.rclone.conf"  copyto "scalability/results/$GIT_REVISION" "performance-testing:performance-testing-results/$GIT_REVISION"
  tags:
    - dfinity-ic
  timeout: 3 hours
  variables:
    CURRENT_BRANCH: "$CI_COMMIT_REF_NAME"
    DISKIMG_BRANCH: "${CI_COMMIT_SHA}"
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic -C link-arg=-s"
    SHELL_WRAPPER: "/usr/bin/time"
    TESTNET: cdslo
maximum-capacity-mixed-counter-memory:
  artifacts:
    expire_in: 3 days
    paths:
      - scalability/
    when: always
  dependencies: []
  extends: ".benchmark-test"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  resource_group: "$TESTNET"
  rules:
    - allow_failure: true
      if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~ /\[benchmark\]/
      when: manual
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "BENCHMARK_SUITE"
      when: always
  script:
    - |
      set -eExou pipefail
      git fetch
      GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")

      $SHELL_WRAPPER timeout 1h ./testnet/tools/icos_deploy.sh $TESTNET --git-revision "$GIT_REVISION" --no-boundary-nodes
      cd ./scalability

      # These are equivalent to maximum-capacity-large-memory-update.
      # We just run the counter canister alongside it.
      # Might mean that we don't need maximum-capacity-large-memory-update any longer.
      $SHELL_WRAPPER python3 experiments/run_mixed_workload_experiment.py --testnet $TESTNET --wg_subnet 2 --wg_testnet $TESTNET --workload workloads/mixed-memory-counter.toml --initial_rps=10 --increment_rps=5 --target_rps=25 --max_rps=500

      TIMESTAMP=$(find results/"$GIT_REVISION" -maxdepth 1 -mindepth 1 -type d -printf "%f\n" | sort -nr | head -1)
      $SHELL_WRAPPER python3 common/generate_report.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP"

      find . -name  'workload-generator*stderr.txt' -print0 | xargs -0 pigz
      cd -

      $SHELL_WRAPPER rclone --config="${CI_PROJECT_DIR}/.rclone.conf"  copyto "scalability/results/$GIT_REVISION" "performance-testing:performance-testing-results/$GIT_REVISION"
  tags:
    - dfinity-ic
  timeout: 3 hours
  variables:
    CURRENT_BRANCH: "$CI_COMMIT_REF_NAME"
    DISKIMG_BRANCH: "${CI_COMMIT_SHA}"
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic -C link-arg=-s"
    SHELL_WRAPPER: "/usr/bin/time"
    TESTNET: cdslo
maximum-capacity-mixed-workloads:
  artifacts:
    expire_in: 3 days
    paths:
      - scalability/
    when: always
  dependencies: []
  extends: ".benchmark-test"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  resource_group: "$TESTNET"
  rules:
    - allow_failure: true
      if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~ /\[benchmark\]/
      when: manual
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "BENCHMARK_SUITE"
      when: always
  script:
    - |
      set -eExou pipefail
      git fetch
      GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")

      $SHELL_WRAPPER timeout 1h ./testnet/tools/icos_deploy.sh $TESTNET --git-revision "$GIT_REVISION" --no-boundary-nodes
      cd ./scalability

      $SHELL_WRAPPER python3 experiments/run_mixed_workload_experiment.py --testnet $TESTNET --wg_subnet 2 --wg_testnet $TESTNET --workload workloads/mixed-query-update.toml --initial_rps=20 --increment_rps=5 --target_rps=160 --max_rps=1000

      TIMESTAMP=$(find results/"$GIT_REVISION" -maxdepth 1 -mindepth 1 -type d -printf "%f\n" | sort -nr | head -1)
      $SHELL_WRAPPER python3 common/generate_report.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP"

      find . -name  'workload-generator*stderr.txt' -print0 | xargs -0 pigz
      cd -

      $SHELL_WRAPPER rclone --config="${CI_PROJECT_DIR}/.rclone.conf"  copyto "scalability/results/$GIT_REVISION" "performance-testing:performance-testing-results/$GIT_REVISION"
  tags:
    - dfinity-ic
  timeout: 3 hours
  variables:
    CURRENT_BRANCH: "$CI_COMMIT_REF_NAME"
    DISKIMG_BRANCH: "${CI_COMMIT_SHA}"
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic -C link-arg=-s"
    SHELL_WRAPPER: "/usr/bin/time"
    TESTNET: cdslo
maximum-capacity-multiple-large-memory-update:
  artifacts:
    expire_in: 3 days
    paths:
      - scalability/
    when: always
  dependencies: []
  extends: ".benchmark-test"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  resource_group: "$TESTNET"
  rules:
    - allow_failure: true
      if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~ /\[benchmark\]/
      when: manual
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "BENCHMARK_SUITE"
      when: always
  script:
    - |
      set -eExou pipefail
      git fetch
      GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")

      $SHELL_WRAPPER timeout 1h ./testnet/tools/icos_deploy.sh $TESTNET --git-revision "$GIT_REVISION" --no-boundary-nodes
      cd ./scalability

      $SHELL_WRAPPER python3 experiments/run_large_memory_experiment.py --testnet $TESTNET --wg_subnet 2 --wg_testnet $TESTNET --use_updates=True --initial_rps=20 --increment_rps=10 --target_rps=25 --max_rps=100 --num_canisters 15 --payload_size 5000000 --use_updates=True --iter_duration 900

      TIMESTAMP=$(find results/"$GIT_REVISION" -maxdepth 1 -mindepth 1 -type d -printf "%f\n" | sort -nr | head -1)
      $SHELL_WRAPPER python3 common/generate_report.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP"

      find . -name  'workload-generator*stderr.txt' -print0 | xargs -0 pigz
      cd -

      $SHELL_WRAPPER rclone --config="${CI_PROJECT_DIR}/.rclone.conf"  copyto "scalability/results/$GIT_REVISION" "performance-testing:performance-testing-results/$GIT_REVISION"
  tags:
    - dfinity-ic
  timeout: 3 hours
  variables:
    CURRENT_BRANCH: "$CI_COMMIT_REF_NAME"
    DISKIMG_BRANCH: "${CI_COMMIT_SHA}"
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic -C link-arg=-s"
    SHELL_WRAPPER: "/usr/bin/time"
    TESTNET: cdslo
maximum-capacity-qr:
  artifacts:
    expire_in: 3 days
    paths:
      - scalability/
    when: always
  dependencies: []
  extends: ".benchmark-test"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  resource_group: "$TESTNET"
  rules:
    - allow_failure: true
      if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~ /\[benchmark\]/
      when: manual
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "BENCHMARK_SUITE"
      when: always
  script:
    - |
      set -eExou pipefail
      git fetch
      GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")

      $SHELL_WRAPPER timeout 1h ./testnet/tools/icos_deploy.sh $TESTNET --git-revision "$GIT_REVISION" --no-boundary-nodes
      cd ./scalability

      $SHELL_WRAPPER experiments/run_mixed_workload_experiment.py --testnet $TESTNET --wg_subnet 2 --wg_testnet $TESTNET --workload workloads/qr.toml --initial_rps=10 --increment_rps=5 --target_rps=25 --max_rps=150

      TIMESTAMP=$(find results/"$GIT_REVISION" -maxdepth 1 -mindepth 1 -type d -printf "%f\n" | sort -nr | head -1)
      $SHELL_WRAPPER python3 common/generate_report.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP"

      find . -name  'workload-generator*stderr.txt' -print0 | xargs -0 pigz
      cd -

      $SHELL_WRAPPER rclone --config="${CI_PROJECT_DIR}/.rclone.conf"  copyto "scalability/results/$GIT_REVISION" "performance-testing:performance-testing-results/$GIT_REVISION"
  tags:
    - dfinity-ic
  timeout: 3 hours
  variables:
    CURRENT_BRANCH: "$CI_COMMIT_REF_NAME"
    DISKIMG_BRANCH: "${CI_COMMIT_SHA}"
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic -C link-arg=-s"
    SHELL_WRAPPER: "/usr/bin/time"
    TESTNET: cdslo
maximum-capacity-sha256:
  artifacts:
    expire_in: 3 days
    paths:
      - scalability/
    when: always
  dependencies: []
  extends: ".benchmark-test"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  resource_group: "$TESTNET"
  rules:
    - allow_failure: true
      if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~ /\[benchmark\]/
      when: manual
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "BENCHMARK_SUITE"
      when: always
  script:
    - |
      set -eExou pipefail
      git fetch
      GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")

      $SHELL_WRAPPER timeout 1h ./testnet/tools/icos_deploy.sh $TESTNET --git-revision "$GIT_REVISION" --no-boundary-nodes
      cd ./scalability

      $SHELL_WRAPPER experiments/run_mixed_workload_experiment.py --testnet $TESTNET --wg_subnet 2 --wg_testnet $TESTNET --workload workloads/sha256.toml --initial_rps=10 --increment_rps=5 --target_rps=25 --max_rps=150

      TIMESTAMP=$(find results/"$GIT_REVISION" -maxdepth 1 -mindepth 1 -type d -printf "%f\n" | sort -nr | head -1)
      $SHELL_WRAPPER python3 common/generate_report.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP"

      find . -name  'workload-generator*stderr.txt' -print0 | xargs -0 pigz
      cd -

      $SHELL_WRAPPER rclone --config="${CI_PROJECT_DIR}/.rclone.conf"  copyto "scalability/results/$GIT_REVISION" "performance-testing:performance-testing-results/$GIT_REVISION"
  tags:
    - dfinity-ic
  timeout: 3 hours
  variables:
    CURRENT_BRANCH: "$CI_COMMIT_REF_NAME"
    DISKIMG_BRANCH: "${CI_COMMIT_SHA}"
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic -C link-arg=-s"
    SHELL_WRAPPER: "/usr/bin/time"
    TESTNET: cdslo
maximum-capacity-system-baseline-query:
  artifacts:
    expire_in: 3 days
    paths:
      - scalability/
    when: always
  dependencies: []
  extends: ".benchmark-test"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  resource_group: "$TESTNET"
  rules:
    - allow_failure: true
      if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~ /\[benchmark\]/
      when: manual
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "BENCHMARK_SUITE"
      when: always
  script:
    - |
      set -eExou pipefail
      git fetch
      GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")

      $SHELL_WRAPPER timeout 1h ./testnet/tools/icos_deploy.sh $TESTNET --git-revision "$GIT_REVISION" --no-boundary-nodes
      cd ./scalability

      # First run, no caching
      # -------------------------------------------------

      $SHELL_WRAPPER python3 experiments/run_system_baseline_experiment.py --use_random_payload=True --num_canisters 2 --testnet $TESTNET --wg_subnet 2 --wg_testnet $TESTNET --datapoints 100,3500,4500,5500,7500,12000,17200,40000

      TIMESTAMP=$(find results/"$GIT_REVISION" -maxdepth 1 -mindepth 1 -type d -printf "%f\n" | sort -nr | head -1)
      $SHELL_WRAPPER python3 common/generate_report.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP"

      # Allow the system some time to recover from previous benchmark
      sleep 60

      # Second run, with caching
      # -------------------------------------------------

      $SHELL_WRAPPER python3 experiments/run_system_baseline_experiment.py --num_canisters 2 --testnet $TESTNET --wg_subnet 2 --wg_testnet $TESTNET --datapoints 100,3500,4500,5500,7500,12000,17200,40000

      TIMESTAMP=$(find results/"$GIT_REVISION" -maxdepth 1 -mindepth 1 -type d -printf "%f\n" | sort -nr | head -1)
      $SHELL_WRAPPER python3 common/generate_report.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP"

      find . -name  'workload-generator*stderr.txt' -print0 | xargs -0 pigz
      cd -

      # Upload results from both run (the entire folder of that GIT revision)
      $SHELL_WRAPPER rclone --config="${CI_PROJECT_DIR}/.rclone.conf"  copyto "scalability/results/$GIT_REVISION" "performance-testing:performance-testing-results/$GIT_REVISION"
  tags:
    - dfinity-ic
  timeout: 3 hours
  variables:
    CURRENT_BRANCH: "$CI_COMMIT_REF_NAME"
    DISKIMG_BRANCH: "${CI_COMMIT_SHA}"
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic -C link-arg=-s"
    SHELL_WRAPPER: "/usr/bin/time"
    TESTNET: cdslo
maximum-capacity-system-baseline-update:
  artifacts:
    expire_in: 3 days
    paths:
      - scalability/
    when: always
  dependencies: []
  extends: ".benchmark-test"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  resource_group: "$TESTNET"
  rules:
    - allow_failure: true
      if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~ /\[benchmark\]/
      when: manual
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "BENCHMARK_SUITE"
      when: always
  script:
    - |
      set -eExou pipefail
      git fetch
      GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")

      $SHELL_WRAPPER timeout 1h ./testnet/tools/icos_deploy.sh $TESTNET --git-revision "$GIT_REVISION" --no-boundary-nodes
      cd ./scalability

      $SHELL_WRAPPER python3 experiments/run_system_baseline_experiment.py --testnet $TESTNET --wg_subnet 2 --wg_testnet $TESTNET --use_updates=True --initial_rps=100 --increment_rps=20 --target_rps=800 --max_rps=2000

      TIMESTAMP=$(find results/"$GIT_REVISION" -maxdepth 1 -mindepth 1 -type d -printf "%f\n" | sort -nr | head -1)
      $SHELL_WRAPPER python3 common/generate_report.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP"

      find . -name  'workload-generator*stderr.txt' -print0 | xargs -0 pigz
      cd -

      $SHELL_WRAPPER rclone --config="${CI_PROJECT_DIR}/.rclone.conf"  copyto "scalability/results/$GIT_REVISION" "performance-testing:performance-testing-results/$GIT_REVISION"
  tags:
    - dfinity-ic
  timeout: 3 hours
  variables:
    CURRENT_BRANCH: "$CI_COMMIT_REF_NAME"
    DISKIMG_BRANCH: "${CI_COMMIT_SHA}"
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic -C link-arg=-s"
    SHELL_WRAPPER: "/usr/bin/time"
    TESTNET: cdslo
nns-state-deployment-test-nightly:
  allow_failure: true
  artifacts:
    expire_in: 3 days
    paths:
      - "$CI_JOB_STAGE/$CI_JOB_NAME"
    when: always
  dependencies: []
  extends: ".prod-nightly-test-group-2"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs: []
  resource_group: "$TESTNET2"
  rules:
    - allow_failure: true
      if: "$CD_ENV == $cd_target_env && $CI_COMMIT_BRANCH =~ /^rc--/ && $CI_COMMIT_MESSAGE =~ /hotfix/i"
      when: manual
    - allow_failure: true
      if: "$CD_ENV == $cd_target_env && $CI_MERGE_REQUEST_TITLE =~ /\\[rc\\]/"
      when: manual
    - allow_failure: true
      if: $CI_PIPELINE_SOURCE == "web" && $CD_ENV != "BENCHMARK_SUITE"
      when: manual
    - if: $CD_ENV == $cd_target_env && ($DEBUG_PIPELINE != "true" || $cd_debug_target == "true") && $CD_ENV != "BENCHMARK_SUITE"
      when: always
  script:
    - |
      set -eExou pipefail
      if [[ -z "$TESTNET2" ]]; then echo "Please set the TESTNET2 environment variable for proper resource_group locking"; exit 1; fi
      git fetch
      GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")
      export GIT_REVISION
      $SHELL_WRAPPER timeout 1h ./testnet/tests/scripts/nns_state_deployment_test.sh "$TESTNET" "$CI_JOB_STAGE/$CI_JOB_NAME"
  tags:
    - dfinity-ic
  timeout: 3 hours
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic -C link-arg=-s"
    SHELL_WRAPPER: "/usr/bin/time"
    TESTNET: "$TESTNET2"
    cd_debug_target: 'true'
    cd_target_env: NIGHTLY
no-interrupt:
  artifacts:
    expire_in: 3 days
    paths:
      - junit_data/*
      - coredumps/*.txt
      - coredumps/*.gz
    when: always
  extends:
    - ".ubuntu-cargo-k8s"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  interruptible: false
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - echo "This pipeline is not interruptible"
  tags:
    - dfinity-ic
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic -C link-arg=-s"
    SHELL_WRAPPER: "/usr/bin/time"
notify-gitlab-failure:
  artifacts:
    expire_in: 3 days
    paths:
      - junit_data/*
      - coredumps/*.txt
      - coredumps/*.gz
    when: always
  dependencies: []
  extends:
    - ".ubuntu-cargo-k8s"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
      when: on_failure
  script:
    - "echo \"notify gitlab failure\"\nif [[ \"${CI_COMMIT_MESSAGE,,}\" =~ hotfix ]]; then\n    MESSAGE=\"✘ Hotfix pipeline <$CI_PIPELINE_URL|$CI_COMMIT_REF_NAME> failed. \U0001F336\U0001F336\U0001F336\"\nelse\n    MESSAGE=\"❌ Release candidate pipeline <$CI_PIPELINE_URL|$CI_COMMIT_REF_NAME> failed. \U0001F62D\U0001F62D\U0001F62D\"\nfi\ncd \"${CI_PROJECT_DIR}/gitlab-ci/src\" || true\nbuildevents cmd \"$ROOT_PIPELINE_ID\" \"$CI_JOB_ID\" notify-slack -- notify_slack/notify_slack.py \\\n    \"${MESSAGE}\" --channel \"release-management-alerts\"\n"
  stage: finalize
  tags:
    - dfinity-ic
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic -C link-arg=-s"
    SHELL_WRAPPER: "/usr/bin/time"
notify-gitlab-success:
  artifacts:
    expire_in: 3 days
    paths:
      - junit_data/*
      - coredumps/*.txt
      - coredumps/*.gz
    when: always
  dependencies: []
  extends:
    - ".ubuntu-cargo-k8s"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: on_success
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
      when: on_success
  script:
    - "# TODO(IDX-2856): remove this top level \"if\" whe we will not need to run the job for shedule pipelines.\nif [[ \"$CI_PIPELINE_SOURCE\" == \"push\" ]] && [[ \"$CI_COMMIT_REF_NAME\" =~ ^rc--.* ]]; then\n  if [[ \"${CI_COMMIT_MESSAGE,,}\" =~ hotfix ]]; then\n      MESSAGE=\"✔ Hotfix pipeline <$CI_PIPELINE_URL|$CI_COMMIT_REF_NAME> succeeded. \U0001FAD1\U0001FAD1\U0001FAD1\"\n  else\n      MESSAGE=\"✅ Release candidate pipeline <$CI_PIPELINE_URL|$CI_COMMIT_REF_NAME> succeeded. \U0001F389\U0001F389\U0001F389\"\n  fi\n  cd \"${CI_PROJECT_DIR}/gitlab-ci/src\" || true\n  buildevents cmd \"$ROOT_PIPELINE_ID\" \"$CI_JOB_ID\" notify-slack -- notify_slack/notify_slack.py \\\n    \"${MESSAGE}\" --channel \"release-management-alerts\"\nfi\n"
  stage: finalize
  tags:
    - dfinity-ic
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic -C link-arg=-s"
    SHELL_WRAPPER: "/usr/bin/time"
pre-commit:
  artifacts:
    expire_in: 3 days
    paths:
      - junit_data/*
      - coredumps/*.txt
      - coredumps/*.gz
    when: always
  extends:
    - ".bazel-build-k8s"
    - ".bazel-rules-pipeline"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE == "merge_train"
      variables:
        BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate --flaky_test_attempts=3"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~ /\bhotfix\b/i
      variables:
        BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
  script:
    - |
      set -eEuo pipefail

      rustup default stable

      # Make sure CI can pull from the private repo.
      if ! SKIP=bazel_rust_format_check,bazel_smoke pre-commit run -a --hook-stage=manual ; then
        echo "Pre-commit checks failed. Here is the diff of the changes:"
        git diff
        echo
        echo "You can fix the code locally by following these instructions in the same branch."
        echo
        echo "install pre-commit by following https://pre-commit.com/#installation:"
        echo "(brew|pip) install pre-commit"
        echo "pre-commit install"
        echo
        echo "Then, to fix the checks in this branch, run:"
        echo "pre-commit run --from-ref=\$(git merge-base HEAD master) --to-ref=HEAD"
        echo
        echo "And then commit the changes."
        exit 1
      fi
  tags:
    - dfinity-ic
  variables:
    BAZEL_CI_CONFIG: "--config=ci"
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel"
    BAZEL_STARTUP_ARGS: "--output_base=/var/tmp/bazel-output/"
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    PRE_COMMIT_HOME: "/cache/pre-commit/$CI_CONCURRENT_ID"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    SHELL_WRAPPER: "/usr/bin/time"
prod-nightly-pipeline:
  extends: ".rules-rollout-pipeline-auto"
  rules:
    - allow_failure: true
      if: $CI_COMMIT_BRANCH =~ /^rc--/ && $CI_COMMIT_MESSAGE =~ /hotfix/i && $CI_PIPELINE_SOURCE != "trigger"
      when: manual
    - if: $CI_COMMIT_BRANCH =~ /^rc--/ && $CI_PIPELINE_SOURCE != "trigger"
      when: always
    - allow_failure: true
      if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: manual
    - allow_failure: true
      if: $CI_PIPELINE_SOURCE == "trigger"
      when: manual
  trigger:
    include:
      - local: gitlab-ci/config/child-pipeline--prod.yml
    strategy: depend
  variables:
    CD_ENV: NIGHTLY
    DISKIMG_BRANCH: "${CI_COMMIT_SHA}"
    PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"
    TESTNET1: cdnightly
    TESTNET2: cdrc01
    TESTNET3: cdrc02
    TESTNET4: cdrc03
    TESTNET5: cdrc04
prod-nightly-triggered:
  extends: ".rules-rollout-pipeline-run-on-trigger"
  needs: []
  rules:
    - allow_failure: true
      if: $CI_PIPELINE_SOURCE == "trigger"
      when: manual
  trigger:
    include:
      - local: gitlab-ci/config/child-pipeline--prod.yml
    strategy: depend
  variables:
    CD_ENV: NIGHTLY
    DISKIMG_BRANCH: "${CI_COMMIT_SHA}"
    PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"
    TESTNET1: cdnightly
    TESTNET2: cdrc01
    TESTNET3: cdrc02
    TESTNET4: cdrc03
    TESTNET5: cdrc04
python-gitlab-ci-tests:
  artifacts:
    expire_in: 3 days
    paths:
      - gitlab-ci/src/htmlcov
    reports:
      junit:
        - test_report.xml
    when: always
  extends:
    - ".ubuntu-k8s"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE != "merge_train" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
  script:
    - |
      set -xeuo pipefail
      cd gitlab-ci/src
      pytest -v -o junit_family=xunit1 --junitxml=../../test_report.xml --cov=. --cov-report=term --cov-report=term-missing --cov-report=html --cov-branch
  tags:
    - dfinity-ic
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    PYTHONPATH: "${CI_PROJECT_DIR}/gitlab-ci/src:${CI_PROJECT_DIR}/gitlab-ci/src/dependencies"
    SHELL_WRAPPER: "/usr/bin/time"
release-boundary-node-service-worker:
  artifacts:
    expire_in: 3 days
    paths:
      - junit_data/*
      - coredumps/*.txt
      - coredumps/*.gz
    when: always
  extends:
    - ".build-k8s"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs:
    - boundary-node-service-worker
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_TAG =~ /^service-worker_v([0-9\.]+)$/
  script:
    - |
      set -eExuo pipefail
      # shellcheck disable=SC1090
      source "$NVM_DIR/nvm.sh"
      nvm use 18
      node --version
      npm --version

      # download previously built artifact (during merge commit pipeline)
      GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/find-build-id.sh)
      "$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/rclone_download.py \
        --git-rev="${GIT_REVISION}" --remote-path="service-worker" \
        --out="typescript/service-worker/artifacts"

      (
        cd typescript/service-worker
        if [[ $CI_COMMIT_TAG =~ ^service-worker_v([0-9\.]+)$ ]]; then
          TAG_VERSION="${BASH_REMATCH[1]}"
        else
          echo "could not parse version from commit tag $CI_COMMIT_TAG"
          echo "check CI configuration, this job should not be run for malformed tags!"
          exit 1
        fi

        # verify the source version matches the tag
        PACKAGE_JSON_VERSION=$(< package.json jq '.version' -r)
        if [  "$PACKAGE_JSON_VERSION" != "$TAG_VERSION" ]; then
          echo "package.json version $PACKAGE_JSON_VERSION does not match tag version $TAG_VERSION"
          exit 1
        fi

        # extracts to folder package
        tar -xf "artifacts/dfinity-service-worker-$TAG_VERSION.tgz"

        # verify the prebuilt package version matches the tag
        PREBUILT_VERSION=$(< package/package.json jq '.version' -r)
        if [  "$PREBUILT_VERSION" != "$TAG_VERSION" ]; then
          echo "version $PREBUILT_VERSION contained in the prebuilt artifact does not match tag version $TAG_VERSION!"
          exit 1
        fi

        printf '%s\n' "//registry.npmjs.org/:_authToken=\${SW_NODE_AUTH_TOKEN}" "registry=https://registry.npmjs.org/" "always-auth=true" >> .npmrc
        npm publish "file:artifacts/dfinity-service-worker-$PACKAGE_JSON_VERSION.tgz" --access public
      )
  tags:
    - dfinity-ic
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
rosetta-api-docker-image:
  artifacts:
    expire_in: 3 days
    paths:
      - junit_data/*
      - coredumps/*.txt
      - coredumps/*.gz
    when: always
  extends:
    - ".bazel-build-k8s"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs:
    - artifacts: false
      job: bazel-test-all
  rules:
    - allow_failure: true
      if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
      when: manual
  script:
    - |
      set -exuo pipefail

      "${CI_PROJECT_DIR}"/gitlab-ci/src/artifacts/rclone_download.py --git-rev "$CI_COMMIT_SHA" \
        --remote-path=release --out="artifacts/release"

      gunzip artifacts/release/ic-rosetta-api.gz
      chmod +x artifacts/release/ic-rosetta-api

      pushd "$(mktemp -d)"
      cp \
        "$CI_PROJECT_DIR"/artifacts/release/ic-rosetta-api \
        "$CI_PROJECT_DIR"/rs/rosetta-api/log_config.yml \
        .
      docker build \
        --build-arg RELEASE="$CI_COMMIT_SHA" \
        -f "$CI_PROJECT_DIR"/rs/rosetta-api/Dockerfile \
        -t dfinity/rosetta-api:"$CI_COMMIT_SHA" \
        .
      popd

      docker run --rm dfinity/rosetta-api:"$CI_COMMIT_SHA" --help

      ROSETTA_API_DATE=$(date +"%Y%m%d")
      ROSETTA_API_VERSION=$(grep -e '^version' "$CI_PROJECT_DIR"/rs/rosetta-api/Cargo.toml | sed -e 's|^version[ ]*=[ ]*"\([^"]*\)"|\1|g')

      docker tag dfinity/rosetta-api:"$CI_COMMIT_SHA" dfinity/rosetta-api:"$ROSETTA_API_DATE"
      docker tag dfinity/rosetta-api:"$CI_COMMIT_SHA" dfinity/rosetta-api:v"$ROSETTA_API_VERSION"
      docker tag dfinity/rosetta-api:"$CI_COMMIT_SHA" dfinity/rosetta-api:latest

      docker login -u "$DOCKER_HUB_USER" -p "$DOCKER_HUB_PASSWORD"

      docker push dfinity/rosetta-api:"$CI_COMMIT_SHA"
      docker push dfinity/rosetta-api:"$ROSETTA_API_DATE"
      docker push dfinity/rosetta-api:v"$ROSETTA_API_VERSION"
      docker push dfinity/rosetta-api:latest
  tags:
    - dfinity-ic
    - zh
  variables:
    BAZEL_CI_CONFIG: "--config=ci"
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel"
    BAZEL_STARTUP_ARGS: "--output_base=/var/tmp/bazel-output/"
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    SHELL_WRAPPER: "/usr/bin/time"
rosetta-release:
  artifacts:
    expire_in: 3 days
    paths:
      - junit_data/*
      - coredumps/*.txt
      - coredumps/*.gz
    when: always
  extends:
    - ".bazel-build-k8s"
    - ".ic-build-image"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  rules:
    - if: $CI_COMMIT_REF_PROTECTED == "true" && $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "rosetta-release"
  script:
    - |
      set -euo pipefail

      docker login -u "$DOCKER_HUB_USER" -p "$DOCKER_HUB_PASSWORD"

      # - Query the current rosetta version
      bazel build //rs/rosetta-api:version
      readonly ROSETTA_RELEASE_VERSION="$(cat "$(bazel cquery --output=files //rs/rosetta-api:version)")"
      readonly VERSION_TAG="v$ROSETTA_RELEASE_VERSION"

      # - Abort the release if the image with that version was already published.
      if docker manifest inspect "dfinity/rosetta-api:$VERSION_TAG"; then
          echo Rosetta version "$ROSETTA_RELEASE_VERSION" is already published on DockerHub
          exit 0
      fi

      # - Build an publish the image
      ROSETTA_API_DATE=$(date +"%Y%m%d")

      for tag in "$VERSION_TAG" "$CI_COMMIT_SHA" "$ROSETTA_API_DATE" latest; do
          bazel run --stamp --embed_label="$tag" //rs/rosetta-api:push_rosetta_image
      done

      # - Tag the commit
      git remote add origin "https://gitlab-ci-token:${GITLAB_API_TOKEN}@gitlab.com/${CI_PROJECT_PATH}.git" || true
      git remote set-url origin "https://gitlab-ci-token:${GITLAB_API_TOKEN}@gitlab.com/${CI_PROJECT_PATH}.git" || true

      git config --global user.email "infra+gitlab-automation@dfinity.org"
      git config --global user.name "IDX GitLab Automation"

      git tag "rosetta-release-$ROSETTA_RELEASE_VERSION" "$CI_COMMIT_SHA"
      git push origin "rosetta-release-$ROSETTA_RELEASE_VERSION"
  tags:
    - dfinity-ic
  variables:
    BAZEL_CI_CONFIG: "--config=ci"
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel"
    BAZEL_STARTUP_ARGS: "--output_base=/var/tmp/bazel-output/"
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    SHELL_WRAPPER: "/usr/bin/time"
stages:
  - ".pre"
  - init
  - test
  - finalize
  - ".post"
statesync-experiment:
  artifacts:
    expire_in: 3 days
    paths:
      - scalability/
    when: always
  dependencies: []
  extends: ".benchmark-test"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  resource_group: "$TESTNET"
  rules:
    - allow_failure: true
      if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~ /\[benchmark\]/
      when: manual
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "BENCHMARK_SUITE"
      when: always
  script:
    - |
      set -eExou pipefail
      git fetch
      GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")

      # Note that this benchmark needs unassigned nodes
      $SHELL_WRAPPER timeout 1h ./testnet/tools/icos_deploy.sh $TESTNET --git-revision "$GIT_REVISION" --dkg-interval-length 14 --no-boundary-nodes
      cd ./scalability

      $SHELL_WRAPPER python3 experiments/run_statesync_experiment.py --testnet $TESTNET

      TIMESTAMP=$(find results/"$GIT_REVISION" -maxdepth 1 -mindepth 1 -type d -printf "%f\n" | sort -nr | head -1)
      $SHELL_WRAPPER python3 common/generate_report.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP"

      cd -

      $SHELL_WRAPPER rclone --config="${CI_PROJECT_DIR}/.rclone.conf"  copyto "scalability/results/$GIT_REVISION" "performance-testing:performance-testing-results/$GIT_REVISION"
  tags:
    - dfinity-ic
  timeout: 3 hours
  variables:
    CURRENT_BRANCH: "$CI_COMMIT_REF_NAME"
    DISKIMG_BRANCH: "${CI_COMMIT_SHA}"
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic -C link-arg=-s"
    SHELL_WRAPPER: "/usr/bin/time"
    TESTNET: cdslo
system-baseline-query-performance-test-nightly:
  artifacts:
    expire_in: 3 days
    paths:
      - scalability/
    when: always
  dependencies: []
  extends: ".benchmark-spot-test"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  resource_group: "$TESTNET"
  rules:
    - allow_failure: true
      if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~ /\[benchmark\]/
      when: manual
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "BENCHMARK_NIGHTLY"
      when: always
  script:
    - |
      set -eExou pipefail
      git fetch

      GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")

      # Note that this benchmark needs unassigned nodes
      $SHELL_WRAPPER timeout 1h ./testnet/tools/icos_deploy.sh $TESTNET --git-revision "$GIT_REVISION" --no-boundary-nodes

      # Run system baseline performance evaluation
      cd ./scalability

      $SHELL_WRAPPER timeout 1h python3 experiments/run_system_baseline_experiment.py --testnet "$TESTNET" --wg_subnet 2 --wg_testnet $TESTNET --iter_duration 300 --target_rps=600  --use_updates=False

      TIMESTAMP=$(find results/"$GIT_REVISION" -maxdepth 1 -mindepth 1 -type d -printf "%f\n" | sort -nr | head -1)
      $SHELL_WRAPPER python3 common/generate_report.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP"
      $SHELL_WRAPPER python3 common/verify_perf.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP" --median_latency_threshold=200

      cd -

      $SHELL_WRAPPER rclone --config="${CI_PROJECT_DIR}/.rclone.conf"  copyto "scalability/results/$GIT_REVISION" "performance-testing:performance-testing-results/$GIT_REVISION"
  tags:
    - dfinity-ic
  timeout: 1 hour
  variables:
    CD_ENV: BENCHMARK_NIGHTLY
    CURRENT_BRANCH: "$CI_COMMIT_REF_NAME"
    DISKIMG_BRANCH: "${CI_COMMIT_SHA}"
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic -C link-arg=-s"
    SHELL_WRAPPER: "/usr/bin/time"
    TESTNET: cdrc02
    WG_TESTNET: cdrc02
    cd_target_env: BENCHMARK_NIGHTLY
system-baseline-update-performance-test-nightly:
  artifacts:
    expire_in: 3 days
    paths:
      - scalability/
    when: always
  dependencies: []
  extends: ".benchmark-spot-test"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  resource_group: "$TESTNET"
  rules:
    - allow_failure: true
      if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~ /\[benchmark\]/
      when: manual
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "BENCHMARK_NIGHTLY"
      when: always
  script:
    - |
      set -eExou pipefail
      git fetch

      GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")

      # Note that this benchmark needs unassigned nodes
      $SHELL_WRAPPER timeout 1h ./testnet/tools/icos_deploy.sh $TESTNET --git-revision "$GIT_REVISION" --no-boundary-nodes

      # Run system baseline performance evaluation
      cd ./scalability

      $SHELL_WRAPPER timeout 1h python3 experiments/run_system_baseline_experiment.py --testnet "$TESTNET" --wg_subnet 2 --wg_testnet $TESTNET --iter_duration 300 --target_rps=60 --use_updates=True

      TIMESTAMP=$(find results/"$GIT_REVISION" -maxdepth 1 -mindepth 1 -type d -printf "%f\n" | sort -nr | head -1)
      $SHELL_WRAPPER python3 common/generate_report.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP"
      $SHELL_WRAPPER python3 common/verify_perf.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP" --median_latency_threshold=2300

      cd -

      $SHELL_WRAPPER rclone --config="${CI_PROJECT_DIR}/.rclone.conf"  copyto "scalability/results/$GIT_REVISION" "performance-testing:performance-testing-results/$GIT_REVISION"
  tags:
    - dfinity-ic
  timeout: 1 hour
  variables:
    CD_ENV: BENCHMARK_NIGHTLY
    CURRENT_BRANCH: "$CI_COMMIT_REF_NAME"
    DISKIMG_BRANCH: "${CI_COMMIT_SHA}"
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic -C link-arg=-s"
    SHELL_WRAPPER: "/usr/bin/time"
    TESTNET: cdrc02
    WG_TESTNET: cdrc02
    cd_target_env: BENCHMARK_NIGHTLY
tecdsa:
  artifacts:
    expire_in: 3 days
    paths:
      - scalability/
    when: always
  dependencies: []
  extends: ".benchmark-test"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  resource_group: "$TESTNET"
  rules:
    - allow_failure: true
      if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~ /\[benchmark\]/
      when: manual
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "BENCHMARK_SUITE"
      when: always
  script:
    - |
      set -eExou pipefail
      git fetch
      GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")

      $SHELL_WRAPPER timeout 1h ./testnet/tools/icos_deploy.sh $TESTNET --git-revision "$GIT_REVISION" --no-boundary-nodes
      cd ./scalability

      $SHELL_WRAPPER experiments/run_tecdsa.py --testnet $TESTNET --wg_subnet 2 --wg_testnet $TESTNET

      # TIMESTAMP=$(find results/"$GIT_REVISION" -maxdepth 1 -mindepth 1 -type d -printf "%f\n" | sort -nr | head -1)
      # $SHELL_WRAPPER python3 common/generate_report.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP"

      find . -name  'workload-generator*stderr.txt' -print0 | xargs -0 pigz

      $SHELL_WRAPPER rclone --config="${CI_PROJECT_DIR}/.rclone.conf"  copyto "results/$GIT_REVISION" "performance-testing:performance-testing-results/$GIT_REVISION"
      cd -
  tags:
    - dfinity-ic
  timeout: 3 hours
  variables:
    CURRENT_BRANCH: "$CI_COMMIT_REF_NAME"
    DISKIMG_BRANCH: "${CI_COMMIT_SHA}"
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic -C link-arg=-s"
    SHELL_WRAPPER: "/usr/bin/time"
    TESTNET: cdslo
test-push-branch:
  artifacts:
    expire_in: 3 days
    paths:
      - junit_data/*
      - coredumps/*.txt
      - coredumps/*.gz
    when: always
  dependencies: []
  extends:
    - ".ubuntu-cargo-k8s"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
      when: on_success
  script:
    - |
      # The remote might already exist from a previous CI job run because GitLab re-uses the git repo.
      git remote add origin "https://gitlab-ci-token:${GITLAB_API_TOKEN}@gitlab.com/${CI_PROJECT_PATH}.git" || true
      git remote set-url origin "https://gitlab-ci-token:${GITLAB_API_TOKEN}@gitlab.com/${CI_PROJECT_PATH}.git" || true

      git config --global user.email "infra+gitlab-automation@dfinity.org"
      git config --global user.name "IDX GitLab Automation"

      git switch --force-create post-merge-tests-passed HEAD
      git push --force --set-upstream origin post-merge-tests-passed
  tags:
    - dfinity-ic
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic -C link-arg=-s"
    SHELL_WRAPPER: "/usr/bin/time"
test-testnet-deployment:
  artifacts:
    expire_in: 3 days
    paths:
      - junit_data/*
      - coredumps/*.txt
      - coredumps/*.gz
    when: always
  extends:
    - ".ubuntu-k8s"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs:
    - artifacts: false
      job: bazel-test-all
  resource_group: "$TESTNET"
  rules:
    - if: $CI_COMMIT_REF_PROTECTED == "true" && $SCHEDULE_NAME == "run-all-master"
    - if: $CI_COMMIT_REF_PROTECTED == "true" && $CI_COMMIT_BRANCH =~ /^rc--/
  script:
    - |
      set -eExou pipefail
      export ANSIBLE_REMOTE_USER=gitlab-runner
      GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "${CI_COMMIT_SHA}")
      "$CI_PROJECT_DIR/testnet/tools/icos_deploy.sh" $TESTNET --git-revision "$GIT_REVISION" --boundary-dev-image
  tags:
    - dfinity-ic
  timeout: 30 minutes
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    TESTNET: small14
variables:
  TEST_ES_HOSTNAMES: elasticsearch.testnet.dfinity.network:443
xnet-nightly:
  artifacts:
    expire_in: 3 days
    paths:
      - scalability/
    when: always
  dependencies: []
  extends: ".benchmark-spot-test"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  resource_group: "$TESTNET"
  rules:
    - allow_failure: true
      if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~ /\[benchmark\]/
      when: manual
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "BENCHMARK_NIGHTLY"
      when: always
  script:
    - |
      set -eExou pipefail
      git fetch

      GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")

      $SHELL_WRAPPER timeout 1h ./testnet/tools/icos_deploy.sh $TESTNET --git-revision "$GIT_REVISION" --no-boundary-nodes

      cd ./scalability

      $SHELL_WRAPPER timeout 1h python3 experiments/run_xnet_experiment.py --testnet "$TESTNET" --iter_duration 300 --datapoints=500

      TIMESTAMP=$(find results/"$GIT_REVISION" -maxdepth 1 -mindepth 1 -type d -printf "%f\n" | sort -nr | head -1)

      $SHELL_WRAPPER python3 common/generate_report.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP"

      cd -

      $SHELL_WRAPPER rclone --config="${CI_PROJECT_DIR}/.rclone.conf"  copyto "scalability/results/$GIT_REVISION" "performance-testing:performance-testing-results/$GIT_REVISION"
  tags:
    - dfinity-ic
  timeout: 1 hour
  variables:
    CD_ENV: BENCHMARK_NIGHTLY
    CURRENT_BRANCH: "$CI_COMMIT_REF_NAME"
    DISKIMG_BRANCH: "${CI_COMMIT_SHA}"
    GET_SOURCES_ATTEMPTS: 5
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic -C link-arg=-s"
    SHELL_WRAPPER: "/usr/bin/time"
    TESTNET: cdrc02
    WG_TESTNET: cdrc02
    cd_target_env: BENCHMARK_NIGHTLY
zz-generated-gitlab:
  artifacts:
    expire_in: 3 days
  extends:
    - ".ic-build-image"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:32e500a2f4a3e049975e2593b8276b02f420ac8965a894b83e9a96c7ab7b05e4
  needs: []
  rules:
    - changes:
        - gitlab-ci/config/**/*
        - ".gitlab-ci.yml"
      if: $CI_PIPELINE_SOURCE == "merge_request_event"
  script:
    - |
      set -eEuo pipefail

      output_file="gitlab-ci/config/zz-generated-gitlab-ci.yaml"

      curl -G "https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/ci/lint" \
          -d "dry_run=true" \
          -d "include_jobs=true" \
          -d "ref=$CI_COMMIT_REF_NAME" \
          -H "Authorization: Bearer $GITLAB_API_TOKEN" | jq -r '.merged_yaml' >"$output_file"

      yq  'sort_keys(...)' -i "$output_file"

      if [ -n "$(git status --porcelain)" ]; then
          git config --global user.email "idx@dfinity.org"
          git config --global user.name "IDX GitLab Automation"
          git commit -am "Updating $output_file"
          git remote set-url origin "https://gitlab-ci-token:${GITLAB_API_TOKEN}@gitlab.com/${CI_PROJECT_PATH}.git"
          git push --set-upstream origin HEAD:"$CI_COMMIT_REF_NAME"
      else
          echo "git working tree clean - no changes to be commited"
      fi
  tags:
    - dfinity-ic
  variables:
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/clean/$CI_PROJECT_NAME"
