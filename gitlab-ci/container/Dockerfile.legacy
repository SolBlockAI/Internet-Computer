ARG SRC_IMG_PATH=undefined
FROM ${SRC_IMG_PATH} as src_img

# https://hub.docker.com/_/ubuntu
# focal-20230605
FROM ubuntu@sha256:554e40b15453c788ec799badf0f1ad05c3e5c735b53f940feb8f27cf2ec570c5

# The image expects the following volumes mounted from the host:
# /cache - holding the cache artifacts
# /cargo - is the CARGO_HOME, holding cargo binaries and cloned repos
# /builds/git - a read only volume with the git repository which should be built

ENV TZ=UTC

RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone && \
    apt -yq update && \
    apt -yqq install --no-install-recommends git openssh-client curl xz-utils time parallel net-tools \
        apt-transport-https ca-certificates curl gnupg lsb-release && \
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg && \
    curl -fsSL "https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable/xUbuntu_20.04/Release.key" | gpg --dearmor | tee /etc/apt/trusted.gpg.d/devel_kubic_libcontainers_stable.gpg > /dev/null && \
    curl -L "https://apt.llvm.org/llvm-snapshot.gpg.key" | apt-key add - && \
    echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null && \
    echo 'deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_20.04/ /' | tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list && \
    echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list && \
    echo "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-15 main" | tee -a /etc/apt/sources.list.d/llvm.list && \
    curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg  add - && \
    apt -yq update && \
    apt -yqq install --no-install-recommends \
        android-sdk-ext4-utils \
        build-essential pkg-config libssl-dev llvm-10-dev llvm-dev liblmdb-dev liblzma-dev clang clang-10 cmake libbz2-dev gcc-multilib zlib1g-dev \
        lldb libc-bin libclang-10-dev liblz4-dev librocksdb-dev libsnappy-dev libusb-1.0-0-dev libzstd-dev zstd vim emacs nano jq \
        zip unzip rclone rsync bc csmith gcc lld lld-10 libc++-10-dev libcsmith-dev sqlite3 libsqlite3-dev libselinux-dev libunwind-dev libsystemd-dev uuid-dev \
        qemu-system-x86 ovmf iproute2 dosfstools mtools fakeroot faketime android-sdk-ext4-utils \
        policycoreutils python-is-python3 python3 python3-pip python3-cbor shellcheck \
        sudo docker-ce-cli ripgrep patchelf cpio nodejs npm gosu pigz zsh fish hub less \
        ca-certificates curl git isolinux p7zip-full syslinux xorriso cryptsetup-bin autoconf automake \
        grub-efi-amd64-bin podman buildah lvm2 fuse-overlayfs google-cloud-cli \
        python3-dev flex bison libglib2.0-dev libpixman-1-dev python3-setuptools python3-apt libgtk-3-dev \
        lld-15 llvm-15 llvm-15-dev clang-15 libclang-rt-15-dev

RUN apt -yqq install --no-install-recommends \
        gcc-$(gcc --version|head -n1|sed 's/\..*//'|sed 's/.* //')-plugin-dev libstdc++-$(gcc --version|head -n1|sed 's/\..*//'|sed 's/.* //')-dev

COPY --from=docker.io/docker/buildx-bin:latest /buildx /usr/libexec/docker/cli-plugins/docker-buildx

# Add the `${USER}` user, and the required folders
ARG USER=ubuntu
ARG UID=1000
RUN useradd -ms /bin/bash -u ${UID} ${USER} && \
    mkdir -p /home/${USER} && \
    chown -R ${UID}.${UID} /home/${USER} && \
    mkdir -p /cargo /cargo_target /afl /builds /builds/dfinity-lab && \
    chown -R ${UID}.${UID} /cargo /afl /cargo_target /builds && \
    chmod +s /usr/sbin/gosu

# Sudo is needed to run `ip tun` commands to create a virtual network for e2e tests
RUN usermod -a -G sudo ${USER} && echo "ALL ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers

# Install Rust and Cargo in /opt
ENV RUSTUP_HOME=/opt/rustup \
    CARGO_TARGET_DIR=/cargo_target \
    ZSTD_LIB_DIR=/usr/lib \
    PROTOC=/usr/protoc/bin/protoc \
    PROTOC_INCLUDE=/usr/protoc/include \
    PATH=/opt/cargo/bin:$PATH

COPY --from=src_img /opt /tmp/src-artifacts
RUN rsync --chmod=755 -rav /tmp/src-artifacts/ /usr && rm -rf /tmp/src-artifacts

# rustup uses $CARGO_HOME to figure out where to install itself
ARG rust_version=1.58.1
ENV CARGO_HOME=/opt/cargo
RUN curl --fail https://sh.rustup.rs -sSf \
        | sh -s -- -y --default-toolchain ${rust_version}-x86_64-unknown-linux-gnu --no-modify-path && \
    rustup default ${rust_version}-x86_64-unknown-linux-gnu && \
    rustup target add wasm32-unknown-unknown && \
    chown -R ${USER}.${USER} ${RUSTUP_HOME} ${CARGO_HOME}

# Install AFLplusplus
ARG AFL_RELEASE_VERSION=v4.08c
RUN cd /afl && \
    git clone --depth=1 --branch=${AFL_RELEASE_VERSION} https://github.com/AFLplusplus/AFLplusplus.git && \
    cd AFLplusplus && \
    STATIC=1 LLVM_CONFIG=/usr/bin/llvm-config-15 CC=/usr/bin/clang-15 CXX=/usr/bin/clang++-15 make all && \
    STATIC=1 LLVM_CONFIG=/usr/bin/llvm-config-15 CC=/usr/bin/clang-15 CXX=/usr/bin/clang++-15 make install && \
    mv afl-fuzz /afl && \
    mv afl-showmap /afl && \
    cd .. && \
    rm -rf AFLplusplus

# Since we are cloning multiple NPM repos, we need to have multiple node versions installed
# to switch between them for compatibility.
ARG nvm_version=v0.39.1
ARG dependency_mgmt_agent_js_node_version=16
ARG dependency_mgmt_nns_dapp_node_version=18
ARG dependency_mgmt_default_node_version=19
ENV NVM_DIR=/opt/nvm
RUN mkdir $NVM_DIR && \
    curl --fail https://raw.githubusercontent.com/nvm-sh/nvm/${nvm_version}/install.sh -sSf | bash

# CARGO_HOME is also where the crates.io registry and git checkouts are cached.
# We bind mount this on the CI runners, so the image needs to be able to function properly
# even if this directory is empty.
ENV CARGO_HOME=/cargo

# Add Python Path
ENV PATH=$PATH:/home/${USER}/.local/bin

RUN /usr/bin/pip3 install pip-tools==6.12.2

ARG didc_release_date=2022-01-06
RUN curl --fail \
         --location https://github.com/dfinity/candid/releases/download/${didc_release_date}/didc-linux64 \
         --output /usr/bin/didc-linux64 && chmod +x /usr/bin/didc-linux64

RUN . /opt/nvm/nvm.sh && \
    nvm install ${dependency_mgmt_agent_js_node_version} && \
    nvm install ${dependency_mgmt_nns_dapp_node_version} && \
    nvm install ${dependency_mgmt_default_node_version} && \
    npm install -g @vscode/dev-container-cli

# Fake workspace to be used to pre-populate bazel binaries.
COPY .bazelversion /tmp/bazel/
RUN touch /tmp/bazel/WORKSPACE

USER ${UID}

ENV ROCKSDB_INCLUDE_DIR=/usr/include ROCKSDB_LIB_DIR=/usr/lib ROCKSDB_STATIC=1 \
    SNAPPY_INCLUDE_DIR=/usr/include SNAPPY_LIB_DIR=/usr/lib/x86_64-linux-gnu SNAPPY_STATIC=1 \
    LZ4_INCLUDE_DIR=/usr/include LZ4_LIB_DIR=/usr/lib/x86_64-linux-gnu LZ4_STATIC=1 \
    ZSTD_INCLUDE_DIR=/usr/include ZSTD_LIB_DIR=/usr/lib/x86_64-linux-gnu ZSTD_STATIC=1 \
    Z_INCLUDE_DIR=/usr/include Z_LIB_DIR=/usr/lib/x86_64-linux-gnu Z_STATIC=1 \
    BZ2_INCLUDE_DIR=/usr/include BZ2_LIB_DIR=/usr/lib/x86_64-linux-gnu BZ2_STATIC=1

# Pre-populate the Bazel installation.
RUN cd /tmp/bazel && bazel version

RUN mkdir --mode=0700 /home/${USER}/.ssh
COPY ./gitlab-ci/container/files/known_hosts /home/${USER}/.ssh/known_hosts

COPY ./gitlab-ci/container/files/entrypoint.sh /entrypoint.sh
WORKDIR /

# Add zshrc generated from zsh-newuser-install (option 2)
COPY --chown=ubuntu:ubuntu ./gitlab-ci/container/files/zshrc /home/ubuntu/.zshrc

COPY ./gitlab-ci/container/TAG /home/ubuntu/.DFINITY-TAG

USER 0

RUN mv /usr/bin/docker /usr/bin/docker-bin
COPY ./gitlab-ci/container/files/containers.conf /etc/containers/containers.conf
COPY ./gitlab-ci/container/files/docker.sh /usr/bin/docker

# Add mold linker
ARG mold_version=1.11.0
RUN curl -L --retry 10 --silent --show-error "https://github.com/rui314/mold/releases/download/v${mold_version}/mold-${mold_version}-$(uname -m)-linux.tar.gz" | tar -C /usr/local --strip-components=1 -xzf - && \
    ln -sf /usr/local/bin/mold "$(realpath /usr/bin/ld)"

ENTRYPOINT ["/entrypoint.sh"]
