# Geolocation

geoip2 "/run/ic-node/etc/nginx/geoip/GeoLite2-Country.mmdb" {
    $geo_country_code default=N/A source=$remote_addr country iso_code;
    $geo_country_name default=N/A source=$remote_addr country names en;
}

geoip2 "/run/ic-node/etc/nginx/geoip/GeoLite2-City.mmdb" {
    $geo_city_name default=N/A source=$remote_addr city names en;
}

# njs
js_import "ic_router.js";

### Routing

# Check if the canister belongs to a system subnet
js_set $is_system_subnet ic_router.isSystemSubnet;

js_set $host_canister_id ic_router.hostCanisterId;
js_set $inferred_canister_id ic_router.inferCanisterId;

### Compliance

# A denylist is provided to restrict access to forbidden canisters
# A canister- and subnet-allowlist overrides any erroneously denied canisters

map "$inferred_canister_id $geo_country_code" $denylisted {
    default "0";
    include /var/opt/nginx/denylist/denylist.map; # lines of the format `"~^ryjl3-tyaaa-aaaaa-aaaba-cai (CH|...)$" "1";` or `"~^ryjl3-tyaaa-aaaaa-aaaba-cai .*$" "1";`
}

map $inferred_canister_id $canister_allowed {
    default "0";
    include "allowlist_canisters.map";
}

js_import is_bot from njs/njs-plugin-is-bot.js;
js_set $is_bot is_bot.fn;

### Domain-Canister Type Match (System/Application)

map $host $is_system_domain {
    default "0";
    include "/run/ic-node/etc/nginx/conf.d/system_domains.conf";
}

map $host $is_application_domain {
    default "0";
    include "/run/ic-node/etc/nginx/conf.d/application_domains.conf";
}

map "$is_system_domain,$is_application_domain,$is_system_subnet" $domain_canister_match {
    default       "0";
    "~^1,[01],1$" "1";
    "~^[01],1,0$" "1";
}

# Domain-Canister Isolation
#   A pre-isolation canister is one that has existed before we introduced the notion of system/application domains.
#   Therefore, these canisters should still be served regardless of the domain they're being requested on.

map $inferred_canister_id $is_pre_isolation_canister {
    default "0";
    include "/run/ic-node/etc/nginx/conf.d/pre_isolation_canisters.conf";
}

# Primary Domains

include "/run/ic-node/etc/nginx/conf.d/set_primary_system_domain.conf";
include "/run/ic-node/etc/nginx/conf.d/set_primary_application_domain.conf";
include "/run/ic-node/etc/nginx/conf.d/set_primary_api_domain.conf";

map "$is_system_subnet" $primary_domain {
    "1" $primary_system_domain;
    "0" $primary_application_domain;
}

geo $rosetta {
    default 0;     # all other traffic maps to zone 0
    10.0.0.0/8 1;  # local and rosetta traffic map to zone 1

    # Add rosetta node addresses here and map to zone 1
    2a00:fb01:400::/56 1;
    2607:fb58:9005::/48 1;
    2602:fb2b:100::/48 1;
}

upstream icx_proxy {
    server 127.0.0.1:9500;
    keepalive 16;
}

upstream ic_boundary {
    server 127.0.0.1:4444;
    keepalive 16;
}

upstream cert_issuer {
    server 127.0.0.1:3000;
    keepalive 4;
}

map $remote_addr $traffic_segment {
    default   "external";
    127.0.0.1 "internal";
}

add_header X-Frame-Options "DENY" always;
add_header X-Content-Type-Options "nosniff" always;
add_header X-XSS-Protection "1; mode=block" always;

# Convert nginx's 16-byte/32-char hex formatted request_id into a proper UUID
# This allows for efficient storage in Clickhouse using a native UUID type instead of a string (16 vs 36 bytes)
# E.g. 444535f9378a3dfa1b8604bc9e05a303 -> 444535f9-378a-3dfa-1b86-04bc9e05a303
map $request_id $request_uuid {
    "~^(\w{8})(\w{4})(\w{4})(\w{4})(.*)$" "$1-$2-$3-$4-$5";
}

# Observability
include "includes/request_id.conf";

### Rate Limiting

limit_req_status 429;

# for call/update requests
limit_req_zone $binary_remote_addr zone=http_remote_addr_zone:1m rate=100r/s;
limit_req_zone $rosetta zone=http_zone:1m rate=10000r/s;

# for custom-domain registrations
limit_req_zone global              zone=rgs_global:32k rate=10r/s;
limit_req_zone $binary_remote_addr zone=rgs_per_ip:1m  rate=1r/s;

root /var/www/html;

# Any direct HTTPS access without correct domain name will default to returning a 404.
server {
    listen       443 ssl http2;
    listen       [::]:443 ssl http2 ipv6only=on; # setting ipv6only=on once turns it on for all instances on that port

    server_name  _;

    return 404;
}

# Any direct HTTP traffic will be redirected to HTTPS via 301.
server {
    listen       80;
    listen       [::]:80 ipv6only=on; # setting ipv6only=on once turns it on for all instances on that port

    server_name  _;

    return 301 https://$host$request_uri;
}
