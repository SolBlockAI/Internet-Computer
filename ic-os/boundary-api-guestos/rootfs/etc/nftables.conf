#!/usr/sbin/nft -f

flush ruleset

define icmp_v4_types_accept = {
  destination-unreachable,
  source-quench,
  time-exceeded,
  parameter-problem,
  echo-request,
  echo-reply,
}

define icmp_v6_in_types_accept = {
  destination-unreachable,
  packet-too-big,
  time-exceeded,
  parameter-problem,
  echo-request,
  echo-reply,
  nd-router-advert,
  nd-neighbor-solicit,
  nd-neighbor-advert,
}

define icmp_v6_out_types_accept = {
  destination-unreachable,
  packet-too-big,
  time-exceeded,
  parameter-problem,
  echo-request,
  echo-reply,
  nd-router-solicit,
  nd-neighbor-solicit,
  nd-neighbor-advert,
}

define ipv6_monitoring_tcp_ports = {
  9100, # node-exporter
  9312, # control-plane
  9316, # vector-nginx
  9317, # vector
  9319, # process-exporter
  9320, # ic-registry-replicator
  9323, # danted (socks proxy)
  9324, # ic-boundary
}

# Defines `ipv6_system_replica_ips`
include "/run/ic-node/etc/nftables/system_replicas.ruleset"

# Defines `ipv6_replica_ips`, `ipv4_http_ips`, `ipv6_http_ips`, `ipv6_debug_ips`, and `ipv6_monitoring_ips`
include "/run/ic-node/etc/nftables/defs.ruleset"

define ipv6_monitoring_debug_ips = {
  $ipv6_monitoring_ips,
  $ipv6_debug_ips,
}

define ipv6_socks_saddr_ips = {
  $ipv6_replica_ips,
  $ipv6_system_replica_ips,
}

table ip filter {
  chain input {
    type filter hook input priority filter; policy drop;
    iif "lo" accept
    icmp type $icmp_v4_types_accept accept
    ct state invalid drop
    ct state { established, related } accept
    ip saddr $ipv4_http_ips ct state new tcp dport { http, https } accept
  }

  chain forward {
    type filter hook forward priority filter; policy drop;
  }

  chain output {
    type filter hook output priority filter; policy drop;
    oif "lo" accept
    icmp type $icmp_v4_types_accept accept
    ct state invalid drop
    ct state { established, related } accept
    ct state new tcp dport { domain, http, https, 8080 } accept
    ct state new udp dport { domain, ntp } accept
    meta skuid socks ct state new tcp dport 1-65535 accept
  }
}

table ip6 filter {
  chain input {
    type filter hook input priority filter; policy drop;
    iif "lo" accept
    icmpv6 type $icmp_v6_in_types_accept accept
    ct state invalid drop
    ct state { established, related } accept
    ip6 saddr $ipv6_http_ips ct state new tcp dport { http, https } accept
    ip6 saddr $ipv6_debug_ips ct state new tcp dport { ssh, 19531 } accept
    ip6 saddr $ipv6_socks_saddr_ips ct state new tcp dport socks accept
    ip6 saddr $ipv6_monitoring_debug_ips ct state new tcp dport $ipv6_monitoring_tcp_ports accept
  }

  chain forward {
    type filter hook forward priority filter; policy drop;
  }

  chain output {
    type filter hook output priority filter; policy drop;
    oif "lo" accept
    icmpv6 type $icmp_v6_out_types_accept accept
    ct state invalid drop
    ct state { established, related } accept
    ct state new tcp dport { domain, http, https, 8080 } accept
    ct state new udp dport { domain, ntp } accept
  }
}
