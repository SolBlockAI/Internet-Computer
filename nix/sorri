# vim: ft=bash

# sorri: a Simpler lORRI
#
# This is a simpler implementation of Tweag's lorri:
#   https://github.com/target/lorri
#
# sorri reuses lorri's tricks for figuring out the files to track for changes,
# but uses direnv's own mechanism for actually tracking those files.
# sorri uses a local cache at '~/.cache/dfinity-sorri-vX/'. Each entry is a
# directory containing two files:
#
#   ~/.cache/dfinity-sorri-v2/
#   └── 862863950fe7ff0592198f4867c27116-8d26d48f2aa4eb5171b1d74fa12d785a
#       ├── link -> /nix/store/z1w37xfs4r3ds31m89ma5hi78x1v7zqj-nix-shell
#       ├── manifest_env
#       └── manifest_files
#
# `link` is the result of a previous evaluation. `manifest_files` and `manifest_env` are used to find
# that result of a previous evaluation. The directory name
# (0716a121e4f986f9f8cf11f7c579d332 above) is the hash of the `manifest`s.
#
# `link` is a symlink to a shell script that sets a shell's variables.
#
#   cat ~/.cache/dfinity-sorri-v2/0716a121e4f986f9f8cf11f7c579d332/link
#   declare -x AR_x86_64_apple_darwin="/nix/store/amsm28x2hnsgp8c0nm4glkjc2gw2l9kw-cctools-binutils-darwin-927.0.2/bin/ar"
#   declare -x BZ2_LIB_DIR="/nix/store/7yikqcm4v4b57xv3cqknhdnf0p1aakxp-bzip2-1.0.6.0.1/lib"
#   declare -x BZ2_STATIC="1"
#   declare -x CARGO_BUILD_TARGET="x86_64-apple-darwin"
#   declare -x CARGO_TARGET_WASM32_UNKNOWN_UNKNOWN_LINKER="/nix/store/swiic36rl7njy6bfll5z0afl42c9q4s5-lld-9.0.1/bin/lld"
#
# `manifest_files` is a list of files used for an evaluation alongside their checksums:
#
#   $ cat ~/.cache/dfinity-sorri-v2/0716a121e4f986f9f8cf11f7c579d332/manifest
#   /Users/nicolas/dfinity/shell.nix:029451f2a9bee59f4ce002bdbdf20554
#   /Users/nicolas/dfinity/nix/default.nix:7ff8c9138044fc7e31f1d4ed2bf1c0ba
#   /Users/nicolas/dfinity/nix/overlays/buf/default.nix:c4a24e0bba0178b73f0211d0f26147e6
#   ...
#
# `manifest_env` is a list of environment variables used for an evaluation
#  alongside checksum of their values:
#
#   $ cat ~/.cache/dfinity-sorri-v2/862863950fe7ff0592198f4867c27116-8d26d48f2aa4eb5171b1d74fa12d785a/manifest_env
#   CARGO_HOME:da39a3ee5e6b4b0d3255bfef95601890afd80709
#   COMMON:da39a3ee5e6b4b0d3255bfef95601890afd80709
#   HOME:f81eeb7daf31d70eb3e41b5ed661fa93ad8fce96
#   NIV_OVERRIDE_buf:da39a3ee5e6b4b0d3255bfef95601890afd80709
#   ...
#
# sorri first checks the existing cache entries (dfinity-sorry-v2/0716...,
# etc); if it finds a cache entry with a manifest where all the _manifest_
# entries (nix/default.nix:7ff...) match local files, the link is loaded; if no
# manifest matches, a new entry is created and loaded.

# NOTES:
#  we use some functions from direnv's stdlib:
#   - watch_file <foo>: updates $DIRENV_WATCHES to tell direnv to watch <foo>
#   - expand_path: similar to realpath from coreutils
#   - PATH_add: add the directory to $PATH
#   - direnv will _not_ automatically reload the environment on an environment
#     variable change; the user needs to run `direnv allow`.

# Some notes about metrics:
# 'sorri' uses https://honeycomb.io to store and display metrics. These metrics
# are accessible here:
#   - https://ui.honeycomb.io/dfinity/datasets/sorri
# Most functions calls are wrapped in 'wrap_metrics' which measures its
# duration and appends metrics to 'SORRI_HONEYCOMB_METRICS'. The
# 'SORRI_HONEYCOMB_METRICS' are read right before sorri returns and uploaded to
# Honeycomb, in a background process.
SORRI_HONEYCOMB_METRICS=( )
SORRI_HONEYCOMB_SPAN=""
SORRI_HONEYCOMB_TRACE_ID="$RANDOM"
# NOTE: it was deemed OK by the IDX team to check in the API key here. For more
# information reach out the IDX' Team Lead.
SORRI_HONEYCOMB_TEAM="66202efbfcc801ed65eae909fb03c8c9"
SORRI_HONEYCOMB_DATASET="${SORRI_HONEYCOMB_DATASET:-sorri}"

SORRI_SHELL_DIR=$(basename "$PWD")

if ! type watch_file > /dev/null 2>&1; then
    watch_file() {
        :
    }
fi

# --- vendored from https://github.com/direnv/direnv
expand_path() {
  local REPLY; realpath.absolute "${2+"$2"}" "${1+"$1"}"; echo "$REPLY"
}

# --- vendored from https://github.com/bashup/realpaths
realpath.dirname() { REPLY=.; ! [[ $1 =~ /+[^/]+/*$|^//$ ]] || REPLY="${1%${BASH_REMATCH[0]}}"; REPLY=${REPLY:-/}; }
realpath.basename(){ REPLY=/; ! [[ $1 =~ /*([^/]+)/*$ ]] || REPLY="${BASH_REMATCH[1]}"; }

realpath.absolute() {
  REPLY=$PWD; local eg=extglob; ! shopt -q $eg || eg=; ${eg:+shopt -s $eg}
  while (($#)); do case $1 in
    //|//[^/]*) REPLY=//; set -- "${1:2}" "${@:2}" ;;
    /*) REPLY=/; set -- "${1##+(/)}" "${@:2}" ;;
    */*) set -- "${1%%/*}" "${1##${1%%/*}+(/)}" "${@:2}" ;;
    ''|.) shift ;;
    ..) realpath.dirname "$REPLY"; shift ;;
    *) REPLY="${REPLY%/}/$1"; shift ;;
  esac; done; ${eg:+shopt -u $eg}
}

# Print the line iff SORRI_DEBUG is set and not empty
debug() {
    if [ -n "${SORRI_DEBUG:-}" ]; then >&2 echo "debug:" "$@"; fi
}

log() {
    if [ -z "${SORRI_SILENT:-}" ]; then >&2 echo "sorri:" "$@"; fi
}

important() {
    >&2 echo "sorri:" "$@"
}

log_bold() {
    tput bold
    >&2 echo "sorri:" "!!!!" "$@" "!!!!"
    tput sgr0
}

# Print in red and return with 1
abort() {
    tput setaf 1
    >&2 echo sorri: ERROR: "$@"
    >&2 echo sorri: please fix the error and then run "'direnv reload'" to reload the shell
    tput sgr0
    exit 1
}

remove_duplicates(){
    wrap_metrics remove_duplicates "$@"
}

# Removes duplicate lines in place
remove_duplicates_() {
    file="$1"
    tmpfile=$(mktemp)
    sort <"$file" | uniq >"$tmpfile"
    mv "$tmpfile" "$file"
}

# Adds the given file to the specified manifest:
# echo "foo.nix:<hash of foo.nix>" >> manifest
add_file_to_manifest() {
    {
        expand_path "$1" | tr -d '\n'
        echo -n ":"
        nix-hash "$1"
    } >>"$2"
}

# Adds the given environment variable to the specified manifest:
# echo "HOME:<hash of "/home/me">" >> manifest
add_envvar_to_manifest() {
    {
        echo -n "$1:"
        (printenv "$1" || true) | shasum | head -c 40
        echo
    } >>"$2"
}

create_manifest_from_logs(){
    wrap_metrics create_manifest_from_logs "$@"
}

# Parses a Nix -vv log file and creates a manifest
create_manifest_from_logs_() {
    local logfile="$1"  # The path to the logfile
    local manifest_files="$2" # The path to the files manifest (will be created)
    local manifest_env="$3" # The path to the environment variable manifest (will be created)
    remove_duplicates "$logfile"
    while IFS= read -r line; do
        case $line in
            # no point rebuilding on index change
            *.git/index*) ;;

            "trace: file read"*)
                # shellcheck disable=2001
                copied=$(echo "$line" | sed 's/^trace: file read: '"'"'\([^'"'"']*\)'"'"'.*/\1/')
                debug "found file trace $copied"
                if ! [[ $copied == /nix/store* ]]; then
                    add_file_to_manifest "$copied" "$manifest_files"
                fi
                ;;
            "trace: envvar read"*)
                # shellcheck disable=2001
                envvar=$(echo "$line" | sed 's/^trace: envvar read: '"'"'\([^'"'"']*\)'"'"'.*/\1/')
                debug "found envvar trace $envvar"
                add_envvar_to_manifest "$envvar" "$manifest_env"
                ;;
            copied*)
                # shellcheck disable=2001
                copied=$(echo "$line" | sed 's/^copied source '"'"'\([^'"'"']*\)'"'"'.*/\1/')
                debug "found copied $copied"
                if ! [[ $copied == /nix/store* ]]; then
                    add_file_to_manifest "$copied" "$manifest_files"
                fi
                ;;
            evaluating*)
                # shellcheck disable=2001
                copied=$(echo "$line" | sed 's/^evaluating file '"'"'\([^'"'"']*\)'"'"'.*/\1/')
                debug "found evaluated $copied"

                # skip files if they're in the store (i.e. immutable)
                if ! [[ $copied == /nix/store* ]]; then
                    # when evaluating a `default.nix`, Nix sometimes prints the
                    # path to the file, and sometimes to the directory...
                    if [ -d "$copied" ]; then
                        add_file_to_manifest "$copied/default.nix" "$manifest_files"
                    else
                        add_file_to_manifest "$copied" "$manifest_files"
                    fi
                fi
                ;;
        esac
    done <"$logfile"

    remove_duplicates "$manifest_files"
    remove_duplicates "$manifest_env"
}

create_manifests(){
    wrap_metrics create_manifests "$@"
}

# Wrapper function for creating new manifests based on the files currently
# present in the source tree as well as the environment variables.
# NOTE: The manifests (and link) are created atomically meaning this works fine
# if two shells are opened concurrently
create_manifests_() {
    debug creating manifests for "$PWD"

    evallogs=$(mktemp)

    # A nix wrapper that imports ./shell.nix. It modifies the resulting
    # derivation in two ways:
    #  - The builder is replaced with a bash function that calls `export >
    #   $out`, which effectively writes all the environment variables to $out.
    #   The variables can then be imported by sourcing this file.
    #  - The readFile and readDir builtins are overridden to print their
    #   arguments whenever they are called (so that we can parse that and track
    #   those files)
    local shellnix;
    shellnix=$(cat <<EOF
let
  overrides = {
    import = scopedImport overrides;
    scopedImport = x: builtins.scopedImport (overrides // x);
    builtins = builtins // {
      readFile = file: builtins.trace "file read: '\${toString file}'" (builtins.readFile file);
      readDir = path: builtins.trace "file read: '\${toString path}'" (builtins.readDir path);
      getEnv = var: builtins.trace "envvar read: '\${var}'" (builtins.getEnv var);
    };
  };

  # TODO: how do we deal with shellHook s?
  # if the shell hook sets a variable, then it should be handled by the shell
  # (even for stuff like CARGO_HOME, we can tweak how \`declare\` handles that
  # particular variable for updating it instead of setting it). If it does
  # other stuff (like calling ulimit) then this is not gonna work since direnv
  # runs this in a subshell.
  builder = builtins.toFile "foo-bidou" ''
    [ -e \$stdenv/setup ] && . \$stdenv/setup
    export > \$out
  '';

  imported =
    let
      raw = overrides.scopedImport overrides $(expand_path ./shell.nix);
    in
      if builtins.isFunction raw
      then raw {}
      else raw;

in
derivation (
  imported.drvAttrs // {
    args = [ "-e" builder ];
  }
)
EOF
)

    # The resulting link to the shell build (is used as a GC root)
    buildout=$(mktemp -d)/result

    important building shell, this may take a while

    # We keep lines like these:
    #  'copied source /dfinity/rs to ...': source trees and files imported to the store
    #  'evaluating file foo.nix ...' Nix files used for eval
    #  'trace: file read: sources.json...' files from readFile & readDir
    keepem=(grep -E "^copied source|^evaluating file|^trace: (file|envvar) read:")

    # we drop all the lines like the above but that reference files in the
    # store; those files are immutable so we don't want to watch them for
    # changes
    dropem=(grep -vE "^copied source '/nix|^evaluating file '/nix|^trace: file read: '/nix")

    nixOpts=( -E "$shellnix" -o "$buildout" -vv --connect-timeout 5 )

    if [ -n "${SORRI_DEBUG:-}" ]; then
        nix-build "${nixOpts[@]}" \
            2> >(tee -a >("${keepem[@]}" | "${dropem[@]}" >"$evallogs")) || abort nix-build failed
    else
        logs=$(mktemp)
        nix-build "${nixOpts[@]}" --max-jobs 8 \
            2> >(tee -a "$logs" > >("${keepem[@]}" | "${dropem[@]}" >"$evallogs")) >/dev/null \
            || abort nix-build failed, logs can be found at "${logs}:"$'\n'"---"$'\n'"$(tail -n 5 "$logs")"$'\n'"---"
        rm "$logs"
    fi

    debug build finished "$buildout"

    tmpmanifest_files=$(mktemp)
    tmpmanifest_env=$(mktemp)
    create_manifest_from_logs "$evallogs" "$tmpmanifest_files" "$tmpmanifest_env"

    # The identifier for this new cache
    local manifest_hashes
    manifest_hashes="$(nix-hash "$tmpmanifest_files" | tr -d '\n')-$(nix-hash "$tmpmanifest_env" | tr -d '\n')"
    mkdir -p "$CACHE_DIR/$manifest_hashes"

    # create the files atomically
    mv -f "$tmpmanifest_files" "$CACHE_DIR/$manifest_hashes/manifest_files"
    mv -f "$tmpmanifest_env" "$CACHE_DIR/$manifest_hashes/manifest_env"
    link="$CACHE_DIR/$manifest_hashes/link"
    mv -f "$buildout" "$link"

    # Register the shell build as a GC root
    nix-store --indirect --add-root "$link" -r "$link"

    rmdir "$(dirname "$buildout")"

    log created cached shell "$manifest_hashes"

    if ! import_link_of "$CACHE_DIR/$manifest_hashes"; then
        abort "could not import link of $manifest_hashes which was just created"
    fi
}

mk_timestamp(){
    # On darwin, no date with milliseconds
    # So we round everything down to the second.
    date -u '+%Y-%m-%dT%H:%M:%S.000Z'
}

epoch(){
    # On darwin, no date with milliseconds
    # So we round everything down to the second.
    date +%s
}

# Wrap a function for metrics generation.
wrap_metrics() {

    # The name of the function to wrap and call
    local f="$1"

    # The parent span. If there is no parent span (i.e. this is the top-leval
    # wrap_metrics) then the trace.parent_id is not set, signaling to Honeycomb
    # that it is the root span.
    local parent_span="${SORRI_HONEYCOMB_SPAN:-}"

    # A random span id, which is then set as parent span when "$f" is called
    local span_id="$f-$RANDOM"

    shift

    >&2 debug "calling wrapped $f" "$@"

    # Some time arithmetic
    # Note: on Darwin we don't have access to millisecond precision in 'date'
    # so we round everything to the second
    local span_timestamp=$(mk_timestamp)
    local span_before=$(epoch)
    SORRI_HONEYCOMB_SPAN="$span_id" "$f"_ "$@"
    local span_after=$(epoch)

    local span_duration=$(( (span_after - span_before) * 1000))

    # Create a JSON object and store the metrics in SORRI_HONEYCOMB_METRICS
    local span_data="{"

    if [ -n "$parent_span" ]; then
        local span_data="$span_data"'"trace.parent_id": "'$parent_span'",'
        local span_data="$span_data"'"shell_dir": "'$SORRI_SHELL_DIR'",'
        local span_data="$span_data"'"user": "'$USER'",'
    fi

    local span_data="$span_data"'"trace.span_id": "'$span_id'",'
    local span_data="$span_data"'"trace.trace_id": "'$SORRI_HONEYCOMB_TRACE_ID'",'
    local span_data="$span_data"'"Timestamp": "'$span_timestamp'",'
    local span_data="$span_data"'"name": "'"$f"'",'
    local span_data="$span_data"'"service_name": "'"sorri"'",'
    local span_data="$span_data"'"duration_ms": '$span_duration
    local span_data="$span_data}"

    >&2  debug "exiting $f:" "$span_data"

    SORRI_HONEYCOMB_METRICS+=( "$span_data" )
}

import_link_of() {
    wrap_metrics import_link_of "$@"
}

# Load the environment variables saved in a cache entry by importing the link
# file and watch the files of manifest_files. Returns 1 if the link file does
# not exist, but does not exit.
import_link_of_() {
    local manifest_files="$1/manifest_files"
    if [ ! -f "$manifest_files" ]; then
        abort no files manifest found at "$manifest_files"
    fi

    link="$1"/link
    if [ ! -f "$link" ]; then
        log no link found at "$link"
        return 1
    fi

    debug importing manifest "$manifest_files" and link "$link"

    # read the manifest line by line and issue direnv `watch_file` calls for
    # every file
    while IFS= read -r watched; do
        watched_file=${watched%:*}
        debug adding file "$watched_file" to watch
        watch_file "$watched_file"
    done <"$manifest_files"

    # this overrides Bash's 'declare -x'. The 'link' is a bash that calls
    # 'declare -x' (== export) on every environment variable in the built
    # shell, but there are some variables (PATH, HOME) that we don't actually
    # want to inherit from the shell.
    function declare() {
        if [ "$1" == "-x" ]; then shift; fi

        # Some variables require special handling.
        case "$1" in
            # vars from: https://github.com/NixOS/nix/blob/92d08c02c84be34ec0df56ed718526c382845d1a/src/nix-build/nix-build.cc#L100
            "HOME="*) ;;
            "USER="*) ;;
            "LOGNAME="*) ;;
            "DISPLAY="*) ;;
            "PATH="*)
                # here we don't use PATH_add from direnv because it's too slow
                # https://github.com/direnv/direnv/issues/671
                PATH="${1#PATH=}:$PATH";;
            "TERM="*) ;;
            "IN_NIX_SHELL="*) ;;
            "TZ="*) ;;
            "PAGER="*) ;;
            "NIX_BUILD_SHELL="*) ;;
            "SHLVL="*) ;;

                # vars from: https://github.com/NixOS/nix/blob/92d08c02c84be34ec0df56ed718526c382845d1a/src/nix-build/nix-build.cc#L385
            "TEMPDIR="*) ;;
            "TMPDIR="*) ;;
            "TEMP="*) ;;
            "TMP="*) ;;

                # vars from: https://github.com/NixOS/nix/blob/92d08c02c84be34ec0df56ed718526c382845d1a/src/nix-build/nix-build.cc#L421
            "NIX_ENFORCE_PURITY="*) ;;

                # vars from: https://www.gnu.org/software/bash/manual/html_node/Bash-Variables.html (last checked: 2019-09-26)
                # reported in https://github.com/target/lorri/issues/153
            "OLDPWD="*) ;;
            "PWD="*) ;;
            "SHELL="*) ;;
            "XDG_DATA_DIRS="*) ;;

                # some stuff we don't want set
            "__darwinAllowLocalNetworking="*) ;;
            "__impureHostDeps="*) ;;
            "__propagatedImpureHostDeps="*) ;;
            "__propagatedSandboxProfile"*) ;;
            "__sandboxProfile="*) ;;
            "allowSubstitutes="*) ;;
            "asciidoctor_args="*) ;;
            "buildInputs="*) ;;
            "buildPhase"*) ;;
            "builder="*) ;;
            "checkPhase="*) ;;
            "cmakeFlags="*) ;;
            "configureFlags="*) ;;
            "depsBuildBuild="*) ;;
            "depsBuildBuildPropagated="*) ;;
            "depsBuildTarget="*) ;;
            "depsBuildTargetPropagated="*) ;;
            "depsHostHost="*) ;;
            "depsHostHostPropagated="*) ;;
            "depsTargetTarget="*) ;;
            "depsTargetTargetPropagated="*) ;;
            "doCheck="*) ;;
            "doInstallCheck="*) ;;
            "dontDisableStatic="*) ;;
            "gl_cv"*) ;;
            "installPhase="*) ;;
            "mesonFlags="*) ;;
            "name="*) ;;
            "nativeBuildInputs="*) ;;
            "nobuildPhase="*) ;;
            "out="*) ;;
            "outputs="*) ;;
            "patches="*) ;;
            "phases="*) ;;
            "postUnpack="*) ;;
            "preferLocalBuild="*) ;;
            "propagatedBuildInputs="*) ;;
            "propagatedNativeBuildInputs="*) ;;
            "rs="*) ;;
            "shell="*) ;;
            "src="*) ;;
            "stdenv="*) ;;
            "strictDeps="*) ;;
            "system="*) ;;
            "version="*) ;;

                # pretty sure these can stay the same
            "NIX_SSL_CERT_FILE="*) ;;
            "SSL_CERT_FILE="*) ;;

            *) export "${@?}" ;;
        esac
    }

    # shellcheck disable=1090
    . "$link"

    unset declare

    run_shell_hook

}

run_shell_hook(){
    wrap_metrics run_shell_hook "$@"
}

# Run the shellHook, if it is defined. The code is copied from nixpkgs and nix
# itself.
run_shell_hook_(){
    function _callImplicitHook ()
    {
        local def="$1";
        local hookName="$2";
        if declare -F "$hookName" > /dev/null; then
            "$hookName";
        else
            if type -p "$hookName" > /dev/null; then
                source "$hookName";
            else
                if [ -n "${!hookName:-}" ]; then
                    eval "${!hookName}";
                else
                    return "$def";
                fi;
            fi;
        fi
    }

    function _eval()
    {
        if declare -F "$1" > /dev/null 2>&1; then
            "$@";
        else
            eval "$1";
        fi
    }

    function runHook() {
        local hookName="$1";
        shift;
        local hooksSlice="${hookName%Hook}Hooks[@]";
        local hook;
        for hook in "_callImplicitHook 0 $hookName" ${!hooksSlice+"${!hooksSlice}"};
        do
            _eval "$hook" "$@";
        done;
        return 0
    }

    if [ -n "$shellHook" ]; then
        runHook shellHook
    fi

    unset runHook
    unset _eval
    unset _callImplicitHook
}


check_manifests_of(){
    wrap_metrics check_manifests_of "$@"
}

# Checks if a particular cache entry can be used by comparing the tracked files
# and their checksums, as well as the environment variables.
check_manifests_of_() {
    debug "looking for manifests in $1"
    if [ ! -f "$1"/manifest_files ]; then
        abort "error: no files manifest in $1"
    fi

    if [ ! -f "$1"/manifest_env ]; then
        abort "error: no env manifest in $1"
    fi

    # loop over the entries in the manifest, exiting if one doesn't match the
    # local file or environment variable it references.

    # files
    ok=true
    while IFS= read -r watched; do
        debug "checking file: $watched"
        watched_file=${watched%:*}
        watched_hash=${watched#*:}
        debug "file: '$watched_file'"
        debug "hash: '$watched_hash'"
        if [ -f "$watched_file" ] \
            && [ "$(nix-hash "$watched_file" | tr -d '\n')" == "$watched_hash" ]; then
            debug "$watched_file" "($watched_hash)" "ok"
        else
            debug "$watched_file" "($watched_hash)" "not ok"
            debug giving up on "$1"
            ok=false
            break
        fi
    done <"$1/manifest_files"

    # environment variables
    while IFS= read -r envvar; do
        debug "checking env var: $envvar"
        local envvar_name=${envvar%:*}
        local envvar_value=${envvar#*:}
        debug "env var: '$envvar_name'"
        debug "env var hash: '$envvar_value'"
        local current
        current=$( (printenv "$envvar_name" || true) | shasum | head -c 40)
        debug "current" "$current"
        if [ "$current" == "$envvar_value" ]; then
            debug "$envvar_name ok"
        else
            debug "$envvar_name not ok"
            ok=false
            break
        fi
    done <"$1/manifest_env"

    "$ok"
}

find_recent_first(){
    wrap_metrics find_recent_first "$@"
}

# Lists the directories at "$1", most recent first.
find_recent_first_() {
    if find --help 2>/dev/null | grep GNU >/dev/null; then
        # this assumes find and stat are the GNU variants
        find "$1" \
            -maxdepth 1 -mindepth 1 \
            -type d -printf "%T+\t%p\n" \
            | sort -r \
            | cut -f 2-
    elif stat --help 2>/dev/null | grep GNU>/dev/null; then
        # this assumes BSD find and GNU stat
        find "$1" \
            -maxdepth 1 -mindepth 1 \
            -type d -exec sh -c 'stat -c "%Y {}" {}' \; \
            | sort -rn \
            | cut -d ' ' -f 2-
    else
        # this assumes find and stat are the Darwin variants
        # the sixth column of the stat call is the number of seconds since the
        # epoch
        find "$1" \
            -maxdepth 1 -mindepth 1 \
            -type d -exec stat -lt "%s" {} \+ \
            | cut -d' ' -f6- \
            | sort -rn \
            | cut -d ' ' -f 2-
    fi
}

prune_old_entries(){
    wrap_metrics prune_old_entries "$@"
}

# removes all cache entries except the n most recent ones
# (LRU style)
prune_old_entries_() {
    local n_to_keep=${1:-5}
    while IFS= read -r entry; do
        log removing old cache entry "$entry"

        # here we avoid rm -rf at all cost in case anything goes wrong with
        # "$entry"'s content.
        rm "$entry"/manifest_env || echo could not remove "$entry/manifest_env"
        rm "$entry"/manifest_files || echo could not remove "$entry/manifest_files"
        rm "$entry"/link || echo could not remove "$entry/link"
        rmdir "$entry" || echo could not remove "$entry"
    done < <(find_recent_first "$CACHE_DIR" | tail -n +"$(( n_to_keep + 1 ))")
}

main_() {
    if ! command -v nix &>/dev/null; then
        abort nix executable not found
    fi

    XDG_CACHE_HOME=${XDG_CACHE_HOME:-~/.cache}

    CACHE_DIR=$XDG_CACHE_HOME/dfinity-sorri-v4-"$SORRI_SHELL_DIR"
    v3_cache=$XDG_CACHE_HOME/dfinity-sorri-v3
    v2_cache=$XDG_CACHE_HOME/dfinity-sorri-v2
    v1_cache=$XDG_CACHE_HOME/dfinity-sorri-v1

    # The Nix evaluation may be using `lib.inNixShell`, so we play the game
    export IN_NIX_SHELL=impure

    debug cache directory is "$CACHE_DIR"

    # If there was a V1, then tell user to delete it to avoid zombie roots
    if [ -d "$v1_cache" ]; then
        log_bold please delete "$v1_cache" unless you plan on going back to sorri v1
    fi

    # If there was a V2, then tell user to delete it to avoid zombie roots
    if [ -d "$v2_cache" ]; then
        log_bold please delete "$v2_cache" unless you plan on going back to sorri v2
    fi

    # If there was a V3, then tell user to delete it to avoid zombie roots
    if [ -d "$v3_cache" ]; then
        log_bold please delete "$v3_cache" unless you plan on going back to sorri v3
    fi

    mkdir -p "$CACHE_DIR"

    accepted=""

    log looking for matching cached shell in "$CACHE_DIR"

    while IFS= read -r candidate; do
        debug checking manifest "$candidate"
        if check_manifests_of "$candidate"; then
            debug accepting sorri cache "$candidate"
            touch "$candidate" # label as most recently used
            accepted="$candidate"
            break
        fi
    done < <(find_recent_first "$CACHE_DIR")

    if [ -n "$accepted" ]; then
        log using cache created "$(date -r "$accepted")" "($(basename "$accepted"))"
        if import_link_of "$accepted"; then
            log import was successful
        else
            log could not import "$accepted"
            rm -rf "$accepted"
            accepted=""
        fi
    fi

    if [ -z "$accepted" ]; then
        log no candidate accepted, creating manifest
        create_manifests

        # we only keep the 5 latest entries to avoid superfluous cruft in $TMP and
        # Nix GC roots.
        prune_old_entries 5
    fi

}


wrap_metrics main "$@"

# Create a JSON object with all the metrics and upload them in a separate
# process.
start="["

all_metrics=""

for data in "${SORRI_HONEYCOMB_METRICS[@]}"
do
    all_metrics="$all_metrics$start{\"data\":$data}"
    start=","
done

all_metrics="$all_metrics]"

curl --silent --fail -o /dev/null \
    -H "x-honeycomb-team: $SORRI_HONEYCOMB_TEAM" \
    -H "Content-Type: application/json" \
    --data "$all_metrics" "https:/api.honeycomb.io/1/batch/$SORRI_HONEYCOMB_DATASET" \
    || echo "sorri: WARNING: sorri could not upload metrics" &
