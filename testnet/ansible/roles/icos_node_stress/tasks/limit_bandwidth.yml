---
# Limit the bandwidth and latency using tc
#

- name: Check that bandwidth_mbit arg is defined.
  fail: msg="The variable 'bandwidth_mbit' is not defined"
  when:
    - bandwidth_mbit is undefined

- name: Check that bandwidth_mbit arg is between 10 and 1000.
  assert:
    that:
      - bandwidth_mbit|int <= 1000
      - bandwidth_mbit|int >= 1
    fail_msg: "'bandwidth_mbit' must be between 10 and 1000"

- name: Check that latency_ms arg is between 0 and 1000.
  assert:
    that:
      - latency_ms|int <= 1000
      - latency_ms|int >= 0
    fail_msg: "'latency_ms' must be between 0 and 1000"

- name: Check that drop_percentage is within bounds.
  assert:
    that:
     - drops_percentage|int <= 100
     - drops_percentage|int >= 0
    fail_msg: "'drops_percentage' must be between 0 and 100"

- name: Limit bandwidth, latency
  changed_when: true
  # This command limits the bandwidth, but ensures that SSH and other traffic is not affected
  # It works by creating two priorities, and sends all traffic (priomap) to the
  # higher priority. Then, filter redirects the IC traffic to the lower priority
  # lane. We have to do it this way, because the higher prio lane is always consulted
  # first, and we expect more IC network traffic than any other (SSH, Prometheus, ...).
  shell: |
    set -exuo pipefail
    if [[ -n "{{ ic_iface_ipv6 }}" ]]; then
      tc qdisc del dev {{ ic_iface_ipv6 }} root || true
      tc qdisc add dev {{ ic_iface_ipv6 }} root handle 1: prio
      tc qdisc add dev {{ ic_iface_ipv6 }} parent 1:3 handle 10: tbf rate {{ bandwidth_mbit }}mbit latency 400ms burst 100000
      tc qdisc add dev {{ ic_iface_ipv6 }} parent 10:1 handle 20: netem delay {{ latency_ms }}ms 5ms drop {{ drops_percentage }}%
      tc qdisc add dev {{ ic_iface_ipv6 }} parent 20:1 handle 30: sfq
      tc filter add dev {{ ic_iface_ipv6 }} protocol ipv6 parent 1:0 prio 3 u32 match ip6 dport {{ p2p_listen_port }} 0xFFFF flowid 1:3
    fi
  args:
    executable: /bin/bash
