load("//rs/tests:common.bzl", "DEPENDENCIES", "GUESTOS_RUNTIME_DEPS", "MACRO_DEPENDENCIES", "NNS_CANISTER_RUNTIME_DEPS", "UNIVERSAL_VM_RUNTIME_DEPS")
load("//rs/tests:system_tests.bzl", "system_test")

package(default_visibility = ["//visibility:public"])

MAINNET_REVISION_RUNTIME_DEPS = ["//testnet:mainnet_nns_revision"]

SUBNET_RECOVERY_RUNTIME_DEPS = [
    "//rs/tests:recovery/binaries",
    "//ic-os/guestos/envs/prod:update-img.tar.zst.sha256",
    "//ic-os/guestos/envs/prod:upload_update-img",
]

ORCHESTRATOR_UNIVERSAL_VM_ACTIVATION = ["//rs/tests:src/orchestrator/orchestrator_universal_vm_activation.sh"]

STATIC_FILE_SERVER_IMAGE_RUNTIME_DEP = [
    "//rs/tests:static-file-server_image",
]

system_test(
    name = "downgrade_app_subnet_with_ecdsa_test",
    proc_macro_deps = MACRO_DEPENDENCIES,
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    runtime_deps =
        GUESTOS_RUNTIME_DEPS +
        UNIVERSAL_VM_RUNTIME_DEPS +
        NNS_CANISTER_RUNTIME_DEPS +
        MAINNET_REVISION_RUNTIME_DEPS,
    deps = DEPENDENCIES + ["//rs/tests"],
)

system_test(
    name = "node_assign_test",
    proc_macro_deps = MACRO_DEPENDENCIES,
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    runtime_deps = GUESTOS_RUNTIME_DEPS + NNS_CANISTER_RUNTIME_DEPS,
    deps = DEPENDENCIES + ["//rs/tests"],
)

system_test(
    name = "node_reassignment_test",
    proc_macro_deps = MACRO_DEPENDENCIES,
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    runtime_deps = GUESTOS_RUNTIME_DEPS + NNS_CANISTER_RUNTIME_DEPS,
    deps = DEPENDENCIES + ["//rs/tests"],
)

system_test(
    name = "node_registration_test",
    proc_macro_deps = MACRO_DEPENDENCIES,
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    runtime_deps = GUESTOS_RUNTIME_DEPS + UNIVERSAL_VM_RUNTIME_DEPS + NNS_CANISTER_RUNTIME_DEPS,
    deps = DEPENDENCIES + ["//rs/tests"],
)

system_test(
    name = "sr_app_same_nodes_test",
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "experimental_system_test_colocation",
        "subnet_recovery",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    uses_guestos_dev_test = True,
    runtime_deps = GUESTOS_RUNTIME_DEPS + NNS_CANISTER_RUNTIME_DEPS + SUBNET_RECOVERY_RUNTIME_DEPS,
    deps = DEPENDENCIES + ["//rs/tests"],
)

system_test(
    name = "sr_app_same_nodes_enable_tecdsa_test",
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "experimental_system_test_colocation",
        "subnet_recovery",
        "system_test_hourly",
        "system_test_nightly",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    uses_guestos_dev_test = True,
    runtime_deps = GUESTOS_RUNTIME_DEPS + NNS_CANISTER_RUNTIME_DEPS + SUBNET_RECOVERY_RUNTIME_DEPS,
    deps = DEPENDENCIES + ["//rs/tests"],
)

system_test(
    name = "sr_app_same_nodes_with_tecdsa_test",
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "experimental_system_test_colocation",
        "subnet_recovery",
        "system_test_hourly",
        "system_test_nightly",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    uses_guestos_dev_test = True,
    runtime_deps = GUESTOS_RUNTIME_DEPS + NNS_CANISTER_RUNTIME_DEPS + SUBNET_RECOVERY_RUNTIME_DEPS,
    deps = DEPENDENCIES + ["//rs/tests"],
)

system_test(
    name = "sr_app_failover_nodes_test",
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "experimental_system_test_colocation",
        "subnet_recovery",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    uses_guestos_dev_test = True,
    runtime_deps = GUESTOS_RUNTIME_DEPS + NNS_CANISTER_RUNTIME_DEPS + SUBNET_RECOVERY_RUNTIME_DEPS,
    deps = DEPENDENCIES + ["//rs/tests"],
)

system_test(
    name = "sr_app_failover_nodes_enable_tecdsa_test",
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "experimental_system_test_colocation",
        "subnet_recovery",
        "system_test_hourly",
        "system_test_nightly",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    uses_guestos_dev = True,
    uses_guestos_dev_test = True,
    runtime_deps = GUESTOS_RUNTIME_DEPS + NNS_CANISTER_RUNTIME_DEPS + SUBNET_RECOVERY_RUNTIME_DEPS,
    deps = DEPENDENCIES + ["//rs/tests"],
)

system_test(
    name = "sr_app_failover_nodes_with_tecdsa_test",
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "experimental_system_test_colocation",
        "subnet_recovery",
        "system_test_hourly",
        "system_test_nightly",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    uses_guestos_dev = True,
    uses_guestos_dev_test = True,
    runtime_deps = GUESTOS_RUNTIME_DEPS + NNS_CANISTER_RUNTIME_DEPS + SUBNET_RECOVERY_RUNTIME_DEPS,
    deps = DEPENDENCIES + ["//rs/tests"],
)

system_test(
    name = "sr_app_no_upgrade_test",
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "experimental_system_test_colocation",
        "subnet_recovery",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    uses_guestos_dev_test = True,
    runtime_deps = GUESTOS_RUNTIME_DEPS + NNS_CANISTER_RUNTIME_DEPS + SUBNET_RECOVERY_RUNTIME_DEPS,
    deps = DEPENDENCIES + ["//rs/tests"],
)

system_test(
    name = "sr_app_no_upgrade_enable_tecdsa_test",
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "experimental_system_test_colocation",
        "subnet_recovery",
        "system_test_hourly",
        "system_test_nightly",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    uses_guestos_dev = True,
    uses_guestos_dev_test = True,
    runtime_deps = GUESTOS_RUNTIME_DEPS + NNS_CANISTER_RUNTIME_DEPS + SUBNET_RECOVERY_RUNTIME_DEPS,
    deps = DEPENDENCIES + ["//rs/tests"],
)

system_test(
    name = "sr_app_no_upgrade_with_tecdsa_test",
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "experimental_system_test_colocation",
        "subnet_recovery",
        "system_test_hourly",
        "system_test_nightly",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    uses_guestos_dev = True,
    uses_guestos_dev_test = True,
    runtime_deps = GUESTOS_RUNTIME_DEPS + NNS_CANISTER_RUNTIME_DEPS + SUBNET_RECOVERY_RUNTIME_DEPS,
    deps = DEPENDENCIES + ["//rs/tests"],
)

system_test(
    name = "sr_nns_same_nodes_test",
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "experimental_system_test_colocation",
        "subnet_recovery",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    uses_guestos_dev_test = True,
    runtime_deps = GUESTOS_RUNTIME_DEPS + NNS_CANISTER_RUNTIME_DEPS + SUBNET_RECOVERY_RUNTIME_DEPS,
    deps = DEPENDENCIES + ["//rs/tests"],
)

system_test(
    name = "sr_nns_failover_nodes_test",
    flaky = False,
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "experimental_system_test_colocation",
        "subnet_recovery",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    runtime_deps =
        GUESTOS_RUNTIME_DEPS +
        UNIVERSAL_VM_RUNTIME_DEPS +
        NNS_CANISTER_RUNTIME_DEPS +
        SUBNET_RECOVERY_RUNTIME_DEPS + ORCHESTRATOR_UNIVERSAL_VM_ACTIVATION + STATIC_FILE_SERVER_IMAGE_RUNTIME_DEP,
    deps = DEPENDENCIES + ["//rs/tests"],
)

system_test(
    name = "ssh_access_to_nodes_test",
    proc_macro_deps = MACRO_DEPENDENCIES,
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    runtime_deps = GUESTOS_RUNTIME_DEPS + NNS_CANISTER_RUNTIME_DEPS,
    deps = DEPENDENCIES + ["//rs/tests"],
)

system_test(
    name = "unstuck_subnet_test",
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "system_test_hourly",
        "system_test_nightly",
    ],
    target_compatible_with = ["@platforms//os:linux"],
    uses_guestos_dev_test = True,
    runtime_deps = GUESTOS_RUNTIME_DEPS + UNIVERSAL_VM_RUNTIME_DEPS + NNS_CANISTER_RUNTIME_DEPS,
    deps = DEPENDENCIES + ["//rs/tests"],
)

system_test(
    name = "upgrade_downgrade_app_subnet_test",
    proc_macro_deps = MACRO_DEPENDENCIES,
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    uses_guestos_dev_test = True,
    runtime_deps =
        GUESTOS_RUNTIME_DEPS +
        UNIVERSAL_VM_RUNTIME_DEPS +
        NNS_CANISTER_RUNTIME_DEPS +
        MAINNET_REVISION_RUNTIME_DEPS,
    deps = DEPENDENCIES + ["//rs/tests"],
)

system_test(
    name = "upgrade_downgrade_nns_subnet_test",
    proc_macro_deps = MACRO_DEPENDENCIES,
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    uses_guestos_dev_test = True,
    runtime_deps =
        GUESTOS_RUNTIME_DEPS +
        UNIVERSAL_VM_RUNTIME_DEPS +
        NNS_CANISTER_RUNTIME_DEPS +
        MAINNET_REVISION_RUNTIME_DEPS,
    deps = DEPENDENCIES + ["//rs/tests"],
)

system_test(
    name = "upgrade_with_alternative_urls",
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "system_test_hourly",
        "system_test_nightly",
    ],
    target_compatible_with = ["@platforms//os:linux"],
    uses_guestos_dev = True,
    uses_guestos_dev_test = True,
    runtime_deps = GUESTOS_RUNTIME_DEPS + UNIVERSAL_VM_RUNTIME_DEPS + NNS_CANISTER_RUNTIME_DEPS,
    deps = DEPENDENCIES + ["//rs/tests"],
)

system_test(
    name = "unassigned_node_upgrade_test",
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "system_test_hourly",
        "system_test_nightly",
    ],
    target_compatible_with = ["@platforms//os:linux"],
    uses_guestos_dev = True,
    uses_guestos_dev_test = True,
    runtime_deps = GUESTOS_RUNTIME_DEPS + UNIVERSAL_VM_RUNTIME_DEPS + NNS_CANISTER_RUNTIME_DEPS + SUBNET_RECOVERY_RUNTIME_DEPS,
    deps = DEPENDENCIES + ["//rs/tests"],
)

system_test(
    name = "rotate_ecdsa_idkg_key_test",
    proc_macro_deps = MACRO_DEPENDENCIES,
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    runtime_deps = GUESTOS_RUNTIME_DEPS + NNS_CANISTER_RUNTIME_DEPS,
    deps = DEPENDENCIES + ["//rs/tests"],
)
