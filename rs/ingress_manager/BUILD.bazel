load("@crate_index//:defs.bzl", "all_crate_deps")
load("@rules_rust//rust:defs.bzl", "rust_library", "rust_test")
load("//bazel:defs.bzl", "rust_bench")

package(default_visibility = ["//visibility:public"])

DEPENDENCIES = [
    "//rs/crypto/interfaces/sig_verification",
    "//rs/constants",
    "//rs/cycles_account_manager",
    "//rs/interfaces",
    "//rs/interfaces/registry",
    "//rs/interfaces/state_manager",
    "//rs/monitoring/logger",
    "//rs/monitoring/metrics",
    "//rs/registry/helpers",
    "//rs/registry/keys",
    "//rs/registry/subnet_type",
    "//rs/replicated_state",
    "//rs/types/ic00_types",
    "//rs/types/types",
    "//rs/validator",
    "@crate_index//:prometheus",
    "@crate_index//:slog",
]

MACRO_DEPENDENCIES = []

DEV_DEPENDENCIES = all_crate_deps(normal_dev = True) + [
    "//rs/artifact_pool",
    "//rs/config",
    "//rs/interfaces/state_manager/mocks",
    "//rs/registry/client",
    "//rs/registry/proto_data_provider",
    "//rs/test_utilities",
    "//rs/test_utilities/logger",
    "//rs/test_utilities/registry",
]

MACRO_DEV_DEPENDENCIES = []

ALIASES = {}

DATA = [
    "//rs/canister_sandbox",
    "//rs/canister_sandbox/sandbox_launcher",
    "//rs/rust_canisters/stable_structures:stable_structures_canister",
]

ENV = {
    "LAUNCHER_BINARY": "$(rootpath //rs/canister_sandbox/sandbox_launcher)",
    "SANDBOX_BINARY": "$(rootpath //rs/canister_sandbox)",
    "STABLE_STRUCTURES_CANISTER_WASM_PATH": "$(rootpath //rs/rust_canisters/stable_structures:stable_structures_canister)",
}

rust_library(
    name = "ingress_manager",
    srcs = glob(["src/**/*.rs"]),
    aliases = ALIASES,
    crate_name = "ic_ingress_manager",
    proc_macro_deps = MACRO_DEPENDENCIES,
    version = "0.8.0",
    deps = DEPENDENCIES,
)

rust_test(
    name = "ingress_manager_test",
    aliases = ALIASES,
    crate = ":ingress_manager",
    proc_macro_deps = MACRO_DEPENDENCIES + MACRO_DEV_DEPENDENCIES,
    deps = DEPENDENCIES + DEV_DEPENDENCIES,
)

rust_bench(
    name = "build_payload_bench",
    testonly = True,
    srcs = ["benches/build_payload.rs"],
    data = DATA,
    env = ENV,
    deps = all_crate_deps() + [
        ":ingress_manager",
        "//rs/artifact_pool",
        "//rs/constants",
        "//rs/interfaces",
        "//rs/interfaces/registry",
        "//rs/interfaces/state_manager",
        "//rs/interfaces/state_manager/mocks",
        "//rs/monitoring/logger",
        "//rs/monitoring/metrics",
        "//rs/registry/client",
        "//rs/registry/helpers",
        "//rs/registry/keys",
        "//rs/registry/proto_data_provider",
        "//rs/test_utilities",
        "//rs/test_utilities/registry",
        "//rs/types/ic00_types",
        "//rs/types/types",
    ],
)

rust_bench(
    name = "handle_ingress_bench",
    testonly = True,
    srcs = ["benches/handle_ingress.rs"],
    data = DATA,
    env = ENV,
    deps = all_crate_deps() + [
        ":ingress_manager",
        "//rs/artifact_pool",
        "//rs/config",
        "//rs/constants",
        "//rs/interfaces",
        "//rs/interfaces/registry",
        "//rs/interfaces/state_manager",
        "//rs/interfaces/state_manager/mocks",
        "//rs/monitoring/logger",
        "//rs/monitoring/metrics",
        "//rs/registry/client",
        "//rs/registry/keys",
        "//rs/registry/proto_data_provider",
        "//rs/registry/subnet_type",
        "//rs/replicated_state",
        "//rs/test_utilities",
        "//rs/test_utilities/logger",
        "//rs/test_utilities/registry",
        "//rs/types/types",
    ],
)
