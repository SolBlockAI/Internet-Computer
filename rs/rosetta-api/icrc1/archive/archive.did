type Account = record { owner : principal; subaccount : opt blob };
type BlockIndex = nat;

type Transaction = record {
  burn : opt Burn;
  kind : text;
  mint : opt Mint;
  approve : opt Approve;
  timestamp : nat64;
  transfer : opt Transfer;
};

type Approve = record {
  fee : opt nat;
  from : Account;
  memo : opt vec nat8;
  created_at_time : opt nat64;
  amount : nat;
  expected_allowance : opt nat;
  expires_at : opt nat64;
  spender : Account;
};

type Burn = record {
  from : Account;
  memo : opt vec nat8;
  created_at_time : opt nat64;
  amount : nat;
  spender : opt Account;
};

type Mint = record {
  to : Account;
  memo : opt vec nat8;
  created_at_time : opt nat64;
  amount : nat;
};

type Transfer = record {
  to : Account;
  fee : opt nat;
  from : Account;
  memo : opt vec nat8;
  created_at_time : opt nat64;
  amount : nat;
  spender : opt Account;
};


type Value = variant { 
    Blob : blob; 
    Text : text; 
    Nat : nat;
    Nat64: nat64;
    Int : int;
    Array : vec Value; 
    Map : Map; 
};

type Map = vec record { text; Value };

type Block = Value;

service : (principal, nat64, opt nat64, opt nat64) -> {
    append_blocks : (vec blob) -> ();
    remaining_capacity : () -> (nat64) query;
    get_transaction : (nat64) -> (opt Transaction) query;
    get_transactions : (record { start : nat; length : nat }) -> (record { transactions : vec Transaction }) query;
    get_blocks : (record { start : nat; length : nat }) -> (record { blocks : vec Block }) query;
}
