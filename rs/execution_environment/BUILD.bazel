load("@rules_rust//rust:defs.bzl", "rust_doc_test", "rust_library", "rust_test", "rust_test_suite")
load("//bazel:defs.bzl", "rust_bench")

package(default_visibility = ["//visibility:public"])

DEPENDENCIES = [
    # Keep sorted.
    "//rs/canister_sandbox/replica_controller",
    "//rs/config",
    "//rs/constants",
    "//rs/crypto/prng",
    "//rs/crypto/tecdsa",
    "//rs/crypto/tree_hash",
    "//rs/cycles_account_manager",
    "//rs/embedders",
    "//rs/interfaces",
    "//rs/interfaces/state_manager",
    "//rs/memory_tracker",
    "//rs/monitoring/logger",
    "//rs/monitoring/metrics",
    "//rs/nns/constants",
    "//rs/phantom_newtype",
    "//rs/registry/provisional_whitelist",
    "//rs/registry/routing_table",
    "//rs/registry/subnet_features",
    "//rs/registry/subnet_type",
    "//rs/replicated_state",
    "//rs/state_layout",
    "//rs/sys",
    "//rs/system_api",
    "//rs/types/base_types",
    "//rs/types/error_types",
    "//rs/types/ic00_types",
    "//rs/types/types",
    "//rs/types/wasm_types",
    "//rs/utils",
    "//rs/utils/lru_cache",
    "@crate_index//:candid",
    "@crate_index//:hex",
    "@crate_index//:ic-btc-interface",
    "@crate_index//:lazy_static",
    "@crate_index//:nix",
    "@crate_index//:num-rational",
    "@crate_index//:num-traits",
    "@crate_index//:prometheus",
    "@crate_index//:rand_0_8_4",
    "@crate_index//:scoped_threadpool",
    "@crate_index//:serde",
    "@crate_index//:serde_cbor",
    "@crate_index//:slog",
    "@crate_index//:strum",
    "@crate_index//:threadpool",
    "@crate_index//:tokio",
    "@crate_index//:tower",
    "@crate_index//:wasmparser",
]

MACRO_DEPENDENCIES = []

DEV_DEPENDENCIES = [
    # Keep sorted.
    "//rs/crypto/sha2",
    "//rs/interfaces/state_manager/mocks",
    "//rs/state_machine_tests",
    "//rs/test_utilities",
    "//rs/test_utilities/execution_environment",
    "//rs/test_utilities/logger",
    "//rs/test_utilities/metrics",
    "//rs/types/types_test_utils",
    "//rs/universal_canister/lib",
    "@crate_index//:assert_matches",
    "@crate_index//:criterion",
    "@crate_index//:iai",
    "@crate_index//:ic-btc-test-utils",
    "@crate_index//:insta",
    "@crate_index//:libflate",
    "@crate_index//:maplit",
    "@crate_index//:mockall_0_7_2",
    "@crate_index//:proptest",
    "@crate_index//:tempfile",
    "@crate_index//:wat",
]

MACRO_DEV_DEPENDENCIES = [
    "@crate_index//:test-strategy",
]

ALIASES = {}

DATA = [
    "//rs/canister_sandbox",
    "//rs/canister_sandbox/sandbox_launcher",
]

ENV = {
    "LAUNCHER_BINARY": "$(rootpath //rs/canister_sandbox/sandbox_launcher)",
    "SANDBOX_BINARY": "$(rootpath //rs/canister_sandbox)",
}

rust_library(
    name = "execution_environment",
    srcs = glob(["src/**"]),
    aliases = ALIASES,
    compile_data = glob(["tests/test-data/**"]),
    crate_name = "ic_execution_environment",
    proc_macro_deps = MACRO_DEPENDENCIES,
    version = "0.8.0",
    deps = DEPENDENCIES,
)

rust_test(
    name = "execution_environment_test",
    timeout = "long",
    aliases = ALIASES,
    crate = ":execution_environment",
    data = DATA,
    env = ENV,
    proc_macro_deps = MACRO_DEPENDENCIES + MACRO_DEV_DEPENDENCIES,
    deps = DEPENDENCIES + DEV_DEPENDENCIES,
)

rust_test_suite(
    name = "execution_environment_misc_integration",
    size = "large",
    srcs = glob(["tests/*.rs"]),
    aliases = ALIASES,
    data = DATA,
    env = ENV,
    proc_macro_deps = MACRO_DEPENDENCIES + MACRO_DEV_DEPENDENCIES,
    deps = [":execution_environment"] + DEPENDENCIES + DEV_DEPENDENCIES,
)

rust_doc_test(
    name = "execution_environment_doc_test",
    crate = ":execution_environment",
)

BENCH_DEPENDENCIES = [
    ":execution_environment",
    "//rs/config",
    "//rs/constants",
    "//rs/cycles_account_manager",
    "//rs/interfaces",
    "//rs/monitoring/logger",
    "//rs/monitoring/metrics",
    "//rs/nns/constants",
    "//rs/registry/subnet_type",
    "//rs/replicated_state",
    "//rs/system_api",
    "//rs/test_utilities",
    "//rs/test_utilities/execution_environment",
    "//rs/types/error_types",
    "//rs/types/types",
    "//rs/types/wasm_types",
    "@crate_index//:criterion",
    "@crate_index//:lazy_static",
    "@crate_index//:tempfile",
    "@crate_index//:wat",
]

rust_library(
    name = "execution_environment_bench",
    srcs = [
        "benches/lib/src/common.rs",
        "benches/lib/src/lib.rs",
        "benches/lib/src/wat.rs",
    ],
    aliases = ALIASES,
    proc_macro_deps = MACRO_DEPENDENCIES,
    version = "0.8.0",
    deps = BENCH_DEPENDENCIES,
)

rust_bench(
    name = "execute_inspect_message_bench",
    srcs = ["benches/execute_inspect_message.rs"],
    data = DATA,
    env = ENV,
    deps = [":execution_environment_bench"] + BENCH_DEPENDENCIES,
)

rust_bench(
    name = "execute_query_bench",
    srcs = ["benches/execute_query.rs"],
    data = DATA,
    env = ENV,
    deps = [":execution_environment_bench"] + BENCH_DEPENDENCIES,
)

rust_bench(
    name = "execute_update_bench",
    srcs = ["benches/execute_update.rs"],
    data = DATA,
    env = ENV,
    deps = [":execution_environment_bench"] + BENCH_DEPENDENCIES,
)

rust_bench(
    name = "scheduler_bench",
    srcs = ["benches/scheduler.rs"],
    data = DATA,
    env = ENV,
    deps = [
        ":execution_environment_bench",
        "//rs/state_machine_tests",
        "//rs/types/base_types",
        "//rs/types/types_test_utils",
    ] + BENCH_DEPENDENCIES,
)

rust_bench(
    name = "100k_canisters_bench",
    srcs = ["benches/100k_canisters.rs"],
    data = DATA + ["//rs/rust_canisters/canister_creator:canister_creator_canister"],
    env = dict(ENV.items() + [
        ("CANISTER_CREATOR_CANISTER_WASM_PATH", "$(rootpath //rs/rust_canisters/canister_creator:canister_creator_canister)"),
    ]),
    deps = [
        ":execution_environment_bench",
        "//rs/rust_canisters/canister_test",
        "//rs/state_machine_tests",
        "//rs/types/base_types",
        "//rs/types/types_test_utils",
    ] + BENCH_DEPENDENCIES,
)
