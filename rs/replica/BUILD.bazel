load("@crate_index//:defs.bzl", "all_crate_deps")
load("@rules_rust//rust:defs.bzl", "rust_binary", "rust_library", "rust_test", "rust_test_suite")
load("//bazel:defs.bzl", "rust_bench")

package(default_visibility = ["//visibility:public"])

DEPENDENCIES = all_crate_deps() + [
    "//rs/artifact_pool",
    "//rs/async_utils",
    "//rs/bitcoin/client",
    "//rs/bitcoin/consensus",
    "//rs/config",
    "//rs/consensus",
    "//rs/crypto",
    "//rs/crypto/sha2",
    "//rs/crypto/tls_interfaces",
    "//rs/crypto/utils/threshold_sig",
    "//rs/cycles_account_manager",
    "//rs/execution_environment",
    "//rs/http_endpoints/metrics",
    "//rs/http_endpoints/public",
    "//rs/https_outcalls/client",
    "//rs/interfaces",
    "//rs/interfaces/adapter_client",
    "//rs/interfaces/certified_stream_store",
    "//rs/interfaces/registry",
    "//rs/messaging",
    "//rs/monitoring/logger",
    "//rs/monitoring/metrics",
    "//rs/monitoring/pprof",
    "//rs/nns/constants",
    "//rs/p2p",
    "//rs/protobuf",
    "//rs/registry/client",
    "//rs/registry/helpers",
    "//rs/registry/local_store",
    "//rs/registry/subnet_type",
    "//rs/replica/setup_ic_network",
    "//rs/replicated_state",
    "//rs/state_manager",
    "//rs/sys",
    "//rs/types/error_types",
    "//rs/types/types",
    "//rs/utils",
    "//rs/xnet/endpoint",
    "//rs/xnet/payload_builder",
] + select({
    "@rules_rust//rust/platform:linux": [
        "//rs/monitoring/backtrace",
    ],
    "//conditions:default": [],
})

MACRO_DEPENDENCIES = []

DEV_DEPENDENCIES = [
    "//rs/interfaces/registry/mocks",
    "//rs/rust_canisters/canister_test",
    "//rs/test_utilities",
    "//rs/types/ic00_types",
    "@crate_index//:assert_cmd",
    "@crate_index//:criterion",
    "@crate_index//:predicates",
    "@crate_index//:wat",
]

MACRO_DEV_DEPENDENCIES = []

ALIASES = {}

DATA = [
    "//rs/canister_sandbox",
    "//rs/canister_sandbox/sandbox_launcher",
    "//rs/rust_canisters/stable_structures:stable_structures_canister",
]

ENV = {
    "LAUNCHER_BINARY": "$(rootpath //rs/canister_sandbox/sandbox_launcher)",
    "SANDBOX_BINARY": "$(rootpath //rs/canister_sandbox)",
    "STABLE_STRUCTURES_CANISTER_WASM_PATH": "$(rootpath //rs/rust_canisters/stable_structures:stable_structures_canister)",
}

rust_library(
    name = "replica_lib",
    srcs = glob(["src/**"]),
    aliases = ALIASES,
    crate_name = "ic_replica",
    proc_macro_deps = MACRO_DEPENDENCIES,
    version = "0.8.0",
    deps = DEPENDENCIES,
)

rust_binary(
    name = "replica",
    srcs = [
        "src/jemalloc_metrics.rs",
        "src/main.rs",
    ],
    aliases = ALIASES,
    crate_features = select({
        "//bazel:malicious_code_enabled": ["malicious_code"],
        "//conditions:default": [],
    }),
    proc_macro_deps = MACRO_DEPENDENCIES,
    deps = DEPENDENCIES + [":replica_lib"],
)

rust_test(
    name = "replica_test",
    aliases = ALIASES,
    crate = ":replica",
    proc_macro_deps = MACRO_DEPENDENCIES + MACRO_DEV_DEPENDENCIES,
    deps = DEPENDENCIES + DEV_DEPENDENCIES,
)

rust_test_suite(
    name = "replica_integration",
    srcs = glob(["tests/**/*.rs"]),
    aliases = ALIASES,
    data = [":replica"],
    proc_macro_deps = MACRO_DEPENDENCIES + MACRO_DEV_DEPENDENCIES,
    deps = [":replica_lib"] + DEPENDENCIES + DEV_DEPENDENCIES,
)

rust_bench(
    name = "calls_bench",
    testonly = True,
    srcs = ["benches/calls.rs"],
    data = DATA,
    env = ENV,
    deps = [
        "//rs/rust_canisters/canister_test",
        "@crate_index//:criterion",
    ],
)
