load("@rules_rust//rust:defs.bzl", "rust_library", "rust_test")

package(default_visibility = ["//visibility:public"])

DEPENDENCIES = [
    "//rs/canister_sandbox/backend_lib",
    "//rs/canister_sandbox/common",
    "//rs/config",
    "//rs/embedders",
    "//rs/interfaces",
    "//rs/monitoring/logger",
    "//rs/monitoring/metrics",
    "//rs/replicated_state",
    "//rs/sys",
    "//rs/system_api",
    "//rs/types/types",
    "//rs/types/wasm_types",
    "@crate_index//:lazy_static",
    "@crate_index//:libc",
    "@crate_index//:nix",
    "@crate_index//:once_cell",
    "@crate_index//:prometheus",
    "@crate_index//:regex",
    "@crate_index//:serde_json",
    "@crate_index//:slog",
    "@crate_index//:which",
]

MACRO_DEPENDENCIES = []

DEV_DEPENDENCIES = [
    "//rs/test_utilities",
    "@crate_index//:slog-async",
    "@crate_index//:slog-term",
    "@crate_index//:tempfile",
    "@crate_index//:wat",
]

MACRO_DEV_DEPENDENCIES = []

ALIASES = {}

rust_library(
    name = "replica_controller",
    srcs = glob(["src/**"]),
    aliases = ALIASES,
    crate_name = "ic_canister_sandbox_replica_controller",
    proc_macro_deps = MACRO_DEPENDENCIES,
    version = "0.9.0",
    deps = DEPENDENCIES,
)

rust_test(
    name = "replica_controller_test",
    aliases = ALIASES,
    crate = ":replica_controller",
    data = [
        "//rs/canister_sandbox",
        "//rs/canister_sandbox/sandbox_launcher",
    ],
    env = {
        "LAUNCHER_BINARY": "$(rootpath //rs/canister_sandbox/sandbox_launcher)",
        "SANDBOX_BINARY": "$(rootpath //rs/canister_sandbox)",
    },
    proc_macro_deps = MACRO_DEPENDENCIES + MACRO_DEV_DEPENDENCIES,
    deps = DEPENDENCIES + DEV_DEPENDENCIES,
)
