load("@crate_index//:defs.bzl", "all_crate_deps")
load("@rules_rust//rust:defs.bzl", "rust_doc_test", "rust_library", "rust_test", "rust_test_suite")
load("//bazel:defs.bzl", "rust_bench")
load("//bazel:fuzz_testing.bzl", "DEFAULT_RUSTC_FLAGS_FOR_FUZZING")

package(default_visibility = ["//visibility:public"])

DEPENDENCIES = [
    "//rs/crypto/internal/crypto_lib/types",
    "//rs/crypto/sha2",
    "//rs/protobuf",
    "@crate_index//:serde",
    "@crate_index//:serde_bytes",
    "@crate_index//:thiserror",
]

DEV_DEPENDENCIES = all_crate_deps(normal_dev = True) + [
    "//rs/crypto/test_utils/reproducible_rng",
    "//rs/crypto/tree_hash/test_utils",
]

rust_library(
    name = "tree_hash",
    srcs = glob(["src/**"]),
    crate_name = "ic_crypto_tree_hash",
    rustc_flags = select({
        "//bazel:fuzzing_code_enabled": DEFAULT_RUSTC_FLAGS_FOR_FUZZING,
        "//conditions:default": [],
    }),
    version = "0.8.0",
    deps = DEPENDENCIES,
)

rust_test(
    name = "tree_hash_test",
    crate = ":tree_hash",
    deps = DEV_DEPENDENCIES,
)

rust_test_suite(
    name = "tree_hash_integration",
    srcs = glob(["tests/**"]),
    edition = "2021",
    deps = DEPENDENCIES + DEV_DEPENDENCIES + [":tree_hash"],
)

rust_doc_test(
    name = "tree_hash_doc_test",
    crate = ":tree_hash",
    deps = DEV_DEPENDENCIES,
)

rust_bench(
    name = "tree_hash_bench",
    testonly = True,
    srcs = ["benches/tree_hash.rs"],
    deps = DEPENDENCIES + DEV_DEPENDENCIES + [":tree_hash"],
)

rust_bench(
    name = "flat_map_bench",
    testonly = True,
    srcs = ["benches/flat_map.rs"],
    deps = DEPENDENCIES + DEV_DEPENDENCIES + [":tree_hash"],
)
